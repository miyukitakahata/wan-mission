
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `reflection_notes` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model reflection_notes
 * 
 */
export type reflection_notesModel = runtime.Types.Result.DefaultSelection<Prisma.$reflection_notesPayload>

export type AggregateReflection_notes = {
  _count: Reflection_notesCountAggregateOutputType | null
  _avg: Reflection_notesAvgAggregateOutputType | null
  _sum: Reflection_notesSumAggregateOutputType | null
  _min: Reflection_notesMinAggregateOutputType | null
  _max: Reflection_notesMaxAggregateOutputType | null
}

export type Reflection_notesAvgAggregateOutputType = {
  id: number | null
  care_setting_id: number | null
}

export type Reflection_notesSumAggregateOutputType = {
  id: number | null
  care_setting_id: number | null
}

export type Reflection_notesMinAggregateOutputType = {
  id: number | null
  care_setting_id: number | null
  content: string | null
  approved_by_parent: boolean | null
  created_at: Date | null
  updated_at: Date | null
}

export type Reflection_notesMaxAggregateOutputType = {
  id: number | null
  care_setting_id: number | null
  content: string | null
  approved_by_parent: boolean | null
  created_at: Date | null
  updated_at: Date | null
}

export type Reflection_notesCountAggregateOutputType = {
  id: number
  care_setting_id: number
  content: number
  approved_by_parent: number
  created_at: number
  updated_at: number
  _all: number
}


export type Reflection_notesAvgAggregateInputType = {
  id?: true
  care_setting_id?: true
}

export type Reflection_notesSumAggregateInputType = {
  id?: true
  care_setting_id?: true
}

export type Reflection_notesMinAggregateInputType = {
  id?: true
  care_setting_id?: true
  content?: true
  approved_by_parent?: true
  created_at?: true
  updated_at?: true
}

export type Reflection_notesMaxAggregateInputType = {
  id?: true
  care_setting_id?: true
  content?: true
  approved_by_parent?: true
  created_at?: true
  updated_at?: true
}

export type Reflection_notesCountAggregateInputType = {
  id?: true
  care_setting_id?: true
  content?: true
  approved_by_parent?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type Reflection_notesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which reflection_notes to aggregate.
   */
  where?: Prisma.reflection_notesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of reflection_notes to fetch.
   */
  orderBy?: Prisma.reflection_notesOrderByWithRelationInput | Prisma.reflection_notesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.reflection_notesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` reflection_notes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` reflection_notes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned reflection_notes
  **/
  _count?: true | Reflection_notesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Reflection_notesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Reflection_notesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Reflection_notesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Reflection_notesMaxAggregateInputType
}

export type GetReflection_notesAggregateType<T extends Reflection_notesAggregateArgs> = {
      [P in keyof T & keyof AggregateReflection_notes]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateReflection_notes[P]>
    : Prisma.GetScalarType<T[P], AggregateReflection_notes[P]>
}




export type reflection_notesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.reflection_notesWhereInput
  orderBy?: Prisma.reflection_notesOrderByWithAggregationInput | Prisma.reflection_notesOrderByWithAggregationInput[]
  by: Prisma.Reflection_notesScalarFieldEnum[] | Prisma.Reflection_notesScalarFieldEnum
  having?: Prisma.reflection_notesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Reflection_notesCountAggregateInputType | true
  _avg?: Reflection_notesAvgAggregateInputType
  _sum?: Reflection_notesSumAggregateInputType
  _min?: Reflection_notesMinAggregateInputType
  _max?: Reflection_notesMaxAggregateInputType
}

export type Reflection_notesGroupByOutputType = {
  id: number
  care_setting_id: number
  content: string | null
  approved_by_parent: boolean
  created_at: Date | null
  updated_at: Date | null
  _count: Reflection_notesCountAggregateOutputType | null
  _avg: Reflection_notesAvgAggregateOutputType | null
  _sum: Reflection_notesSumAggregateOutputType | null
  _min: Reflection_notesMinAggregateOutputType | null
  _max: Reflection_notesMaxAggregateOutputType | null
}

type GetReflection_notesGroupByPayload<T extends reflection_notesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Reflection_notesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Reflection_notesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Reflection_notesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Reflection_notesGroupByOutputType[P]>
      }
    >
  > 



export type reflection_notesWhereInput = {
  AND?: Prisma.reflection_notesWhereInput | Prisma.reflection_notesWhereInput[]
  OR?: Prisma.reflection_notesWhereInput[]
  NOT?: Prisma.reflection_notesWhereInput | Prisma.reflection_notesWhereInput[]
  id?: Prisma.IntFilter<"reflection_notes"> | number
  care_setting_id?: Prisma.IntFilter<"reflection_notes"> | number
  content?: Prisma.StringNullableFilter<"reflection_notes"> | string | null
  approved_by_parent?: Prisma.BoolFilter<"reflection_notes"> | boolean
  created_at?: Prisma.DateTimeNullableFilter<"reflection_notes"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"reflection_notes"> | Date | string | null
  care_setting?: Prisma.XOR<Prisma.Care_settingsScalarRelationFilter, Prisma.care_settingsWhereInput>
}

export type reflection_notesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  care_setting_id?: Prisma.SortOrder
  content?: Prisma.SortOrderInput | Prisma.SortOrder
  approved_by_parent?: Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  care_setting?: Prisma.care_settingsOrderByWithRelationInput
}

export type reflection_notesWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.reflection_notesWhereInput | Prisma.reflection_notesWhereInput[]
  OR?: Prisma.reflection_notesWhereInput[]
  NOT?: Prisma.reflection_notesWhereInput | Prisma.reflection_notesWhereInput[]
  care_setting_id?: Prisma.IntFilter<"reflection_notes"> | number
  content?: Prisma.StringNullableFilter<"reflection_notes"> | string | null
  approved_by_parent?: Prisma.BoolFilter<"reflection_notes"> | boolean
  created_at?: Prisma.DateTimeNullableFilter<"reflection_notes"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"reflection_notes"> | Date | string | null
  care_setting?: Prisma.XOR<Prisma.Care_settingsScalarRelationFilter, Prisma.care_settingsWhereInput>
}, "id">

export type reflection_notesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  care_setting_id?: Prisma.SortOrder
  content?: Prisma.SortOrderInput | Prisma.SortOrder
  approved_by_parent?: Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.reflection_notesCountOrderByAggregateInput
  _avg?: Prisma.reflection_notesAvgOrderByAggregateInput
  _max?: Prisma.reflection_notesMaxOrderByAggregateInput
  _min?: Prisma.reflection_notesMinOrderByAggregateInput
  _sum?: Prisma.reflection_notesSumOrderByAggregateInput
}

export type reflection_notesScalarWhereWithAggregatesInput = {
  AND?: Prisma.reflection_notesScalarWhereWithAggregatesInput | Prisma.reflection_notesScalarWhereWithAggregatesInput[]
  OR?: Prisma.reflection_notesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.reflection_notesScalarWhereWithAggregatesInput | Prisma.reflection_notesScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"reflection_notes"> | number
  care_setting_id?: Prisma.IntWithAggregatesFilter<"reflection_notes"> | number
  content?: Prisma.StringNullableWithAggregatesFilter<"reflection_notes"> | string | null
  approved_by_parent?: Prisma.BoolWithAggregatesFilter<"reflection_notes"> | boolean
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"reflection_notes"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableWithAggregatesFilter<"reflection_notes"> | Date | string | null
}

export type reflection_notesCreateInput = {
  content?: string | null
  approved_by_parent?: boolean
  created_at?: Date | string | null
  updated_at?: Date | string | null
  care_setting: Prisma.care_settingsCreateNestedOneWithoutReflection_notesInput
}

export type reflection_notesUncheckedCreateInput = {
  id?: number
  care_setting_id: number
  content?: string | null
  approved_by_parent?: boolean
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type reflection_notesUpdateInput = {
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approved_by_parent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  care_setting?: Prisma.care_settingsUpdateOneRequiredWithoutReflection_notesNestedInput
}

export type reflection_notesUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  care_setting_id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approved_by_parent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type reflection_notesCreateManyInput = {
  id?: number
  care_setting_id: number
  content?: string | null
  approved_by_parent?: boolean
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type reflection_notesUpdateManyMutationInput = {
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approved_by_parent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type reflection_notesUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  care_setting_id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approved_by_parent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type Reflection_notesListRelationFilter = {
  every?: Prisma.reflection_notesWhereInput
  some?: Prisma.reflection_notesWhereInput
  none?: Prisma.reflection_notesWhereInput
}

export type reflection_notesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type reflection_notesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  care_setting_id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  approved_by_parent?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type reflection_notesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  care_setting_id?: Prisma.SortOrder
}

export type reflection_notesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  care_setting_id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  approved_by_parent?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type reflection_notesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  care_setting_id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  approved_by_parent?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type reflection_notesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  care_setting_id?: Prisma.SortOrder
}

export type reflection_notesCreateNestedManyWithoutCare_settingInput = {
  create?: Prisma.XOR<Prisma.reflection_notesCreateWithoutCare_settingInput, Prisma.reflection_notesUncheckedCreateWithoutCare_settingInput> | Prisma.reflection_notesCreateWithoutCare_settingInput[] | Prisma.reflection_notesUncheckedCreateWithoutCare_settingInput[]
  connectOrCreate?: Prisma.reflection_notesCreateOrConnectWithoutCare_settingInput | Prisma.reflection_notesCreateOrConnectWithoutCare_settingInput[]
  createMany?: Prisma.reflection_notesCreateManyCare_settingInputEnvelope
  connect?: Prisma.reflection_notesWhereUniqueInput | Prisma.reflection_notesWhereUniqueInput[]
}

export type reflection_notesUncheckedCreateNestedManyWithoutCare_settingInput = {
  create?: Prisma.XOR<Prisma.reflection_notesCreateWithoutCare_settingInput, Prisma.reflection_notesUncheckedCreateWithoutCare_settingInput> | Prisma.reflection_notesCreateWithoutCare_settingInput[] | Prisma.reflection_notesUncheckedCreateWithoutCare_settingInput[]
  connectOrCreate?: Prisma.reflection_notesCreateOrConnectWithoutCare_settingInput | Prisma.reflection_notesCreateOrConnectWithoutCare_settingInput[]
  createMany?: Prisma.reflection_notesCreateManyCare_settingInputEnvelope
  connect?: Prisma.reflection_notesWhereUniqueInput | Prisma.reflection_notesWhereUniqueInput[]
}

export type reflection_notesUpdateManyWithoutCare_settingNestedInput = {
  create?: Prisma.XOR<Prisma.reflection_notesCreateWithoutCare_settingInput, Prisma.reflection_notesUncheckedCreateWithoutCare_settingInput> | Prisma.reflection_notesCreateWithoutCare_settingInput[] | Prisma.reflection_notesUncheckedCreateWithoutCare_settingInput[]
  connectOrCreate?: Prisma.reflection_notesCreateOrConnectWithoutCare_settingInput | Prisma.reflection_notesCreateOrConnectWithoutCare_settingInput[]
  upsert?: Prisma.reflection_notesUpsertWithWhereUniqueWithoutCare_settingInput | Prisma.reflection_notesUpsertWithWhereUniqueWithoutCare_settingInput[]
  createMany?: Prisma.reflection_notesCreateManyCare_settingInputEnvelope
  set?: Prisma.reflection_notesWhereUniqueInput | Prisma.reflection_notesWhereUniqueInput[]
  disconnect?: Prisma.reflection_notesWhereUniqueInput | Prisma.reflection_notesWhereUniqueInput[]
  delete?: Prisma.reflection_notesWhereUniqueInput | Prisma.reflection_notesWhereUniqueInput[]
  connect?: Prisma.reflection_notesWhereUniqueInput | Prisma.reflection_notesWhereUniqueInput[]
  update?: Prisma.reflection_notesUpdateWithWhereUniqueWithoutCare_settingInput | Prisma.reflection_notesUpdateWithWhereUniqueWithoutCare_settingInput[]
  updateMany?: Prisma.reflection_notesUpdateManyWithWhereWithoutCare_settingInput | Prisma.reflection_notesUpdateManyWithWhereWithoutCare_settingInput[]
  deleteMany?: Prisma.reflection_notesScalarWhereInput | Prisma.reflection_notesScalarWhereInput[]
}

export type reflection_notesUncheckedUpdateManyWithoutCare_settingNestedInput = {
  create?: Prisma.XOR<Prisma.reflection_notesCreateWithoutCare_settingInput, Prisma.reflection_notesUncheckedCreateWithoutCare_settingInput> | Prisma.reflection_notesCreateWithoutCare_settingInput[] | Prisma.reflection_notesUncheckedCreateWithoutCare_settingInput[]
  connectOrCreate?: Prisma.reflection_notesCreateOrConnectWithoutCare_settingInput | Prisma.reflection_notesCreateOrConnectWithoutCare_settingInput[]
  upsert?: Prisma.reflection_notesUpsertWithWhereUniqueWithoutCare_settingInput | Prisma.reflection_notesUpsertWithWhereUniqueWithoutCare_settingInput[]
  createMany?: Prisma.reflection_notesCreateManyCare_settingInputEnvelope
  set?: Prisma.reflection_notesWhereUniqueInput | Prisma.reflection_notesWhereUniqueInput[]
  disconnect?: Prisma.reflection_notesWhereUniqueInput | Prisma.reflection_notesWhereUniqueInput[]
  delete?: Prisma.reflection_notesWhereUniqueInput | Prisma.reflection_notesWhereUniqueInput[]
  connect?: Prisma.reflection_notesWhereUniqueInput | Prisma.reflection_notesWhereUniqueInput[]
  update?: Prisma.reflection_notesUpdateWithWhereUniqueWithoutCare_settingInput | Prisma.reflection_notesUpdateWithWhereUniqueWithoutCare_settingInput[]
  updateMany?: Prisma.reflection_notesUpdateManyWithWhereWithoutCare_settingInput | Prisma.reflection_notesUpdateManyWithWhereWithoutCare_settingInput[]
  deleteMany?: Prisma.reflection_notesScalarWhereInput | Prisma.reflection_notesScalarWhereInput[]
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type reflection_notesCreateWithoutCare_settingInput = {
  content?: string | null
  approved_by_parent?: boolean
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type reflection_notesUncheckedCreateWithoutCare_settingInput = {
  id?: number
  content?: string | null
  approved_by_parent?: boolean
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type reflection_notesCreateOrConnectWithoutCare_settingInput = {
  where: Prisma.reflection_notesWhereUniqueInput
  create: Prisma.XOR<Prisma.reflection_notesCreateWithoutCare_settingInput, Prisma.reflection_notesUncheckedCreateWithoutCare_settingInput>
}

export type reflection_notesCreateManyCare_settingInputEnvelope = {
  data: Prisma.reflection_notesCreateManyCare_settingInput | Prisma.reflection_notesCreateManyCare_settingInput[]
  skipDuplicates?: boolean
}

export type reflection_notesUpsertWithWhereUniqueWithoutCare_settingInput = {
  where: Prisma.reflection_notesWhereUniqueInput
  update: Prisma.XOR<Prisma.reflection_notesUpdateWithoutCare_settingInput, Prisma.reflection_notesUncheckedUpdateWithoutCare_settingInput>
  create: Prisma.XOR<Prisma.reflection_notesCreateWithoutCare_settingInput, Prisma.reflection_notesUncheckedCreateWithoutCare_settingInput>
}

export type reflection_notesUpdateWithWhereUniqueWithoutCare_settingInput = {
  where: Prisma.reflection_notesWhereUniqueInput
  data: Prisma.XOR<Prisma.reflection_notesUpdateWithoutCare_settingInput, Prisma.reflection_notesUncheckedUpdateWithoutCare_settingInput>
}

export type reflection_notesUpdateManyWithWhereWithoutCare_settingInput = {
  where: Prisma.reflection_notesScalarWhereInput
  data: Prisma.XOR<Prisma.reflection_notesUpdateManyMutationInput, Prisma.reflection_notesUncheckedUpdateManyWithoutCare_settingInput>
}

export type reflection_notesScalarWhereInput = {
  AND?: Prisma.reflection_notesScalarWhereInput | Prisma.reflection_notesScalarWhereInput[]
  OR?: Prisma.reflection_notesScalarWhereInput[]
  NOT?: Prisma.reflection_notesScalarWhereInput | Prisma.reflection_notesScalarWhereInput[]
  id?: Prisma.IntFilter<"reflection_notes"> | number
  care_setting_id?: Prisma.IntFilter<"reflection_notes"> | number
  content?: Prisma.StringNullableFilter<"reflection_notes"> | string | null
  approved_by_parent?: Prisma.BoolFilter<"reflection_notes"> | boolean
  created_at?: Prisma.DateTimeNullableFilter<"reflection_notes"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"reflection_notes"> | Date | string | null
}

export type reflection_notesCreateManyCare_settingInput = {
  id?: number
  content?: string | null
  approved_by_parent?: boolean
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type reflection_notesUpdateWithoutCare_settingInput = {
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approved_by_parent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type reflection_notesUncheckedUpdateWithoutCare_settingInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approved_by_parent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type reflection_notesUncheckedUpdateManyWithoutCare_settingInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approved_by_parent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}



export type reflection_notesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  care_setting_id?: boolean
  content?: boolean
  approved_by_parent?: boolean
  created_at?: boolean
  updated_at?: boolean
  care_setting?: boolean | Prisma.care_settingsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["reflection_notes"]>

export type reflection_notesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  care_setting_id?: boolean
  content?: boolean
  approved_by_parent?: boolean
  created_at?: boolean
  updated_at?: boolean
  care_setting?: boolean | Prisma.care_settingsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["reflection_notes"]>

export type reflection_notesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  care_setting_id?: boolean
  content?: boolean
  approved_by_parent?: boolean
  created_at?: boolean
  updated_at?: boolean
  care_setting?: boolean | Prisma.care_settingsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["reflection_notes"]>

export type reflection_notesSelectScalar = {
  id?: boolean
  care_setting_id?: boolean
  content?: boolean
  approved_by_parent?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type reflection_notesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "care_setting_id" | "content" | "approved_by_parent" | "created_at" | "updated_at", ExtArgs["result"]["reflection_notes"]>
export type reflection_notesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  care_setting?: boolean | Prisma.care_settingsDefaultArgs<ExtArgs>
}
export type reflection_notesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  care_setting?: boolean | Prisma.care_settingsDefaultArgs<ExtArgs>
}
export type reflection_notesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  care_setting?: boolean | Prisma.care_settingsDefaultArgs<ExtArgs>
}

export type $reflection_notesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "reflection_notes"
  objects: {
    care_setting: Prisma.$care_settingsPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    care_setting_id: number
    content: string | null
    approved_by_parent: boolean
    created_at: Date | null
    updated_at: Date | null
  }, ExtArgs["result"]["reflection_notes"]>
  composites: {}
}

export type reflection_notesGetPayload<S extends boolean | null | undefined | reflection_notesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$reflection_notesPayload, S>

export type reflection_notesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<reflection_notesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Reflection_notesCountAggregateInputType | true
  }

export interface reflection_notesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['reflection_notes'], meta: { name: 'reflection_notes' } }
  /**
   * Find zero or one Reflection_notes that matches the filter.
   * @param {reflection_notesFindUniqueArgs} args - Arguments to find a Reflection_notes
   * @example
   * // Get one Reflection_notes
   * const reflection_notes = await prisma.reflection_notes.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends reflection_notesFindUniqueArgs>(args: Prisma.SelectSubset<T, reflection_notesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__reflection_notesClient<runtime.Types.Result.GetResult<Prisma.$reflection_notesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Reflection_notes that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {reflection_notesFindUniqueOrThrowArgs} args - Arguments to find a Reflection_notes
   * @example
   * // Get one Reflection_notes
   * const reflection_notes = await prisma.reflection_notes.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends reflection_notesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, reflection_notesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__reflection_notesClient<runtime.Types.Result.GetResult<Prisma.$reflection_notesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Reflection_notes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {reflection_notesFindFirstArgs} args - Arguments to find a Reflection_notes
   * @example
   * // Get one Reflection_notes
   * const reflection_notes = await prisma.reflection_notes.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends reflection_notesFindFirstArgs>(args?: Prisma.SelectSubset<T, reflection_notesFindFirstArgs<ExtArgs>>): Prisma.Prisma__reflection_notesClient<runtime.Types.Result.GetResult<Prisma.$reflection_notesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Reflection_notes that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {reflection_notesFindFirstOrThrowArgs} args - Arguments to find a Reflection_notes
   * @example
   * // Get one Reflection_notes
   * const reflection_notes = await prisma.reflection_notes.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends reflection_notesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, reflection_notesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__reflection_notesClient<runtime.Types.Result.GetResult<Prisma.$reflection_notesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Reflection_notes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {reflection_notesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Reflection_notes
   * const reflection_notes = await prisma.reflection_notes.findMany()
   * 
   * // Get first 10 Reflection_notes
   * const reflection_notes = await prisma.reflection_notes.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const reflection_notesWithIdOnly = await prisma.reflection_notes.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends reflection_notesFindManyArgs>(args?: Prisma.SelectSubset<T, reflection_notesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$reflection_notesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Reflection_notes.
   * @param {reflection_notesCreateArgs} args - Arguments to create a Reflection_notes.
   * @example
   * // Create one Reflection_notes
   * const Reflection_notes = await prisma.reflection_notes.create({
   *   data: {
   *     // ... data to create a Reflection_notes
   *   }
   * })
   * 
   */
  create<T extends reflection_notesCreateArgs>(args: Prisma.SelectSubset<T, reflection_notesCreateArgs<ExtArgs>>): Prisma.Prisma__reflection_notesClient<runtime.Types.Result.GetResult<Prisma.$reflection_notesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Reflection_notes.
   * @param {reflection_notesCreateManyArgs} args - Arguments to create many Reflection_notes.
   * @example
   * // Create many Reflection_notes
   * const reflection_notes = await prisma.reflection_notes.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends reflection_notesCreateManyArgs>(args?: Prisma.SelectSubset<T, reflection_notesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Reflection_notes and returns the data saved in the database.
   * @param {reflection_notesCreateManyAndReturnArgs} args - Arguments to create many Reflection_notes.
   * @example
   * // Create many Reflection_notes
   * const reflection_notes = await prisma.reflection_notes.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Reflection_notes and only return the `id`
   * const reflection_notesWithIdOnly = await prisma.reflection_notes.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends reflection_notesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, reflection_notesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$reflection_notesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Reflection_notes.
   * @param {reflection_notesDeleteArgs} args - Arguments to delete one Reflection_notes.
   * @example
   * // Delete one Reflection_notes
   * const Reflection_notes = await prisma.reflection_notes.delete({
   *   where: {
   *     // ... filter to delete one Reflection_notes
   *   }
   * })
   * 
   */
  delete<T extends reflection_notesDeleteArgs>(args: Prisma.SelectSubset<T, reflection_notesDeleteArgs<ExtArgs>>): Prisma.Prisma__reflection_notesClient<runtime.Types.Result.GetResult<Prisma.$reflection_notesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Reflection_notes.
   * @param {reflection_notesUpdateArgs} args - Arguments to update one Reflection_notes.
   * @example
   * // Update one Reflection_notes
   * const reflection_notes = await prisma.reflection_notes.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends reflection_notesUpdateArgs>(args: Prisma.SelectSubset<T, reflection_notesUpdateArgs<ExtArgs>>): Prisma.Prisma__reflection_notesClient<runtime.Types.Result.GetResult<Prisma.$reflection_notesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Reflection_notes.
   * @param {reflection_notesDeleteManyArgs} args - Arguments to filter Reflection_notes to delete.
   * @example
   * // Delete a few Reflection_notes
   * const { count } = await prisma.reflection_notes.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends reflection_notesDeleteManyArgs>(args?: Prisma.SelectSubset<T, reflection_notesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Reflection_notes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {reflection_notesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Reflection_notes
   * const reflection_notes = await prisma.reflection_notes.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends reflection_notesUpdateManyArgs>(args: Prisma.SelectSubset<T, reflection_notesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Reflection_notes and returns the data updated in the database.
   * @param {reflection_notesUpdateManyAndReturnArgs} args - Arguments to update many Reflection_notes.
   * @example
   * // Update many Reflection_notes
   * const reflection_notes = await prisma.reflection_notes.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Reflection_notes and only return the `id`
   * const reflection_notesWithIdOnly = await prisma.reflection_notes.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends reflection_notesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, reflection_notesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$reflection_notesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Reflection_notes.
   * @param {reflection_notesUpsertArgs} args - Arguments to update or create a Reflection_notes.
   * @example
   * // Update or create a Reflection_notes
   * const reflection_notes = await prisma.reflection_notes.upsert({
   *   create: {
   *     // ... data to create a Reflection_notes
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Reflection_notes we want to update
   *   }
   * })
   */
  upsert<T extends reflection_notesUpsertArgs>(args: Prisma.SelectSubset<T, reflection_notesUpsertArgs<ExtArgs>>): Prisma.Prisma__reflection_notesClient<runtime.Types.Result.GetResult<Prisma.$reflection_notesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Reflection_notes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {reflection_notesCountArgs} args - Arguments to filter Reflection_notes to count.
   * @example
   * // Count the number of Reflection_notes
   * const count = await prisma.reflection_notes.count({
   *   where: {
   *     // ... the filter for the Reflection_notes we want to count
   *   }
   * })
  **/
  count<T extends reflection_notesCountArgs>(
    args?: Prisma.Subset<T, reflection_notesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Reflection_notesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Reflection_notes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Reflection_notesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Reflection_notesAggregateArgs>(args: Prisma.Subset<T, Reflection_notesAggregateArgs>): Prisma.PrismaPromise<GetReflection_notesAggregateType<T>>

  /**
   * Group by Reflection_notes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {reflection_notesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends reflection_notesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: reflection_notesGroupByArgs['orderBy'] }
      : { orderBy?: reflection_notesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, reflection_notesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReflection_notesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the reflection_notes model
 */
readonly fields: reflection_notesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for reflection_notes.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__reflection_notesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  care_setting<T extends Prisma.care_settingsDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.care_settingsDefaultArgs<ExtArgs>>): Prisma.Prisma__care_settingsClient<runtime.Types.Result.GetResult<Prisma.$care_settingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the reflection_notes model
 */
export interface reflection_notesFieldRefs {
  readonly id: Prisma.FieldRef<"reflection_notes", 'Int'>
  readonly care_setting_id: Prisma.FieldRef<"reflection_notes", 'Int'>
  readonly content: Prisma.FieldRef<"reflection_notes", 'String'>
  readonly approved_by_parent: Prisma.FieldRef<"reflection_notes", 'Boolean'>
  readonly created_at: Prisma.FieldRef<"reflection_notes", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"reflection_notes", 'DateTime'>
}
    

// Custom InputTypes
/**
 * reflection_notes findUnique
 */
export type reflection_notesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the reflection_notes
   */
  select?: Prisma.reflection_notesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the reflection_notes
   */
  omit?: Prisma.reflection_notesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.reflection_notesInclude<ExtArgs> | null
  /**
   * Filter, which reflection_notes to fetch.
   */
  where: Prisma.reflection_notesWhereUniqueInput
}

/**
 * reflection_notes findUniqueOrThrow
 */
export type reflection_notesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the reflection_notes
   */
  select?: Prisma.reflection_notesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the reflection_notes
   */
  omit?: Prisma.reflection_notesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.reflection_notesInclude<ExtArgs> | null
  /**
   * Filter, which reflection_notes to fetch.
   */
  where: Prisma.reflection_notesWhereUniqueInput
}

/**
 * reflection_notes findFirst
 */
export type reflection_notesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the reflection_notes
   */
  select?: Prisma.reflection_notesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the reflection_notes
   */
  omit?: Prisma.reflection_notesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.reflection_notesInclude<ExtArgs> | null
  /**
   * Filter, which reflection_notes to fetch.
   */
  where?: Prisma.reflection_notesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of reflection_notes to fetch.
   */
  orderBy?: Prisma.reflection_notesOrderByWithRelationInput | Prisma.reflection_notesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for reflection_notes.
   */
  cursor?: Prisma.reflection_notesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` reflection_notes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` reflection_notes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of reflection_notes.
   */
  distinct?: Prisma.Reflection_notesScalarFieldEnum | Prisma.Reflection_notesScalarFieldEnum[]
}

/**
 * reflection_notes findFirstOrThrow
 */
export type reflection_notesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the reflection_notes
   */
  select?: Prisma.reflection_notesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the reflection_notes
   */
  omit?: Prisma.reflection_notesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.reflection_notesInclude<ExtArgs> | null
  /**
   * Filter, which reflection_notes to fetch.
   */
  where?: Prisma.reflection_notesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of reflection_notes to fetch.
   */
  orderBy?: Prisma.reflection_notesOrderByWithRelationInput | Prisma.reflection_notesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for reflection_notes.
   */
  cursor?: Prisma.reflection_notesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` reflection_notes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` reflection_notes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of reflection_notes.
   */
  distinct?: Prisma.Reflection_notesScalarFieldEnum | Prisma.Reflection_notesScalarFieldEnum[]
}

/**
 * reflection_notes findMany
 */
export type reflection_notesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the reflection_notes
   */
  select?: Prisma.reflection_notesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the reflection_notes
   */
  omit?: Prisma.reflection_notesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.reflection_notesInclude<ExtArgs> | null
  /**
   * Filter, which reflection_notes to fetch.
   */
  where?: Prisma.reflection_notesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of reflection_notes to fetch.
   */
  orderBy?: Prisma.reflection_notesOrderByWithRelationInput | Prisma.reflection_notesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing reflection_notes.
   */
  cursor?: Prisma.reflection_notesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` reflection_notes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` reflection_notes.
   */
  skip?: number
  distinct?: Prisma.Reflection_notesScalarFieldEnum | Prisma.Reflection_notesScalarFieldEnum[]
}

/**
 * reflection_notes create
 */
export type reflection_notesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the reflection_notes
   */
  select?: Prisma.reflection_notesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the reflection_notes
   */
  omit?: Prisma.reflection_notesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.reflection_notesInclude<ExtArgs> | null
  /**
   * The data needed to create a reflection_notes.
   */
  data: Prisma.XOR<Prisma.reflection_notesCreateInput, Prisma.reflection_notesUncheckedCreateInput>
}

/**
 * reflection_notes createMany
 */
export type reflection_notesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many reflection_notes.
   */
  data: Prisma.reflection_notesCreateManyInput | Prisma.reflection_notesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * reflection_notes createManyAndReturn
 */
export type reflection_notesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the reflection_notes
   */
  select?: Prisma.reflection_notesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the reflection_notes
   */
  omit?: Prisma.reflection_notesOmit<ExtArgs> | null
  /**
   * The data used to create many reflection_notes.
   */
  data: Prisma.reflection_notesCreateManyInput | Prisma.reflection_notesCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.reflection_notesIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * reflection_notes update
 */
export type reflection_notesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the reflection_notes
   */
  select?: Prisma.reflection_notesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the reflection_notes
   */
  omit?: Prisma.reflection_notesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.reflection_notesInclude<ExtArgs> | null
  /**
   * The data needed to update a reflection_notes.
   */
  data: Prisma.XOR<Prisma.reflection_notesUpdateInput, Prisma.reflection_notesUncheckedUpdateInput>
  /**
   * Choose, which reflection_notes to update.
   */
  where: Prisma.reflection_notesWhereUniqueInput
}

/**
 * reflection_notes updateMany
 */
export type reflection_notesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update reflection_notes.
   */
  data: Prisma.XOR<Prisma.reflection_notesUpdateManyMutationInput, Prisma.reflection_notesUncheckedUpdateManyInput>
  /**
   * Filter which reflection_notes to update
   */
  where?: Prisma.reflection_notesWhereInput
  /**
   * Limit how many reflection_notes to update.
   */
  limit?: number
}

/**
 * reflection_notes updateManyAndReturn
 */
export type reflection_notesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the reflection_notes
   */
  select?: Prisma.reflection_notesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the reflection_notes
   */
  omit?: Prisma.reflection_notesOmit<ExtArgs> | null
  /**
   * The data used to update reflection_notes.
   */
  data: Prisma.XOR<Prisma.reflection_notesUpdateManyMutationInput, Prisma.reflection_notesUncheckedUpdateManyInput>
  /**
   * Filter which reflection_notes to update
   */
  where?: Prisma.reflection_notesWhereInput
  /**
   * Limit how many reflection_notes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.reflection_notesIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * reflection_notes upsert
 */
export type reflection_notesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the reflection_notes
   */
  select?: Prisma.reflection_notesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the reflection_notes
   */
  omit?: Prisma.reflection_notesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.reflection_notesInclude<ExtArgs> | null
  /**
   * The filter to search for the reflection_notes to update in case it exists.
   */
  where: Prisma.reflection_notesWhereUniqueInput
  /**
   * In case the reflection_notes found by the `where` argument doesn't exist, create a new reflection_notes with this data.
   */
  create: Prisma.XOR<Prisma.reflection_notesCreateInput, Prisma.reflection_notesUncheckedCreateInput>
  /**
   * In case the reflection_notes was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.reflection_notesUpdateInput, Prisma.reflection_notesUncheckedUpdateInput>
}

/**
 * reflection_notes delete
 */
export type reflection_notesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the reflection_notes
   */
  select?: Prisma.reflection_notesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the reflection_notes
   */
  omit?: Prisma.reflection_notesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.reflection_notesInclude<ExtArgs> | null
  /**
   * Filter which reflection_notes to delete.
   */
  where: Prisma.reflection_notesWhereUniqueInput
}

/**
 * reflection_notes deleteMany
 */
export type reflection_notesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which reflection_notes to delete
   */
  where?: Prisma.reflection_notesWhereInput
  /**
   * Limit how many reflection_notes to delete.
   */
  limit?: number
}

/**
 * reflection_notes without action
 */
export type reflection_notesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the reflection_notes
   */
  select?: Prisma.reflection_notesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the reflection_notes
   */
  omit?: Prisma.reflection_notesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.reflection_notesInclude<ExtArgs> | null
}
