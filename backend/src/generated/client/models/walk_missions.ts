
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `walk_missions` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model walk_missions
 * 
 */
export type walk_missionsModel = runtime.Types.Result.DefaultSelection<Prisma.$walk_missionsPayload>

export type AggregateWalk_missions = {
  _count: Walk_missionsCountAggregateOutputType | null
  _avg: Walk_missionsAvgAggregateOutputType | null
  _sum: Walk_missionsSumAggregateOutputType | null
  _min: Walk_missionsMinAggregateOutputType | null
  _max: Walk_missionsMaxAggregateOutputType | null
}

export type Walk_missionsAvgAggregateOutputType = {
  id: number | null
  care_log_id: number | null
  total_distance_m: number | null
}

export type Walk_missionsSumAggregateOutputType = {
  id: number | null
  care_log_id: number | null
  total_distance_m: number | null
}

export type Walk_missionsMinAggregateOutputType = {
  id: number | null
  care_log_id: number | null
  started_at: Date | null
  ended_at: Date | null
  total_distance_m: number | null
  result: string | null
  created_at: Date | null
}

export type Walk_missionsMaxAggregateOutputType = {
  id: number | null
  care_log_id: number | null
  started_at: Date | null
  ended_at: Date | null
  total_distance_m: number | null
  result: string | null
  created_at: Date | null
}

export type Walk_missionsCountAggregateOutputType = {
  id: number
  care_log_id: number
  started_at: number
  ended_at: number
  total_distance_m: number
  result: number
  created_at: number
  _all: number
}


export type Walk_missionsAvgAggregateInputType = {
  id?: true
  care_log_id?: true
  total_distance_m?: true
}

export type Walk_missionsSumAggregateInputType = {
  id?: true
  care_log_id?: true
  total_distance_m?: true
}

export type Walk_missionsMinAggregateInputType = {
  id?: true
  care_log_id?: true
  started_at?: true
  ended_at?: true
  total_distance_m?: true
  result?: true
  created_at?: true
}

export type Walk_missionsMaxAggregateInputType = {
  id?: true
  care_log_id?: true
  started_at?: true
  ended_at?: true
  total_distance_m?: true
  result?: true
  created_at?: true
}

export type Walk_missionsCountAggregateInputType = {
  id?: true
  care_log_id?: true
  started_at?: true
  ended_at?: true
  total_distance_m?: true
  result?: true
  created_at?: true
  _all?: true
}

export type Walk_missionsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which walk_missions to aggregate.
   */
  where?: Prisma.walk_missionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of walk_missions to fetch.
   */
  orderBy?: Prisma.walk_missionsOrderByWithRelationInput | Prisma.walk_missionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.walk_missionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` walk_missions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` walk_missions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned walk_missions
  **/
  _count?: true | Walk_missionsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Walk_missionsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Walk_missionsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Walk_missionsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Walk_missionsMaxAggregateInputType
}

export type GetWalk_missionsAggregateType<T extends Walk_missionsAggregateArgs> = {
      [P in keyof T & keyof AggregateWalk_missions]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWalk_missions[P]>
    : Prisma.GetScalarType<T[P], AggregateWalk_missions[P]>
}




export type walk_missionsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.walk_missionsWhereInput
  orderBy?: Prisma.walk_missionsOrderByWithAggregationInput | Prisma.walk_missionsOrderByWithAggregationInput[]
  by: Prisma.Walk_missionsScalarFieldEnum[] | Prisma.Walk_missionsScalarFieldEnum
  having?: Prisma.walk_missionsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Walk_missionsCountAggregateInputType | true
  _avg?: Walk_missionsAvgAggregateInputType
  _sum?: Walk_missionsSumAggregateInputType
  _min?: Walk_missionsMinAggregateInputType
  _max?: Walk_missionsMaxAggregateInputType
}

export type Walk_missionsGroupByOutputType = {
  id: number
  care_log_id: number
  started_at: Date | null
  ended_at: Date | null
  total_distance_m: number | null
  result: string | null
  created_at: Date | null
  _count: Walk_missionsCountAggregateOutputType | null
  _avg: Walk_missionsAvgAggregateOutputType | null
  _sum: Walk_missionsSumAggregateOutputType | null
  _min: Walk_missionsMinAggregateOutputType | null
  _max: Walk_missionsMaxAggregateOutputType | null
}

type GetWalk_missionsGroupByPayload<T extends walk_missionsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Walk_missionsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Walk_missionsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Walk_missionsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Walk_missionsGroupByOutputType[P]>
      }
    >
  > 



export type walk_missionsWhereInput = {
  AND?: Prisma.walk_missionsWhereInput | Prisma.walk_missionsWhereInput[]
  OR?: Prisma.walk_missionsWhereInput[]
  NOT?: Prisma.walk_missionsWhereInput | Prisma.walk_missionsWhereInput[]
  id?: Prisma.IntFilter<"walk_missions"> | number
  care_log_id?: Prisma.IntFilter<"walk_missions"> | number
  started_at?: Prisma.DateTimeNullableFilter<"walk_missions"> | Date | string | null
  ended_at?: Prisma.DateTimeNullableFilter<"walk_missions"> | Date | string | null
  total_distance_m?: Prisma.IntNullableFilter<"walk_missions"> | number | null
  result?: Prisma.StringNullableFilter<"walk_missions"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"walk_missions"> | Date | string | null
  care_log?: Prisma.XOR<Prisma.Care_logsScalarRelationFilter, Prisma.care_logsWhereInput>
}

export type walk_missionsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  care_log_id?: Prisma.SortOrder
  started_at?: Prisma.SortOrderInput | Prisma.SortOrder
  ended_at?: Prisma.SortOrderInput | Prisma.SortOrder
  total_distance_m?: Prisma.SortOrderInput | Prisma.SortOrder
  result?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  care_log?: Prisma.care_logsOrderByWithRelationInput
}

export type walk_missionsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.walk_missionsWhereInput | Prisma.walk_missionsWhereInput[]
  OR?: Prisma.walk_missionsWhereInput[]
  NOT?: Prisma.walk_missionsWhereInput | Prisma.walk_missionsWhereInput[]
  care_log_id?: Prisma.IntFilter<"walk_missions"> | number
  started_at?: Prisma.DateTimeNullableFilter<"walk_missions"> | Date | string | null
  ended_at?: Prisma.DateTimeNullableFilter<"walk_missions"> | Date | string | null
  total_distance_m?: Prisma.IntNullableFilter<"walk_missions"> | number | null
  result?: Prisma.StringNullableFilter<"walk_missions"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"walk_missions"> | Date | string | null
  care_log?: Prisma.XOR<Prisma.Care_logsScalarRelationFilter, Prisma.care_logsWhereInput>
}, "id">

export type walk_missionsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  care_log_id?: Prisma.SortOrder
  started_at?: Prisma.SortOrderInput | Prisma.SortOrder
  ended_at?: Prisma.SortOrderInput | Prisma.SortOrder
  total_distance_m?: Prisma.SortOrderInput | Prisma.SortOrder
  result?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.walk_missionsCountOrderByAggregateInput
  _avg?: Prisma.walk_missionsAvgOrderByAggregateInput
  _max?: Prisma.walk_missionsMaxOrderByAggregateInput
  _min?: Prisma.walk_missionsMinOrderByAggregateInput
  _sum?: Prisma.walk_missionsSumOrderByAggregateInput
}

export type walk_missionsScalarWhereWithAggregatesInput = {
  AND?: Prisma.walk_missionsScalarWhereWithAggregatesInput | Prisma.walk_missionsScalarWhereWithAggregatesInput[]
  OR?: Prisma.walk_missionsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.walk_missionsScalarWhereWithAggregatesInput | Prisma.walk_missionsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"walk_missions"> | number
  care_log_id?: Prisma.IntWithAggregatesFilter<"walk_missions"> | number
  started_at?: Prisma.DateTimeNullableWithAggregatesFilter<"walk_missions"> | Date | string | null
  ended_at?: Prisma.DateTimeNullableWithAggregatesFilter<"walk_missions"> | Date | string | null
  total_distance_m?: Prisma.IntNullableWithAggregatesFilter<"walk_missions"> | number | null
  result?: Prisma.StringNullableWithAggregatesFilter<"walk_missions"> | string | null
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"walk_missions"> | Date | string | null
}

export type walk_missionsCreateInput = {
  started_at?: Date | string | null
  ended_at?: Date | string | null
  total_distance_m?: number | null
  result?: string | null
  created_at?: Date | string | null
  care_log: Prisma.care_logsCreateNestedOneWithoutWalk_missionsInput
}

export type walk_missionsUncheckedCreateInput = {
  id?: number
  care_log_id: number
  started_at?: Date | string | null
  ended_at?: Date | string | null
  total_distance_m?: number | null
  result?: string | null
  created_at?: Date | string | null
}

export type walk_missionsUpdateInput = {
  started_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ended_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  total_distance_m?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  result?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  care_log?: Prisma.care_logsUpdateOneRequiredWithoutWalk_missionsNestedInput
}

export type walk_missionsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  care_log_id?: Prisma.IntFieldUpdateOperationsInput | number
  started_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ended_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  total_distance_m?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  result?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type walk_missionsCreateManyInput = {
  id?: number
  care_log_id: number
  started_at?: Date | string | null
  ended_at?: Date | string | null
  total_distance_m?: number | null
  result?: string | null
  created_at?: Date | string | null
}

export type walk_missionsUpdateManyMutationInput = {
  started_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ended_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  total_distance_m?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  result?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type walk_missionsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  care_log_id?: Prisma.IntFieldUpdateOperationsInput | number
  started_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ended_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  total_distance_m?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  result?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type Walk_missionsListRelationFilter = {
  every?: Prisma.walk_missionsWhereInput
  some?: Prisma.walk_missionsWhereInput
  none?: Prisma.walk_missionsWhereInput
}

export type walk_missionsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type walk_missionsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  care_log_id?: Prisma.SortOrder
  started_at?: Prisma.SortOrder
  ended_at?: Prisma.SortOrder
  total_distance_m?: Prisma.SortOrder
  result?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type walk_missionsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  care_log_id?: Prisma.SortOrder
  total_distance_m?: Prisma.SortOrder
}

export type walk_missionsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  care_log_id?: Prisma.SortOrder
  started_at?: Prisma.SortOrder
  ended_at?: Prisma.SortOrder
  total_distance_m?: Prisma.SortOrder
  result?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type walk_missionsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  care_log_id?: Prisma.SortOrder
  started_at?: Prisma.SortOrder
  ended_at?: Prisma.SortOrder
  total_distance_m?: Prisma.SortOrder
  result?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type walk_missionsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  care_log_id?: Prisma.SortOrder
  total_distance_m?: Prisma.SortOrder
}

export type walk_missionsCreateNestedManyWithoutCare_logInput = {
  create?: Prisma.XOR<Prisma.walk_missionsCreateWithoutCare_logInput, Prisma.walk_missionsUncheckedCreateWithoutCare_logInput> | Prisma.walk_missionsCreateWithoutCare_logInput[] | Prisma.walk_missionsUncheckedCreateWithoutCare_logInput[]
  connectOrCreate?: Prisma.walk_missionsCreateOrConnectWithoutCare_logInput | Prisma.walk_missionsCreateOrConnectWithoutCare_logInput[]
  createMany?: Prisma.walk_missionsCreateManyCare_logInputEnvelope
  connect?: Prisma.walk_missionsWhereUniqueInput | Prisma.walk_missionsWhereUniqueInput[]
}

export type walk_missionsUncheckedCreateNestedManyWithoutCare_logInput = {
  create?: Prisma.XOR<Prisma.walk_missionsCreateWithoutCare_logInput, Prisma.walk_missionsUncheckedCreateWithoutCare_logInput> | Prisma.walk_missionsCreateWithoutCare_logInput[] | Prisma.walk_missionsUncheckedCreateWithoutCare_logInput[]
  connectOrCreate?: Prisma.walk_missionsCreateOrConnectWithoutCare_logInput | Prisma.walk_missionsCreateOrConnectWithoutCare_logInput[]
  createMany?: Prisma.walk_missionsCreateManyCare_logInputEnvelope
  connect?: Prisma.walk_missionsWhereUniqueInput | Prisma.walk_missionsWhereUniqueInput[]
}

export type walk_missionsUpdateManyWithoutCare_logNestedInput = {
  create?: Prisma.XOR<Prisma.walk_missionsCreateWithoutCare_logInput, Prisma.walk_missionsUncheckedCreateWithoutCare_logInput> | Prisma.walk_missionsCreateWithoutCare_logInput[] | Prisma.walk_missionsUncheckedCreateWithoutCare_logInput[]
  connectOrCreate?: Prisma.walk_missionsCreateOrConnectWithoutCare_logInput | Prisma.walk_missionsCreateOrConnectWithoutCare_logInput[]
  upsert?: Prisma.walk_missionsUpsertWithWhereUniqueWithoutCare_logInput | Prisma.walk_missionsUpsertWithWhereUniqueWithoutCare_logInput[]
  createMany?: Prisma.walk_missionsCreateManyCare_logInputEnvelope
  set?: Prisma.walk_missionsWhereUniqueInput | Prisma.walk_missionsWhereUniqueInput[]
  disconnect?: Prisma.walk_missionsWhereUniqueInput | Prisma.walk_missionsWhereUniqueInput[]
  delete?: Prisma.walk_missionsWhereUniqueInput | Prisma.walk_missionsWhereUniqueInput[]
  connect?: Prisma.walk_missionsWhereUniqueInput | Prisma.walk_missionsWhereUniqueInput[]
  update?: Prisma.walk_missionsUpdateWithWhereUniqueWithoutCare_logInput | Prisma.walk_missionsUpdateWithWhereUniqueWithoutCare_logInput[]
  updateMany?: Prisma.walk_missionsUpdateManyWithWhereWithoutCare_logInput | Prisma.walk_missionsUpdateManyWithWhereWithoutCare_logInput[]
  deleteMany?: Prisma.walk_missionsScalarWhereInput | Prisma.walk_missionsScalarWhereInput[]
}

export type walk_missionsUncheckedUpdateManyWithoutCare_logNestedInput = {
  create?: Prisma.XOR<Prisma.walk_missionsCreateWithoutCare_logInput, Prisma.walk_missionsUncheckedCreateWithoutCare_logInput> | Prisma.walk_missionsCreateWithoutCare_logInput[] | Prisma.walk_missionsUncheckedCreateWithoutCare_logInput[]
  connectOrCreate?: Prisma.walk_missionsCreateOrConnectWithoutCare_logInput | Prisma.walk_missionsCreateOrConnectWithoutCare_logInput[]
  upsert?: Prisma.walk_missionsUpsertWithWhereUniqueWithoutCare_logInput | Prisma.walk_missionsUpsertWithWhereUniqueWithoutCare_logInput[]
  createMany?: Prisma.walk_missionsCreateManyCare_logInputEnvelope
  set?: Prisma.walk_missionsWhereUniqueInput | Prisma.walk_missionsWhereUniqueInput[]
  disconnect?: Prisma.walk_missionsWhereUniqueInput | Prisma.walk_missionsWhereUniqueInput[]
  delete?: Prisma.walk_missionsWhereUniqueInput | Prisma.walk_missionsWhereUniqueInput[]
  connect?: Prisma.walk_missionsWhereUniqueInput | Prisma.walk_missionsWhereUniqueInput[]
  update?: Prisma.walk_missionsUpdateWithWhereUniqueWithoutCare_logInput | Prisma.walk_missionsUpdateWithWhereUniqueWithoutCare_logInput[]
  updateMany?: Prisma.walk_missionsUpdateManyWithWhereWithoutCare_logInput | Prisma.walk_missionsUpdateManyWithWhereWithoutCare_logInput[]
  deleteMany?: Prisma.walk_missionsScalarWhereInput | Prisma.walk_missionsScalarWhereInput[]
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type walk_missionsCreateWithoutCare_logInput = {
  started_at?: Date | string | null
  ended_at?: Date | string | null
  total_distance_m?: number | null
  result?: string | null
  created_at?: Date | string | null
}

export type walk_missionsUncheckedCreateWithoutCare_logInput = {
  id?: number
  started_at?: Date | string | null
  ended_at?: Date | string | null
  total_distance_m?: number | null
  result?: string | null
  created_at?: Date | string | null
}

export type walk_missionsCreateOrConnectWithoutCare_logInput = {
  where: Prisma.walk_missionsWhereUniqueInput
  create: Prisma.XOR<Prisma.walk_missionsCreateWithoutCare_logInput, Prisma.walk_missionsUncheckedCreateWithoutCare_logInput>
}

export type walk_missionsCreateManyCare_logInputEnvelope = {
  data: Prisma.walk_missionsCreateManyCare_logInput | Prisma.walk_missionsCreateManyCare_logInput[]
  skipDuplicates?: boolean
}

export type walk_missionsUpsertWithWhereUniqueWithoutCare_logInput = {
  where: Prisma.walk_missionsWhereUniqueInput
  update: Prisma.XOR<Prisma.walk_missionsUpdateWithoutCare_logInput, Prisma.walk_missionsUncheckedUpdateWithoutCare_logInput>
  create: Prisma.XOR<Prisma.walk_missionsCreateWithoutCare_logInput, Prisma.walk_missionsUncheckedCreateWithoutCare_logInput>
}

export type walk_missionsUpdateWithWhereUniqueWithoutCare_logInput = {
  where: Prisma.walk_missionsWhereUniqueInput
  data: Prisma.XOR<Prisma.walk_missionsUpdateWithoutCare_logInput, Prisma.walk_missionsUncheckedUpdateWithoutCare_logInput>
}

export type walk_missionsUpdateManyWithWhereWithoutCare_logInput = {
  where: Prisma.walk_missionsScalarWhereInput
  data: Prisma.XOR<Prisma.walk_missionsUpdateManyMutationInput, Prisma.walk_missionsUncheckedUpdateManyWithoutCare_logInput>
}

export type walk_missionsScalarWhereInput = {
  AND?: Prisma.walk_missionsScalarWhereInput | Prisma.walk_missionsScalarWhereInput[]
  OR?: Prisma.walk_missionsScalarWhereInput[]
  NOT?: Prisma.walk_missionsScalarWhereInput | Prisma.walk_missionsScalarWhereInput[]
  id?: Prisma.IntFilter<"walk_missions"> | number
  care_log_id?: Prisma.IntFilter<"walk_missions"> | number
  started_at?: Prisma.DateTimeNullableFilter<"walk_missions"> | Date | string | null
  ended_at?: Prisma.DateTimeNullableFilter<"walk_missions"> | Date | string | null
  total_distance_m?: Prisma.IntNullableFilter<"walk_missions"> | number | null
  result?: Prisma.StringNullableFilter<"walk_missions"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"walk_missions"> | Date | string | null
}

export type walk_missionsCreateManyCare_logInput = {
  id?: number
  started_at?: Date | string | null
  ended_at?: Date | string | null
  total_distance_m?: number | null
  result?: string | null
  created_at?: Date | string | null
}

export type walk_missionsUpdateWithoutCare_logInput = {
  started_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ended_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  total_distance_m?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  result?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type walk_missionsUncheckedUpdateWithoutCare_logInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  started_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ended_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  total_distance_m?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  result?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type walk_missionsUncheckedUpdateManyWithoutCare_logInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  started_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ended_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  total_distance_m?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  result?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}



export type walk_missionsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  care_log_id?: boolean
  started_at?: boolean
  ended_at?: boolean
  total_distance_m?: boolean
  result?: boolean
  created_at?: boolean
  care_log?: boolean | Prisma.care_logsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["walk_missions"]>

export type walk_missionsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  care_log_id?: boolean
  started_at?: boolean
  ended_at?: boolean
  total_distance_m?: boolean
  result?: boolean
  created_at?: boolean
  care_log?: boolean | Prisma.care_logsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["walk_missions"]>

export type walk_missionsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  care_log_id?: boolean
  started_at?: boolean
  ended_at?: boolean
  total_distance_m?: boolean
  result?: boolean
  created_at?: boolean
  care_log?: boolean | Prisma.care_logsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["walk_missions"]>

export type walk_missionsSelectScalar = {
  id?: boolean
  care_log_id?: boolean
  started_at?: boolean
  ended_at?: boolean
  total_distance_m?: boolean
  result?: boolean
  created_at?: boolean
}

export type walk_missionsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "care_log_id" | "started_at" | "ended_at" | "total_distance_m" | "result" | "created_at", ExtArgs["result"]["walk_missions"]>
export type walk_missionsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  care_log?: boolean | Prisma.care_logsDefaultArgs<ExtArgs>
}
export type walk_missionsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  care_log?: boolean | Prisma.care_logsDefaultArgs<ExtArgs>
}
export type walk_missionsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  care_log?: boolean | Prisma.care_logsDefaultArgs<ExtArgs>
}

export type $walk_missionsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "walk_missions"
  objects: {
    care_log: Prisma.$care_logsPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    care_log_id: number
    started_at: Date | null
    ended_at: Date | null
    total_distance_m: number | null
    result: string | null
    created_at: Date | null
  }, ExtArgs["result"]["walk_missions"]>
  composites: {}
}

export type walk_missionsGetPayload<S extends boolean | null | undefined | walk_missionsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$walk_missionsPayload, S>

export type walk_missionsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<walk_missionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Walk_missionsCountAggregateInputType | true
  }

export interface walk_missionsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['walk_missions'], meta: { name: 'walk_missions' } }
  /**
   * Find zero or one Walk_missions that matches the filter.
   * @param {walk_missionsFindUniqueArgs} args - Arguments to find a Walk_missions
   * @example
   * // Get one Walk_missions
   * const walk_missions = await prisma.walk_missions.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends walk_missionsFindUniqueArgs>(args: Prisma.SelectSubset<T, walk_missionsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__walk_missionsClient<runtime.Types.Result.GetResult<Prisma.$walk_missionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Walk_missions that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {walk_missionsFindUniqueOrThrowArgs} args - Arguments to find a Walk_missions
   * @example
   * // Get one Walk_missions
   * const walk_missions = await prisma.walk_missions.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends walk_missionsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, walk_missionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__walk_missionsClient<runtime.Types.Result.GetResult<Prisma.$walk_missionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Walk_missions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {walk_missionsFindFirstArgs} args - Arguments to find a Walk_missions
   * @example
   * // Get one Walk_missions
   * const walk_missions = await prisma.walk_missions.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends walk_missionsFindFirstArgs>(args?: Prisma.SelectSubset<T, walk_missionsFindFirstArgs<ExtArgs>>): Prisma.Prisma__walk_missionsClient<runtime.Types.Result.GetResult<Prisma.$walk_missionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Walk_missions that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {walk_missionsFindFirstOrThrowArgs} args - Arguments to find a Walk_missions
   * @example
   * // Get one Walk_missions
   * const walk_missions = await prisma.walk_missions.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends walk_missionsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, walk_missionsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__walk_missionsClient<runtime.Types.Result.GetResult<Prisma.$walk_missionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Walk_missions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {walk_missionsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Walk_missions
   * const walk_missions = await prisma.walk_missions.findMany()
   * 
   * // Get first 10 Walk_missions
   * const walk_missions = await prisma.walk_missions.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const walk_missionsWithIdOnly = await prisma.walk_missions.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends walk_missionsFindManyArgs>(args?: Prisma.SelectSubset<T, walk_missionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$walk_missionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Walk_missions.
   * @param {walk_missionsCreateArgs} args - Arguments to create a Walk_missions.
   * @example
   * // Create one Walk_missions
   * const Walk_missions = await prisma.walk_missions.create({
   *   data: {
   *     // ... data to create a Walk_missions
   *   }
   * })
   * 
   */
  create<T extends walk_missionsCreateArgs>(args: Prisma.SelectSubset<T, walk_missionsCreateArgs<ExtArgs>>): Prisma.Prisma__walk_missionsClient<runtime.Types.Result.GetResult<Prisma.$walk_missionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Walk_missions.
   * @param {walk_missionsCreateManyArgs} args - Arguments to create many Walk_missions.
   * @example
   * // Create many Walk_missions
   * const walk_missions = await prisma.walk_missions.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends walk_missionsCreateManyArgs>(args?: Prisma.SelectSubset<T, walk_missionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Walk_missions and returns the data saved in the database.
   * @param {walk_missionsCreateManyAndReturnArgs} args - Arguments to create many Walk_missions.
   * @example
   * // Create many Walk_missions
   * const walk_missions = await prisma.walk_missions.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Walk_missions and only return the `id`
   * const walk_missionsWithIdOnly = await prisma.walk_missions.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends walk_missionsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, walk_missionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$walk_missionsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Walk_missions.
   * @param {walk_missionsDeleteArgs} args - Arguments to delete one Walk_missions.
   * @example
   * // Delete one Walk_missions
   * const Walk_missions = await prisma.walk_missions.delete({
   *   where: {
   *     // ... filter to delete one Walk_missions
   *   }
   * })
   * 
   */
  delete<T extends walk_missionsDeleteArgs>(args: Prisma.SelectSubset<T, walk_missionsDeleteArgs<ExtArgs>>): Prisma.Prisma__walk_missionsClient<runtime.Types.Result.GetResult<Prisma.$walk_missionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Walk_missions.
   * @param {walk_missionsUpdateArgs} args - Arguments to update one Walk_missions.
   * @example
   * // Update one Walk_missions
   * const walk_missions = await prisma.walk_missions.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends walk_missionsUpdateArgs>(args: Prisma.SelectSubset<T, walk_missionsUpdateArgs<ExtArgs>>): Prisma.Prisma__walk_missionsClient<runtime.Types.Result.GetResult<Prisma.$walk_missionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Walk_missions.
   * @param {walk_missionsDeleteManyArgs} args - Arguments to filter Walk_missions to delete.
   * @example
   * // Delete a few Walk_missions
   * const { count } = await prisma.walk_missions.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends walk_missionsDeleteManyArgs>(args?: Prisma.SelectSubset<T, walk_missionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Walk_missions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {walk_missionsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Walk_missions
   * const walk_missions = await prisma.walk_missions.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends walk_missionsUpdateManyArgs>(args: Prisma.SelectSubset<T, walk_missionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Walk_missions and returns the data updated in the database.
   * @param {walk_missionsUpdateManyAndReturnArgs} args - Arguments to update many Walk_missions.
   * @example
   * // Update many Walk_missions
   * const walk_missions = await prisma.walk_missions.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Walk_missions and only return the `id`
   * const walk_missionsWithIdOnly = await prisma.walk_missions.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends walk_missionsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, walk_missionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$walk_missionsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Walk_missions.
   * @param {walk_missionsUpsertArgs} args - Arguments to update or create a Walk_missions.
   * @example
   * // Update or create a Walk_missions
   * const walk_missions = await prisma.walk_missions.upsert({
   *   create: {
   *     // ... data to create a Walk_missions
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Walk_missions we want to update
   *   }
   * })
   */
  upsert<T extends walk_missionsUpsertArgs>(args: Prisma.SelectSubset<T, walk_missionsUpsertArgs<ExtArgs>>): Prisma.Prisma__walk_missionsClient<runtime.Types.Result.GetResult<Prisma.$walk_missionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Walk_missions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {walk_missionsCountArgs} args - Arguments to filter Walk_missions to count.
   * @example
   * // Count the number of Walk_missions
   * const count = await prisma.walk_missions.count({
   *   where: {
   *     // ... the filter for the Walk_missions we want to count
   *   }
   * })
  **/
  count<T extends walk_missionsCountArgs>(
    args?: Prisma.Subset<T, walk_missionsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Walk_missionsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Walk_missions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Walk_missionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Walk_missionsAggregateArgs>(args: Prisma.Subset<T, Walk_missionsAggregateArgs>): Prisma.PrismaPromise<GetWalk_missionsAggregateType<T>>

  /**
   * Group by Walk_missions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {walk_missionsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends walk_missionsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: walk_missionsGroupByArgs['orderBy'] }
      : { orderBy?: walk_missionsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, walk_missionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalk_missionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the walk_missions model
 */
readonly fields: walk_missionsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for walk_missions.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__walk_missionsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  care_log<T extends Prisma.care_logsDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.care_logsDefaultArgs<ExtArgs>>): Prisma.Prisma__care_logsClient<runtime.Types.Result.GetResult<Prisma.$care_logsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the walk_missions model
 */
export interface walk_missionsFieldRefs {
  readonly id: Prisma.FieldRef<"walk_missions", 'Int'>
  readonly care_log_id: Prisma.FieldRef<"walk_missions", 'Int'>
  readonly started_at: Prisma.FieldRef<"walk_missions", 'DateTime'>
  readonly ended_at: Prisma.FieldRef<"walk_missions", 'DateTime'>
  readonly total_distance_m: Prisma.FieldRef<"walk_missions", 'Int'>
  readonly result: Prisma.FieldRef<"walk_missions", 'String'>
  readonly created_at: Prisma.FieldRef<"walk_missions", 'DateTime'>
}
    

// Custom InputTypes
/**
 * walk_missions findUnique
 */
export type walk_missionsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the walk_missions
   */
  select?: Prisma.walk_missionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the walk_missions
   */
  omit?: Prisma.walk_missionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.walk_missionsInclude<ExtArgs> | null
  /**
   * Filter, which walk_missions to fetch.
   */
  where: Prisma.walk_missionsWhereUniqueInput
}

/**
 * walk_missions findUniqueOrThrow
 */
export type walk_missionsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the walk_missions
   */
  select?: Prisma.walk_missionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the walk_missions
   */
  omit?: Prisma.walk_missionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.walk_missionsInclude<ExtArgs> | null
  /**
   * Filter, which walk_missions to fetch.
   */
  where: Prisma.walk_missionsWhereUniqueInput
}

/**
 * walk_missions findFirst
 */
export type walk_missionsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the walk_missions
   */
  select?: Prisma.walk_missionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the walk_missions
   */
  omit?: Prisma.walk_missionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.walk_missionsInclude<ExtArgs> | null
  /**
   * Filter, which walk_missions to fetch.
   */
  where?: Prisma.walk_missionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of walk_missions to fetch.
   */
  orderBy?: Prisma.walk_missionsOrderByWithRelationInput | Prisma.walk_missionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for walk_missions.
   */
  cursor?: Prisma.walk_missionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` walk_missions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` walk_missions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of walk_missions.
   */
  distinct?: Prisma.Walk_missionsScalarFieldEnum | Prisma.Walk_missionsScalarFieldEnum[]
}

/**
 * walk_missions findFirstOrThrow
 */
export type walk_missionsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the walk_missions
   */
  select?: Prisma.walk_missionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the walk_missions
   */
  omit?: Prisma.walk_missionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.walk_missionsInclude<ExtArgs> | null
  /**
   * Filter, which walk_missions to fetch.
   */
  where?: Prisma.walk_missionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of walk_missions to fetch.
   */
  orderBy?: Prisma.walk_missionsOrderByWithRelationInput | Prisma.walk_missionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for walk_missions.
   */
  cursor?: Prisma.walk_missionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` walk_missions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` walk_missions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of walk_missions.
   */
  distinct?: Prisma.Walk_missionsScalarFieldEnum | Prisma.Walk_missionsScalarFieldEnum[]
}

/**
 * walk_missions findMany
 */
export type walk_missionsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the walk_missions
   */
  select?: Prisma.walk_missionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the walk_missions
   */
  omit?: Prisma.walk_missionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.walk_missionsInclude<ExtArgs> | null
  /**
   * Filter, which walk_missions to fetch.
   */
  where?: Prisma.walk_missionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of walk_missions to fetch.
   */
  orderBy?: Prisma.walk_missionsOrderByWithRelationInput | Prisma.walk_missionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing walk_missions.
   */
  cursor?: Prisma.walk_missionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` walk_missions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` walk_missions.
   */
  skip?: number
  distinct?: Prisma.Walk_missionsScalarFieldEnum | Prisma.Walk_missionsScalarFieldEnum[]
}

/**
 * walk_missions create
 */
export type walk_missionsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the walk_missions
   */
  select?: Prisma.walk_missionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the walk_missions
   */
  omit?: Prisma.walk_missionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.walk_missionsInclude<ExtArgs> | null
  /**
   * The data needed to create a walk_missions.
   */
  data: Prisma.XOR<Prisma.walk_missionsCreateInput, Prisma.walk_missionsUncheckedCreateInput>
}

/**
 * walk_missions createMany
 */
export type walk_missionsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many walk_missions.
   */
  data: Prisma.walk_missionsCreateManyInput | Prisma.walk_missionsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * walk_missions createManyAndReturn
 */
export type walk_missionsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the walk_missions
   */
  select?: Prisma.walk_missionsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the walk_missions
   */
  omit?: Prisma.walk_missionsOmit<ExtArgs> | null
  /**
   * The data used to create many walk_missions.
   */
  data: Prisma.walk_missionsCreateManyInput | Prisma.walk_missionsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.walk_missionsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * walk_missions update
 */
export type walk_missionsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the walk_missions
   */
  select?: Prisma.walk_missionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the walk_missions
   */
  omit?: Prisma.walk_missionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.walk_missionsInclude<ExtArgs> | null
  /**
   * The data needed to update a walk_missions.
   */
  data: Prisma.XOR<Prisma.walk_missionsUpdateInput, Prisma.walk_missionsUncheckedUpdateInput>
  /**
   * Choose, which walk_missions to update.
   */
  where: Prisma.walk_missionsWhereUniqueInput
}

/**
 * walk_missions updateMany
 */
export type walk_missionsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update walk_missions.
   */
  data: Prisma.XOR<Prisma.walk_missionsUpdateManyMutationInput, Prisma.walk_missionsUncheckedUpdateManyInput>
  /**
   * Filter which walk_missions to update
   */
  where?: Prisma.walk_missionsWhereInput
  /**
   * Limit how many walk_missions to update.
   */
  limit?: number
}

/**
 * walk_missions updateManyAndReturn
 */
export type walk_missionsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the walk_missions
   */
  select?: Prisma.walk_missionsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the walk_missions
   */
  omit?: Prisma.walk_missionsOmit<ExtArgs> | null
  /**
   * The data used to update walk_missions.
   */
  data: Prisma.XOR<Prisma.walk_missionsUpdateManyMutationInput, Prisma.walk_missionsUncheckedUpdateManyInput>
  /**
   * Filter which walk_missions to update
   */
  where?: Prisma.walk_missionsWhereInput
  /**
   * Limit how many walk_missions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.walk_missionsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * walk_missions upsert
 */
export type walk_missionsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the walk_missions
   */
  select?: Prisma.walk_missionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the walk_missions
   */
  omit?: Prisma.walk_missionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.walk_missionsInclude<ExtArgs> | null
  /**
   * The filter to search for the walk_missions to update in case it exists.
   */
  where: Prisma.walk_missionsWhereUniqueInput
  /**
   * In case the walk_missions found by the `where` argument doesn't exist, create a new walk_missions with this data.
   */
  create: Prisma.XOR<Prisma.walk_missionsCreateInput, Prisma.walk_missionsUncheckedCreateInput>
  /**
   * In case the walk_missions was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.walk_missionsUpdateInput, Prisma.walk_missionsUncheckedUpdateInput>
}

/**
 * walk_missions delete
 */
export type walk_missionsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the walk_missions
   */
  select?: Prisma.walk_missionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the walk_missions
   */
  omit?: Prisma.walk_missionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.walk_missionsInclude<ExtArgs> | null
  /**
   * Filter which walk_missions to delete.
   */
  where: Prisma.walk_missionsWhereUniqueInput
}

/**
 * walk_missions deleteMany
 */
export type walk_missionsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which walk_missions to delete
   */
  where?: Prisma.walk_missionsWhereInput
  /**
   * Limit how many walk_missions to delete.
   */
  limit?: number
}

/**
 * walk_missions without action
 */
export type walk_missionsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the walk_missions
   */
  select?: Prisma.walk_missionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the walk_missions
   */
  omit?: Prisma.walk_missionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.walk_missionsInclude<ExtArgs> | null
}
