
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `users` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model users
 * 
 */
export type usersModel = runtime.Types.Result.DefaultSelection<Prisma.$usersPayload>

export type AggregateUsers = {
  _count: UsersCountAggregateOutputType | null
  _min: UsersMinAggregateOutputType | null
  _max: UsersMaxAggregateOutputType | null
}

export type UsersMinAggregateOutputType = {
  id: string | null
  firebase_uid: string | null
  email: string | null
  current_plan: string | null
  is_verified: boolean | null
  created_at: Date | null
  updated_at: Date | null
}

export type UsersMaxAggregateOutputType = {
  id: string | null
  firebase_uid: string | null
  email: string | null
  current_plan: string | null
  is_verified: boolean | null
  created_at: Date | null
  updated_at: Date | null
}

export type UsersCountAggregateOutputType = {
  id: number
  firebase_uid: number
  email: number
  current_plan: number
  is_verified: number
  created_at: number
  updated_at: number
  _all: number
}


export type UsersMinAggregateInputType = {
  id?: true
  firebase_uid?: true
  email?: true
  current_plan?: true
  is_verified?: true
  created_at?: true
  updated_at?: true
}

export type UsersMaxAggregateInputType = {
  id?: true
  firebase_uid?: true
  email?: true
  current_plan?: true
  is_verified?: true
  created_at?: true
  updated_at?: true
}

export type UsersCountAggregateInputType = {
  id?: true
  firebase_uid?: true
  email?: true
  current_plan?: true
  is_verified?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type UsersAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which users to aggregate.
   */
  where?: Prisma.usersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of users to fetch.
   */
  orderBy?: Prisma.usersOrderByWithRelationInput | Prisma.usersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.usersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned users
  **/
  _count?: true | UsersCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UsersMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UsersMaxAggregateInputType
}

export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
      [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUsers[P]>
    : Prisma.GetScalarType<T[P], AggregateUsers[P]>
}




export type usersGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.usersWhereInput
  orderBy?: Prisma.usersOrderByWithAggregationInput | Prisma.usersOrderByWithAggregationInput[]
  by: Prisma.UsersScalarFieldEnum[] | Prisma.UsersScalarFieldEnum
  having?: Prisma.usersScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UsersCountAggregateInputType | true
  _min?: UsersMinAggregateInputType
  _max?: UsersMaxAggregateInputType
}

export type UsersGroupByOutputType = {
  id: string
  firebase_uid: string
  email: string
  current_plan: string | null
  is_verified: boolean | null
  created_at: Date | null
  updated_at: Date | null
  _count: UsersCountAggregateOutputType | null
  _min: UsersMinAggregateOutputType | null
  _max: UsersMaxAggregateOutputType | null
}

type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UsersGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UsersGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UsersGroupByOutputType[P]>
      }
    >
  > 



export type usersWhereInput = {
  AND?: Prisma.usersWhereInput | Prisma.usersWhereInput[]
  OR?: Prisma.usersWhereInput[]
  NOT?: Prisma.usersWhereInput | Prisma.usersWhereInput[]
  id?: Prisma.StringFilter<"users"> | string
  firebase_uid?: Prisma.StringFilter<"users"> | string
  email?: Prisma.StringFilter<"users"> | string
  current_plan?: Prisma.StringNullableFilter<"users"> | string | null
  is_verified?: Prisma.BoolNullableFilter<"users"> | boolean | null
  created_at?: Prisma.DateTimeNullableFilter<"users"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"users"> | Date | string | null
  care_settings?: Prisma.Care_settingsListRelationFilter
  message_logs?: Prisma.Message_logsListRelationFilter
  payment?: Prisma.PaymentListRelationFilter
}

export type usersOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  firebase_uid?: Prisma.SortOrder
  email?: Prisma.SortOrder
  current_plan?: Prisma.SortOrderInput | Prisma.SortOrder
  is_verified?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  care_settings?: Prisma.care_settingsOrderByRelationAggregateInput
  message_logs?: Prisma.message_logsOrderByRelationAggregateInput
  payment?: Prisma.paymentOrderByRelationAggregateInput
}

export type usersWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  firebase_uid?: string
  email?: string
  AND?: Prisma.usersWhereInput | Prisma.usersWhereInput[]
  OR?: Prisma.usersWhereInput[]
  NOT?: Prisma.usersWhereInput | Prisma.usersWhereInput[]
  current_plan?: Prisma.StringNullableFilter<"users"> | string | null
  is_verified?: Prisma.BoolNullableFilter<"users"> | boolean | null
  created_at?: Prisma.DateTimeNullableFilter<"users"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"users"> | Date | string | null
  care_settings?: Prisma.Care_settingsListRelationFilter
  message_logs?: Prisma.Message_logsListRelationFilter
  payment?: Prisma.PaymentListRelationFilter
}, "id" | "firebase_uid" | "email">

export type usersOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  firebase_uid?: Prisma.SortOrder
  email?: Prisma.SortOrder
  current_plan?: Prisma.SortOrderInput | Prisma.SortOrder
  is_verified?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.usersCountOrderByAggregateInput
  _max?: Prisma.usersMaxOrderByAggregateInput
  _min?: Prisma.usersMinOrderByAggregateInput
}

export type usersScalarWhereWithAggregatesInput = {
  AND?: Prisma.usersScalarWhereWithAggregatesInput | Prisma.usersScalarWhereWithAggregatesInput[]
  OR?: Prisma.usersScalarWhereWithAggregatesInput[]
  NOT?: Prisma.usersScalarWhereWithAggregatesInput | Prisma.usersScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"users"> | string
  firebase_uid?: Prisma.StringWithAggregatesFilter<"users"> | string
  email?: Prisma.StringWithAggregatesFilter<"users"> | string
  current_plan?: Prisma.StringNullableWithAggregatesFilter<"users"> | string | null
  is_verified?: Prisma.BoolNullableWithAggregatesFilter<"users"> | boolean | null
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
}

export type usersCreateInput = {
  id?: string
  firebase_uid: string
  email: string
  current_plan?: string | null
  is_verified?: boolean | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  care_settings?: Prisma.care_settingsCreateNestedManyWithoutUserInput
  message_logs?: Prisma.message_logsCreateNestedManyWithoutUserInput
  payment?: Prisma.paymentCreateNestedManyWithoutUserInput
}

export type usersUncheckedCreateInput = {
  id?: string
  firebase_uid: string
  email: string
  current_plan?: string | null
  is_verified?: boolean | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  care_settings?: Prisma.care_settingsUncheckedCreateNestedManyWithoutUserInput
  message_logs?: Prisma.message_logsUncheckedCreateNestedManyWithoutUserInput
  payment?: Prisma.paymentUncheckedCreateNestedManyWithoutUserInput
}

export type usersUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firebase_uid?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  current_plan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_verified?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  care_settings?: Prisma.care_settingsUpdateManyWithoutUserNestedInput
  message_logs?: Prisma.message_logsUpdateManyWithoutUserNestedInput
  payment?: Prisma.paymentUpdateManyWithoutUserNestedInput
}

export type usersUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firebase_uid?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  current_plan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_verified?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  care_settings?: Prisma.care_settingsUncheckedUpdateManyWithoutUserNestedInput
  message_logs?: Prisma.message_logsUncheckedUpdateManyWithoutUserNestedInput
  payment?: Prisma.paymentUncheckedUpdateManyWithoutUserNestedInput
}

export type usersCreateManyInput = {
  id?: string
  firebase_uid: string
  email: string
  current_plan?: string | null
  is_verified?: boolean | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type usersUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firebase_uid?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  current_plan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_verified?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type usersUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firebase_uid?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  current_plan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_verified?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type usersCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  firebase_uid?: Prisma.SortOrder
  email?: Prisma.SortOrder
  current_plan?: Prisma.SortOrder
  is_verified?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type usersMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  firebase_uid?: Prisma.SortOrder
  email?: Prisma.SortOrder
  current_plan?: Prisma.SortOrder
  is_verified?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type usersMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  firebase_uid?: Prisma.SortOrder
  email?: Prisma.SortOrder
  current_plan?: Prisma.SortOrder
  is_verified?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type UsersScalarRelationFilter = {
  is?: Prisma.usersWhereInput
  isNot?: Prisma.usersWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type NullableBoolFieldUpdateOperationsInput = {
  set?: boolean | null
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type usersCreateNestedOneWithoutCare_settingsInput = {
  create?: Prisma.XOR<Prisma.usersCreateWithoutCare_settingsInput, Prisma.usersUncheckedCreateWithoutCare_settingsInput>
  connectOrCreate?: Prisma.usersCreateOrConnectWithoutCare_settingsInput
  connect?: Prisma.usersWhereUniqueInput
}

export type usersUpdateOneRequiredWithoutCare_settingsNestedInput = {
  create?: Prisma.XOR<Prisma.usersCreateWithoutCare_settingsInput, Prisma.usersUncheckedCreateWithoutCare_settingsInput>
  connectOrCreate?: Prisma.usersCreateOrConnectWithoutCare_settingsInput
  upsert?: Prisma.usersUpsertWithoutCare_settingsInput
  connect?: Prisma.usersWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.usersUpdateToOneWithWhereWithoutCare_settingsInput, Prisma.usersUpdateWithoutCare_settingsInput>, Prisma.usersUncheckedUpdateWithoutCare_settingsInput>
}

export type usersCreateNestedOneWithoutMessage_logsInput = {
  create?: Prisma.XOR<Prisma.usersCreateWithoutMessage_logsInput, Prisma.usersUncheckedCreateWithoutMessage_logsInput>
  connectOrCreate?: Prisma.usersCreateOrConnectWithoutMessage_logsInput
  connect?: Prisma.usersWhereUniqueInput
}

export type usersUpdateOneRequiredWithoutMessage_logsNestedInput = {
  create?: Prisma.XOR<Prisma.usersCreateWithoutMessage_logsInput, Prisma.usersUncheckedCreateWithoutMessage_logsInput>
  connectOrCreate?: Prisma.usersCreateOrConnectWithoutMessage_logsInput
  upsert?: Prisma.usersUpsertWithoutMessage_logsInput
  connect?: Prisma.usersWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.usersUpdateToOneWithWhereWithoutMessage_logsInput, Prisma.usersUpdateWithoutMessage_logsInput>, Prisma.usersUncheckedUpdateWithoutMessage_logsInput>
}

export type usersCreateNestedOneWithoutPaymentInput = {
  create?: Prisma.XOR<Prisma.usersCreateWithoutPaymentInput, Prisma.usersUncheckedCreateWithoutPaymentInput>
  connectOrCreate?: Prisma.usersCreateOrConnectWithoutPaymentInput
  connect?: Prisma.usersWhereUniqueInput
}

export type usersUpdateOneRequiredWithoutPaymentNestedInput = {
  create?: Prisma.XOR<Prisma.usersCreateWithoutPaymentInput, Prisma.usersUncheckedCreateWithoutPaymentInput>
  connectOrCreate?: Prisma.usersCreateOrConnectWithoutPaymentInput
  upsert?: Prisma.usersUpsertWithoutPaymentInput
  connect?: Prisma.usersWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.usersUpdateToOneWithWhereWithoutPaymentInput, Prisma.usersUpdateWithoutPaymentInput>, Prisma.usersUncheckedUpdateWithoutPaymentInput>
}

export type usersCreateWithoutCare_settingsInput = {
  id?: string
  firebase_uid: string
  email: string
  current_plan?: string | null
  is_verified?: boolean | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  message_logs?: Prisma.message_logsCreateNestedManyWithoutUserInput
  payment?: Prisma.paymentCreateNestedManyWithoutUserInput
}

export type usersUncheckedCreateWithoutCare_settingsInput = {
  id?: string
  firebase_uid: string
  email: string
  current_plan?: string | null
  is_verified?: boolean | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  message_logs?: Prisma.message_logsUncheckedCreateNestedManyWithoutUserInput
  payment?: Prisma.paymentUncheckedCreateNestedManyWithoutUserInput
}

export type usersCreateOrConnectWithoutCare_settingsInput = {
  where: Prisma.usersWhereUniqueInput
  create: Prisma.XOR<Prisma.usersCreateWithoutCare_settingsInput, Prisma.usersUncheckedCreateWithoutCare_settingsInput>
}

export type usersUpsertWithoutCare_settingsInput = {
  update: Prisma.XOR<Prisma.usersUpdateWithoutCare_settingsInput, Prisma.usersUncheckedUpdateWithoutCare_settingsInput>
  create: Prisma.XOR<Prisma.usersCreateWithoutCare_settingsInput, Prisma.usersUncheckedCreateWithoutCare_settingsInput>
  where?: Prisma.usersWhereInput
}

export type usersUpdateToOneWithWhereWithoutCare_settingsInput = {
  where?: Prisma.usersWhereInput
  data: Prisma.XOR<Prisma.usersUpdateWithoutCare_settingsInput, Prisma.usersUncheckedUpdateWithoutCare_settingsInput>
}

export type usersUpdateWithoutCare_settingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firebase_uid?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  current_plan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_verified?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  message_logs?: Prisma.message_logsUpdateManyWithoutUserNestedInput
  payment?: Prisma.paymentUpdateManyWithoutUserNestedInput
}

export type usersUncheckedUpdateWithoutCare_settingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firebase_uid?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  current_plan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_verified?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  message_logs?: Prisma.message_logsUncheckedUpdateManyWithoutUserNestedInput
  payment?: Prisma.paymentUncheckedUpdateManyWithoutUserNestedInput
}

export type usersCreateWithoutMessage_logsInput = {
  id?: string
  firebase_uid: string
  email: string
  current_plan?: string | null
  is_verified?: boolean | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  care_settings?: Prisma.care_settingsCreateNestedManyWithoutUserInput
  payment?: Prisma.paymentCreateNestedManyWithoutUserInput
}

export type usersUncheckedCreateWithoutMessage_logsInput = {
  id?: string
  firebase_uid: string
  email: string
  current_plan?: string | null
  is_verified?: boolean | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  care_settings?: Prisma.care_settingsUncheckedCreateNestedManyWithoutUserInput
  payment?: Prisma.paymentUncheckedCreateNestedManyWithoutUserInput
}

export type usersCreateOrConnectWithoutMessage_logsInput = {
  where: Prisma.usersWhereUniqueInput
  create: Prisma.XOR<Prisma.usersCreateWithoutMessage_logsInput, Prisma.usersUncheckedCreateWithoutMessage_logsInput>
}

export type usersUpsertWithoutMessage_logsInput = {
  update: Prisma.XOR<Prisma.usersUpdateWithoutMessage_logsInput, Prisma.usersUncheckedUpdateWithoutMessage_logsInput>
  create: Prisma.XOR<Prisma.usersCreateWithoutMessage_logsInput, Prisma.usersUncheckedCreateWithoutMessage_logsInput>
  where?: Prisma.usersWhereInput
}

export type usersUpdateToOneWithWhereWithoutMessage_logsInput = {
  where?: Prisma.usersWhereInput
  data: Prisma.XOR<Prisma.usersUpdateWithoutMessage_logsInput, Prisma.usersUncheckedUpdateWithoutMessage_logsInput>
}

export type usersUpdateWithoutMessage_logsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firebase_uid?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  current_plan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_verified?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  care_settings?: Prisma.care_settingsUpdateManyWithoutUserNestedInput
  payment?: Prisma.paymentUpdateManyWithoutUserNestedInput
}

export type usersUncheckedUpdateWithoutMessage_logsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firebase_uid?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  current_plan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_verified?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  care_settings?: Prisma.care_settingsUncheckedUpdateManyWithoutUserNestedInput
  payment?: Prisma.paymentUncheckedUpdateManyWithoutUserNestedInput
}

export type usersCreateWithoutPaymentInput = {
  id?: string
  firebase_uid: string
  email: string
  current_plan?: string | null
  is_verified?: boolean | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  care_settings?: Prisma.care_settingsCreateNestedManyWithoutUserInput
  message_logs?: Prisma.message_logsCreateNestedManyWithoutUserInput
}

export type usersUncheckedCreateWithoutPaymentInput = {
  id?: string
  firebase_uid: string
  email: string
  current_plan?: string | null
  is_verified?: boolean | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  care_settings?: Prisma.care_settingsUncheckedCreateNestedManyWithoutUserInput
  message_logs?: Prisma.message_logsUncheckedCreateNestedManyWithoutUserInput
}

export type usersCreateOrConnectWithoutPaymentInput = {
  where: Prisma.usersWhereUniqueInput
  create: Prisma.XOR<Prisma.usersCreateWithoutPaymentInput, Prisma.usersUncheckedCreateWithoutPaymentInput>
}

export type usersUpsertWithoutPaymentInput = {
  update: Prisma.XOR<Prisma.usersUpdateWithoutPaymentInput, Prisma.usersUncheckedUpdateWithoutPaymentInput>
  create: Prisma.XOR<Prisma.usersCreateWithoutPaymentInput, Prisma.usersUncheckedCreateWithoutPaymentInput>
  where?: Prisma.usersWhereInput
}

export type usersUpdateToOneWithWhereWithoutPaymentInput = {
  where?: Prisma.usersWhereInput
  data: Prisma.XOR<Prisma.usersUpdateWithoutPaymentInput, Prisma.usersUncheckedUpdateWithoutPaymentInput>
}

export type usersUpdateWithoutPaymentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firebase_uid?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  current_plan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_verified?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  care_settings?: Prisma.care_settingsUpdateManyWithoutUserNestedInput
  message_logs?: Prisma.message_logsUpdateManyWithoutUserNestedInput
}

export type usersUncheckedUpdateWithoutPaymentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firebase_uid?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  current_plan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_verified?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  care_settings?: Prisma.care_settingsUncheckedUpdateManyWithoutUserNestedInput
  message_logs?: Prisma.message_logsUncheckedUpdateManyWithoutUserNestedInput
}


/**
 * Count Type UsersCountOutputType
 */

export type UsersCountOutputType = {
  care_settings: number
  message_logs: number
  payment: number
}

export type UsersCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  care_settings?: boolean | UsersCountOutputTypeCountCare_settingsArgs
  message_logs?: boolean | UsersCountOutputTypeCountMessage_logsArgs
  payment?: boolean | UsersCountOutputTypeCountPaymentArgs
}

/**
 * UsersCountOutputType without action
 */
export type UsersCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UsersCountOutputType
   */
  select?: Prisma.UsersCountOutputTypeSelect<ExtArgs> | null
}

/**
 * UsersCountOutputType without action
 */
export type UsersCountOutputTypeCountCare_settingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.care_settingsWhereInput
}

/**
 * UsersCountOutputType without action
 */
export type UsersCountOutputTypeCountMessage_logsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.message_logsWhereInput
}

/**
 * UsersCountOutputType without action
 */
export type UsersCountOutputTypeCountPaymentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.paymentWhereInput
}


export type usersSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  firebase_uid?: boolean
  email?: boolean
  current_plan?: boolean
  is_verified?: boolean
  created_at?: boolean
  updated_at?: boolean
  care_settings?: boolean | Prisma.users$care_settingsArgs<ExtArgs>
  message_logs?: boolean | Prisma.users$message_logsArgs<ExtArgs>
  payment?: boolean | Prisma.users$paymentArgs<ExtArgs>
  _count?: boolean | Prisma.UsersCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["users"]>

export type usersSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  firebase_uid?: boolean
  email?: boolean
  current_plan?: boolean
  is_verified?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["users"]>

export type usersSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  firebase_uid?: boolean
  email?: boolean
  current_plan?: boolean
  is_verified?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["users"]>

export type usersSelectScalar = {
  id?: boolean
  firebase_uid?: boolean
  email?: boolean
  current_plan?: boolean
  is_verified?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type usersOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "firebase_uid" | "email" | "current_plan" | "is_verified" | "created_at" | "updated_at", ExtArgs["result"]["users"]>
export type usersInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  care_settings?: boolean | Prisma.users$care_settingsArgs<ExtArgs>
  message_logs?: boolean | Prisma.users$message_logsArgs<ExtArgs>
  payment?: boolean | Prisma.users$paymentArgs<ExtArgs>
  _count?: boolean | Prisma.UsersCountOutputTypeDefaultArgs<ExtArgs>
}
export type usersIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type usersIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $usersPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "users"
  objects: {
    care_settings: Prisma.$care_settingsPayload<ExtArgs>[]
    message_logs: Prisma.$message_logsPayload<ExtArgs>[]
    payment: Prisma.$paymentPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    firebase_uid: string
    email: string
    current_plan: string | null
    is_verified: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }, ExtArgs["result"]["users"]>
  composites: {}
}

export type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$usersPayload, S>

export type usersCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UsersCountAggregateInputType | true
  }

export interface usersDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
  /**
   * Find zero or one Users that matches the filter.
   * @param {usersFindUniqueArgs} args - Arguments to find a Users
   * @example
   * // Get one Users
   * const users = await prisma.users.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends usersFindUniqueArgs>(args: Prisma.SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma.Prisma__usersClient<runtime.Types.Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Users that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
   * @example
   * // Get one Users
   * const users = await prisma.users.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__usersClient<runtime.Types.Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Users that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {usersFindFirstArgs} args - Arguments to find a Users
   * @example
   * // Get one Users
   * const users = await prisma.users.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends usersFindFirstArgs>(args?: Prisma.SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma.Prisma__usersClient<runtime.Types.Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Users that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
   * @example
   * // Get one Users
   * const users = await prisma.users.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__usersClient<runtime.Types.Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Users that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.users.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.users.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends usersFindManyArgs>(args?: Prisma.SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Users.
   * @param {usersCreateArgs} args - Arguments to create a Users.
   * @example
   * // Create one Users
   * const Users = await prisma.users.create({
   *   data: {
   *     // ... data to create a Users
   *   }
   * })
   * 
   */
  create<T extends usersCreateArgs>(args: Prisma.SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma.Prisma__usersClient<runtime.Types.Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Users.
   * @param {usersCreateManyArgs} args - Arguments to create many Users.
   * @example
   * // Create many Users
   * const users = await prisma.users.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends usersCreateManyArgs>(args?: Prisma.SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Users and returns the data saved in the database.
   * @param {usersCreateManyAndReturnArgs} args - Arguments to create many Users.
   * @example
   * // Create many Users
   * const users = await prisma.users.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Users and only return the `id`
   * const usersWithIdOnly = await prisma.users.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends usersCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, usersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Users.
   * @param {usersDeleteArgs} args - Arguments to delete one Users.
   * @example
   * // Delete one Users
   * const Users = await prisma.users.delete({
   *   where: {
   *     // ... filter to delete one Users
   *   }
   * })
   * 
   */
  delete<T extends usersDeleteArgs>(args: Prisma.SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma.Prisma__usersClient<runtime.Types.Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Users.
   * @param {usersUpdateArgs} args - Arguments to update one Users.
   * @example
   * // Update one Users
   * const users = await prisma.users.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends usersUpdateArgs>(args: Prisma.SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma.Prisma__usersClient<runtime.Types.Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Users.
   * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.users.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends usersDeleteManyArgs>(args?: Prisma.SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Users.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const users = await prisma.users.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends usersUpdateManyArgs>(args: Prisma.SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Users and returns the data updated in the database.
   * @param {usersUpdateManyAndReturnArgs} args - Arguments to update many Users.
   * @example
   * // Update many Users
   * const users = await prisma.users.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Users and only return the `id`
   * const usersWithIdOnly = await prisma.users.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends usersUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, usersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Users.
   * @param {usersUpsertArgs} args - Arguments to update or create a Users.
   * @example
   * // Update or create a Users
   * const users = await prisma.users.upsert({
   *   create: {
   *     // ... data to create a Users
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Users we want to update
   *   }
   * })
   */
  upsert<T extends usersUpsertArgs>(args: Prisma.SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma.Prisma__usersClient<runtime.Types.Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Users.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {usersCountArgs} args - Arguments to filter Users to count.
   * @example
   * // Count the number of Users
   * const count = await prisma.users.count({
   *   where: {
   *     // ... the filter for the Users we want to count
   *   }
   * })
  **/
  count<T extends usersCountArgs>(
    args?: Prisma.Subset<T, usersCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UsersCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Users.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UsersAggregateArgs>(args: Prisma.Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

  /**
   * Group by Users.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {usersGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends usersGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: usersGroupByArgs['orderBy'] }
      : { orderBy?: usersGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the users model
 */
readonly fields: usersFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for users.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__usersClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  care_settings<T extends Prisma.users$care_settingsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.users$care_settingsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$care_settingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  message_logs<T extends Prisma.users$message_logsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.users$message_logsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$message_logsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  payment<T extends Prisma.users$paymentArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.users$paymentArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the users model
 */
export interface usersFieldRefs {
  readonly id: Prisma.FieldRef<"users", 'String'>
  readonly firebase_uid: Prisma.FieldRef<"users", 'String'>
  readonly email: Prisma.FieldRef<"users", 'String'>
  readonly current_plan: Prisma.FieldRef<"users", 'String'>
  readonly is_verified: Prisma.FieldRef<"users", 'Boolean'>
  readonly created_at: Prisma.FieldRef<"users", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"users", 'DateTime'>
}
    

// Custom InputTypes
/**
 * users findUnique
 */
export type usersFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the users
   */
  select?: Prisma.usersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the users
   */
  omit?: Prisma.usersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.usersInclude<ExtArgs> | null
  /**
   * Filter, which users to fetch.
   */
  where: Prisma.usersWhereUniqueInput
}

/**
 * users findUniqueOrThrow
 */
export type usersFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the users
   */
  select?: Prisma.usersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the users
   */
  omit?: Prisma.usersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.usersInclude<ExtArgs> | null
  /**
   * Filter, which users to fetch.
   */
  where: Prisma.usersWhereUniqueInput
}

/**
 * users findFirst
 */
export type usersFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the users
   */
  select?: Prisma.usersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the users
   */
  omit?: Prisma.usersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.usersInclude<ExtArgs> | null
  /**
   * Filter, which users to fetch.
   */
  where?: Prisma.usersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of users to fetch.
   */
  orderBy?: Prisma.usersOrderByWithRelationInput | Prisma.usersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for users.
   */
  cursor?: Prisma.usersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of users.
   */
  distinct?: Prisma.UsersScalarFieldEnum | Prisma.UsersScalarFieldEnum[]
}

/**
 * users findFirstOrThrow
 */
export type usersFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the users
   */
  select?: Prisma.usersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the users
   */
  omit?: Prisma.usersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.usersInclude<ExtArgs> | null
  /**
   * Filter, which users to fetch.
   */
  where?: Prisma.usersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of users to fetch.
   */
  orderBy?: Prisma.usersOrderByWithRelationInput | Prisma.usersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for users.
   */
  cursor?: Prisma.usersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of users.
   */
  distinct?: Prisma.UsersScalarFieldEnum | Prisma.UsersScalarFieldEnum[]
}

/**
 * users findMany
 */
export type usersFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the users
   */
  select?: Prisma.usersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the users
   */
  omit?: Prisma.usersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.usersInclude<ExtArgs> | null
  /**
   * Filter, which users to fetch.
   */
  where?: Prisma.usersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of users to fetch.
   */
  orderBy?: Prisma.usersOrderByWithRelationInput | Prisma.usersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing users.
   */
  cursor?: Prisma.usersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` users.
   */
  skip?: number
  distinct?: Prisma.UsersScalarFieldEnum | Prisma.UsersScalarFieldEnum[]
}

/**
 * users create
 */
export type usersCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the users
   */
  select?: Prisma.usersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the users
   */
  omit?: Prisma.usersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.usersInclude<ExtArgs> | null
  /**
   * The data needed to create a users.
   */
  data: Prisma.XOR<Prisma.usersCreateInput, Prisma.usersUncheckedCreateInput>
}

/**
 * users createMany
 */
export type usersCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many users.
   */
  data: Prisma.usersCreateManyInput | Prisma.usersCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * users createManyAndReturn
 */
export type usersCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the users
   */
  select?: Prisma.usersSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the users
   */
  omit?: Prisma.usersOmit<ExtArgs> | null
  /**
   * The data used to create many users.
   */
  data: Prisma.usersCreateManyInput | Prisma.usersCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * users update
 */
export type usersUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the users
   */
  select?: Prisma.usersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the users
   */
  omit?: Prisma.usersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.usersInclude<ExtArgs> | null
  /**
   * The data needed to update a users.
   */
  data: Prisma.XOR<Prisma.usersUpdateInput, Prisma.usersUncheckedUpdateInput>
  /**
   * Choose, which users to update.
   */
  where: Prisma.usersWhereUniqueInput
}

/**
 * users updateMany
 */
export type usersUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update users.
   */
  data: Prisma.XOR<Prisma.usersUpdateManyMutationInput, Prisma.usersUncheckedUpdateManyInput>
  /**
   * Filter which users to update
   */
  where?: Prisma.usersWhereInput
  /**
   * Limit how many users to update.
   */
  limit?: number
}

/**
 * users updateManyAndReturn
 */
export type usersUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the users
   */
  select?: Prisma.usersSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the users
   */
  omit?: Prisma.usersOmit<ExtArgs> | null
  /**
   * The data used to update users.
   */
  data: Prisma.XOR<Prisma.usersUpdateManyMutationInput, Prisma.usersUncheckedUpdateManyInput>
  /**
   * Filter which users to update
   */
  where?: Prisma.usersWhereInput
  /**
   * Limit how many users to update.
   */
  limit?: number
}

/**
 * users upsert
 */
export type usersUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the users
   */
  select?: Prisma.usersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the users
   */
  omit?: Prisma.usersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.usersInclude<ExtArgs> | null
  /**
   * The filter to search for the users to update in case it exists.
   */
  where: Prisma.usersWhereUniqueInput
  /**
   * In case the users found by the `where` argument doesn't exist, create a new users with this data.
   */
  create: Prisma.XOR<Prisma.usersCreateInput, Prisma.usersUncheckedCreateInput>
  /**
   * In case the users was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.usersUpdateInput, Prisma.usersUncheckedUpdateInput>
}

/**
 * users delete
 */
export type usersDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the users
   */
  select?: Prisma.usersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the users
   */
  omit?: Prisma.usersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.usersInclude<ExtArgs> | null
  /**
   * Filter which users to delete.
   */
  where: Prisma.usersWhereUniqueInput
}

/**
 * users deleteMany
 */
export type usersDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which users to delete
   */
  where?: Prisma.usersWhereInput
  /**
   * Limit how many users to delete.
   */
  limit?: number
}

/**
 * users.care_settings
 */
export type users$care_settingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the care_settings
   */
  select?: Prisma.care_settingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the care_settings
   */
  omit?: Prisma.care_settingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.care_settingsInclude<ExtArgs> | null
  where?: Prisma.care_settingsWhereInput
  orderBy?: Prisma.care_settingsOrderByWithRelationInput | Prisma.care_settingsOrderByWithRelationInput[]
  cursor?: Prisma.care_settingsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Care_settingsScalarFieldEnum | Prisma.Care_settingsScalarFieldEnum[]
}

/**
 * users.message_logs
 */
export type users$message_logsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the message_logs
   */
  select?: Prisma.message_logsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the message_logs
   */
  omit?: Prisma.message_logsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.message_logsInclude<ExtArgs> | null
  where?: Prisma.message_logsWhereInput
  orderBy?: Prisma.message_logsOrderByWithRelationInput | Prisma.message_logsOrderByWithRelationInput[]
  cursor?: Prisma.message_logsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Message_logsScalarFieldEnum | Prisma.Message_logsScalarFieldEnum[]
}

/**
 * users.payment
 */
export type users$paymentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment
   */
  select?: Prisma.paymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment
   */
  omit?: Prisma.paymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.paymentInclude<ExtArgs> | null
  where?: Prisma.paymentWhereInput
  orderBy?: Prisma.paymentOrderByWithRelationInput | Prisma.paymentOrderByWithRelationInput[]
  cursor?: Prisma.paymentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PaymentScalarFieldEnum | Prisma.PaymentScalarFieldEnum[]
}

/**
 * users without action
 */
export type usersDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the users
   */
  select?: Prisma.usersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the users
   */
  omit?: Prisma.usersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.usersInclude<ExtArgs> | null
}
