# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# users types

class usersOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the users create method"""
    id: _str
    current_plan: Optional[_str]
    is_verified: Optional[_bool]
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]
    care_settings: 'care_settingsCreateManyNestedWithoutRelationsInput'
    message_logs: 'message_logsCreateManyNestedWithoutRelationsInput'
    payment: 'paymentCreateManyNestedWithoutRelationsInput'


class usersCreateInput(usersOptionalCreateInput):
    """Required arguments to the users create method"""
    firebase_uid: _str
    email: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class usersOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the users create method, without relations"""
    id: _str
    current_plan: Optional[_str]
    is_verified: Optional[_bool]
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]


class usersCreateWithoutRelationsInput(usersOptionalCreateWithoutRelationsInput):
    """Required arguments to the users create method, without relations"""
    firebase_uid: _str
    email: _str

class usersConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'usersCreateWithoutRelationsInput'
    where: 'usersWhereUniqueInput'

class usersCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'usersCreateWithoutRelationsInput'
    connect: 'usersWhereUniqueInput'
    connect_or_create: 'usersConnectOrCreateWithoutRelationsInput'


class usersCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['usersCreateWithoutRelationsInput', List['usersCreateWithoutRelationsInput']]
    connect: Union['usersWhereUniqueInput', List['usersWhereUniqueInput']]
    connect_or_create: Union['usersConnectOrCreateWithoutRelationsInput', List['usersConnectOrCreateWithoutRelationsInput']]

_usersWhereUnique_id_Input = TypedDict(
    '_usersWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_usersWhereUnique_firebase_uid_Input = TypedDict(
    '_usersWhereUnique_firebase_uid_Input',
    {
        'firebase_uid': '_str',
    },
    total=True
)

_usersWhereUnique_email_Input = TypedDict(
    '_usersWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

usersWhereUniqueInput = Union[
    '_usersWhereUnique_id_Input',
    '_usersWhereUnique_firebase_uid_Input',
    '_usersWhereUnique_email_Input',
]


class usersUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    firebase_uid: _str
    email: _str
    current_plan: Optional[_str]
    is_verified: Optional[_bool]
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]
    care_settings: 'care_settingsUpdateManyWithoutRelationsInput'
    message_logs: 'message_logsUpdateManyWithoutRelationsInput'
    payment: 'paymentUpdateManyWithoutRelationsInput'


class usersUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    firebase_uid: _str
    email: _str
    current_plan: Optional[_str]
    is_verified: Optional[_bool]
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]


class usersUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['usersCreateWithoutRelationsInput']
    connect: List['usersWhereUniqueInput']
    connect_or_create: List['usersConnectOrCreateWithoutRelationsInput']
    set: List['usersWhereUniqueInput']
    disconnect: List['usersWhereUniqueInput']
    delete: List['usersWhereUniqueInput']

    # TODO
    # update: List['usersUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['usersUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['usersScalarWhereInput']
    # upsert: List['usersUpserteWithWhereUniqueWithoutRelationsInput']


class usersUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'usersCreateWithoutRelationsInput'
    connect: 'usersWhereUniqueInput'
    connect_or_create: 'usersConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'usersUpdateInput'
    # upsert: 'usersUpsertWithoutRelationsInput'


class usersUpsertInput(TypedDict):
    create: 'usersCreateInput'
    update: 'usersUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_users_id_OrderByInput = TypedDict(
    '_users_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_users_firebase_uid_OrderByInput = TypedDict(
    '_users_firebase_uid_OrderByInput',
    {
        'firebase_uid': 'SortOrder',
    },
    total=True
)

_users_email_OrderByInput = TypedDict(
    '_users_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_users_current_plan_OrderByInput = TypedDict(
    '_users_current_plan_OrderByInput',
    {
        'current_plan': 'SortOrder',
    },
    total=True
)

_users_is_verified_OrderByInput = TypedDict(
    '_users_is_verified_OrderByInput',
    {
        'is_verified': 'SortOrder',
    },
    total=True
)

_users_created_at_OrderByInput = TypedDict(
    '_users_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_users_updated_at_OrderByInput = TypedDict(
    '_users_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_users_RelevanceInner = TypedDict(
    '_users_RelevanceInner',
    {
        'fields': 'List[usersScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_users_RelevanceOrderByInput = TypedDict(
    '_users_RelevanceOrderByInput',
    {
        '_relevance': '_users_RelevanceInner',
    },
    total=True
)

usersOrderByInput = Union[
    '_users_id_OrderByInput',
    '_users_firebase_uid_OrderByInput',
    '_users_email_OrderByInput',
    '_users_current_plan_OrderByInput',
    '_users_is_verified_OrderByInput',
    '_users_created_at_OrderByInput',
    '_users_updated_at_OrderByInput',
    '_users_RelevanceOrderByInput',
]



# recursive users types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

usersRelationFilter = TypedDict(
    'usersRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class usersListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class usersInclude(TypedDict, total=False):
    """users relational arguments"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromusers']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromusers']
    payment: Union[bool, 'FindManypaymentArgsFromusers']


    

class usersIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromusersRecursive1']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromusersRecursive1']
    payment: Union[bool, 'FindManypaymentArgsFromusersRecursive1']


class usersIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromusersRecursive2']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromusersRecursive2']
    payment: Union[bool, 'FindManypaymentArgsFromusersRecursive2']


class usersIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromusersRecursive3']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromusersRecursive3']
    payment: Union[bool, 'FindManypaymentArgsFromusersRecursive3']


class usersIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromusersRecursive4']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromusersRecursive4']
    payment: Union[bool, 'FindManypaymentArgsFromusersRecursive4']


class usersIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class usersArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyusersArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    
    

class care_settingsIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    user: Union[bool, 'usersArgsFromusersRecursive1']
    care_logs: Union[bool, 'FindManycare_logsArgsFromusersRecursive1']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromusersRecursive1']


class care_settingsIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    user: Union[bool, 'usersArgsFromusersRecursive2']
    care_logs: Union[bool, 'FindManycare_logsArgsFromusersRecursive2']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromusersRecursive2']


class care_settingsIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    user: Union[bool, 'usersArgsFromusersRecursive3']
    care_logs: Union[bool, 'FindManycare_logsArgsFromusersRecursive3']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromusersRecursive3']


class care_settingsIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    user: Union[bool, 'usersArgsFromusersRecursive4']
    care_logs: Union[bool, 'FindManycare_logsArgsFromusersRecursive4']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromusersRecursive4']


class care_settingsIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class care_settingsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'care_settingsIncludeFromcare_settingsRecursive1'


class care_settingsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'care_settingsIncludeFromcare_settingsRecursive2'


class care_settingsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'care_settingsIncludeFromcare_settingsRecursive3'


class care_settingsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'care_settingsIncludeFromcare_settingsRecursive4'


class care_settingsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManycare_settingsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive1'


class FindManycare_settingsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive2'


class FindManycare_settingsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive3'


class FindManycare_settingsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive4'


class FindManycare_settingsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    
    

class care_logsIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    care_setting: Union[bool, 'care_settingsArgsFromusersRecursive1']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromusersRecursive1']


class care_logsIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    care_setting: Union[bool, 'care_settingsArgsFromusersRecursive2']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromusersRecursive2']


class care_logsIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    care_setting: Union[bool, 'care_settingsArgsFromusersRecursive3']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromusersRecursive3']


class care_logsIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    care_setting: Union[bool, 'care_settingsArgsFromusersRecursive4']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromusersRecursive4']


class care_logsIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class care_logsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'care_logsIncludeFromcare_logsRecursive1'


class care_logsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'care_logsIncludeFromcare_logsRecursive2'


class care_logsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'care_logsIncludeFromcare_logsRecursive3'


class care_logsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'care_logsIncludeFromcare_logsRecursive4'


class care_logsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManycare_logsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive1'


class FindManycare_logsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive2'


class FindManycare_logsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive3'


class FindManycare_logsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive4'


class FindManycare_logsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    
    

class reflection_notesIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    care_setting: Union[bool, 'care_settingsArgsFromusersRecursive1']


class reflection_notesIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    care_setting: Union[bool, 'care_settingsArgsFromusersRecursive2']


class reflection_notesIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    care_setting: Union[bool, 'care_settingsArgsFromusersRecursive3']


class reflection_notesIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    care_setting: Union[bool, 'care_settingsArgsFromusersRecursive4']


class reflection_notesIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class reflection_notesArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive1'


class reflection_notesArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive2'


class reflection_notesArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive3'


class reflection_notesArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive4'


class reflection_notesArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyreflection_notesArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive1'


class FindManyreflection_notesArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive2'


class FindManyreflection_notesArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive3'


class FindManyreflection_notesArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive4'


class FindManyreflection_notesArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    
    

class message_logsIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    user: Union[bool, 'usersArgsFromusersRecursive1']


class message_logsIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    user: Union[bool, 'usersArgsFromusersRecursive2']


class message_logsIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    user: Union[bool, 'usersArgsFromusersRecursive3']


class message_logsIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    user: Union[bool, 'usersArgsFromusersRecursive4']


class message_logsIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class message_logsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'message_logsIncludeFrommessage_logsRecursive1'


class message_logsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'message_logsIncludeFrommessage_logsRecursive2'


class message_logsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'message_logsIncludeFrommessage_logsRecursive3'


class message_logsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'message_logsIncludeFrommessage_logsRecursive4'


class message_logsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManymessage_logsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive1'


class FindManymessage_logsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive2'


class FindManymessage_logsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive3'


class FindManymessage_logsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive4'


class FindManymessage_logsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    
    

class walk_missionsIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    care_log: Union[bool, 'care_logsArgsFromusersRecursive1']


class walk_missionsIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    care_log: Union[bool, 'care_logsArgsFromusersRecursive2']


class walk_missionsIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    care_log: Union[bool, 'care_logsArgsFromusersRecursive3']


class walk_missionsIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    care_log: Union[bool, 'care_logsArgsFromusersRecursive4']


class walk_missionsIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class walk_missionsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive1'


class walk_missionsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive2'


class walk_missionsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive3'


class walk_missionsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive4'


class walk_missionsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManywalk_missionsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive1'


class FindManywalk_missionsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive2'


class FindManywalk_missionsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive3'


class FindManywalk_missionsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive4'


class FindManywalk_missionsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    
    

class paymentIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    user: Union[bool, 'usersArgsFromusersRecursive1']


class paymentIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    user: Union[bool, 'usersArgsFromusersRecursive2']


class paymentIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    user: Union[bool, 'usersArgsFromusersRecursive3']


class paymentIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    user: Union[bool, 'usersArgsFromusersRecursive4']


class paymentIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class paymentArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'paymentIncludeFrompaymentRecursive1'


class paymentArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'paymentIncludeFrompaymentRecursive2'


class paymentArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'paymentIncludeFrompaymentRecursive3'


class paymentArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'paymentIncludeFrompaymentRecursive4'


class paymentArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManypaymentArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive1'


class FindManypaymentArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive2'


class FindManypaymentArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive3'


class FindManypaymentArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive4'


class FindManypaymentArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    
    

class webhook_eventsIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""


class webhook_eventsIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""


class webhook_eventsIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""


class webhook_eventsIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""


class webhook_eventsIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class webhook_eventsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive1'


class webhook_eventsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive2'


class webhook_eventsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive3'


class webhook_eventsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive4'


class webhook_eventsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManywebhook_eventsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive1'


class FindManywebhook_eventsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive2'


class FindManywebhook_eventsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive3'


class FindManywebhook_eventsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive4'


class FindManywebhook_eventsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    


FindManyusersArgs = FindManyusersArgsFromusers
FindFirstusersArgs = FindManyusersArgsFromusers


    

class usersWhereInput(TypedDict, total=False):
    """users arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    firebase_uid: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    current_plan: Union[None, _str, 'types.StringFilter']
    is_verified: Union[None, _bool, 'types.BooleanFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_settings: 'care_settingsListRelationFilter'
    message_logs: 'message_logsListRelationFilter'
    payment: 'paymentListRelationFilter'

    # should be noted that AND and NOT should be Union['usersWhereInputRecursive1', List['usersWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['usersWhereInputRecursive1']
    OR: List['usersWhereInputRecursive1']
    NOT: List['usersWhereInputRecursive1']


class usersWhereInputRecursive1(TypedDict, total=False):
    """users arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    firebase_uid: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    current_plan: Union[None, _str, 'types.StringFilter']
    is_verified: Union[None, _bool, 'types.BooleanFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_settings: 'care_settingsListRelationFilter'
    message_logs: 'message_logsListRelationFilter'
    payment: 'paymentListRelationFilter'

    # should be noted that AND and NOT should be Union['usersWhereInputRecursive2', List['usersWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['usersWhereInputRecursive2']
    OR: List['usersWhereInputRecursive2']
    NOT: List['usersWhereInputRecursive2']


class usersWhereInputRecursive2(TypedDict, total=False):
    """users arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    firebase_uid: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    current_plan: Union[None, _str, 'types.StringFilter']
    is_verified: Union[None, _bool, 'types.BooleanFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_settings: 'care_settingsListRelationFilter'
    message_logs: 'message_logsListRelationFilter'
    payment: 'paymentListRelationFilter'

    # should be noted that AND and NOT should be Union['usersWhereInputRecursive3', List['usersWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['usersWhereInputRecursive3']
    OR: List['usersWhereInputRecursive3']
    NOT: List['usersWhereInputRecursive3']


class usersWhereInputRecursive3(TypedDict, total=False):
    """users arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    firebase_uid: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    current_plan: Union[None, _str, 'types.StringFilter']
    is_verified: Union[None, _bool, 'types.BooleanFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_settings: 'care_settingsListRelationFilter'
    message_logs: 'message_logsListRelationFilter'
    payment: 'paymentListRelationFilter'

    # should be noted that AND and NOT should be Union['usersWhereInputRecursive4', List['usersWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['usersWhereInputRecursive4']
    OR: List['usersWhereInputRecursive4']
    NOT: List['usersWhereInputRecursive4']


class usersWhereInputRecursive4(TypedDict, total=False):
    """users arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    firebase_uid: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    current_plan: Union[None, _str, 'types.StringFilter']
    is_verified: Union[None, _bool, 'types.BooleanFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_settings: 'care_settingsListRelationFilter'
    message_logs: 'message_logsListRelationFilter'
    payment: 'paymentListRelationFilter'



# aggregate users types


    

class usersScalarWhereWithAggregatesInput(TypedDict, total=False):
    """users arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    firebase_uid: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    current_plan: Union[_str, 'types.StringWithAggregatesFilter']
    is_verified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['usersScalarWhereWithAggregatesInputRecursive1']
    OR: List['usersScalarWhereWithAggregatesInputRecursive1']
    NOT: List['usersScalarWhereWithAggregatesInputRecursive1']


class usersScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """users arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    firebase_uid: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    current_plan: Union[_str, 'types.StringWithAggregatesFilter']
    is_verified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['usersScalarWhereWithAggregatesInputRecursive2']
    OR: List['usersScalarWhereWithAggregatesInputRecursive2']
    NOT: List['usersScalarWhereWithAggregatesInputRecursive2']


class usersScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """users arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    firebase_uid: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    current_plan: Union[_str, 'types.StringWithAggregatesFilter']
    is_verified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['usersScalarWhereWithAggregatesInputRecursive3']
    OR: List['usersScalarWhereWithAggregatesInputRecursive3']
    NOT: List['usersScalarWhereWithAggregatesInputRecursive3']


class usersScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """users arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    firebase_uid: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    current_plan: Union[_str, 'types.StringWithAggregatesFilter']
    is_verified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['usersScalarWhereWithAggregatesInputRecursive4']
    OR: List['usersScalarWhereWithAggregatesInputRecursive4']
    NOT: List['usersScalarWhereWithAggregatesInputRecursive4']


class usersScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """users arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    firebase_uid: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    current_plan: Union[_str, 'types.StringWithAggregatesFilter']
    is_verified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class usersGroupByOutput(TypedDict, total=False):
    id: _str
    firebase_uid: _str
    email: _str
    current_plan: _str
    is_verified: _bool
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'usersSumAggregateOutput'
    _avg: 'usersAvgAggregateOutput'
    _min: 'usersMinAggregateOutput'
    _max: 'usersMaxAggregateOutput'
    _count: 'usersCountAggregateOutput'


class usersAvgAggregateOutput(TypedDict, total=False):
    """users output for aggregating averages"""


class usersSumAggregateOutput(TypedDict, total=False):
    """users output for aggregating sums"""


class usersScalarAggregateOutput(TypedDict, total=False):
    """users output including scalar fields"""
    id: _str
    firebase_uid: _str
    email: _str
    current_plan: _str
    is_verified: _bool
    created_at: datetime.datetime
    updated_at: datetime.datetime


usersMinAggregateOutput = usersScalarAggregateOutput
usersMaxAggregateOutput = usersScalarAggregateOutput


class usersMaxAggregateInput(TypedDict, total=False):
    """users input for aggregating by max"""
    id: bool
    firebase_uid: bool
    email: bool
    current_plan: bool
    is_verified: bool
    created_at: bool
    updated_at: bool


class usersMinAggregateInput(TypedDict, total=False):
    """users input for aggregating by min"""
    id: bool
    firebase_uid: bool
    email: bool
    current_plan: bool
    is_verified: bool
    created_at: bool
    updated_at: bool


class usersNumberAggregateInput(TypedDict, total=False):
    """users input for aggregating numbers"""


usersAvgAggregateInput = usersNumberAggregateInput
usersSumAggregateInput = usersNumberAggregateInput


usersCountAggregateInput = TypedDict(
    'usersCountAggregateInput',
    {
        'id': bool,
        'firebase_uid': bool,
        'email': bool,
        'current_plan': bool,
        'is_verified': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

usersCountAggregateOutput = TypedDict(
    'usersCountAggregateOutput',
    {
        'id': int,
        'firebase_uid': int,
        'email': int,
        'current_plan': int,
        'is_verified': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


usersKeys = Literal[
    'id',
    'firebase_uid',
    'email',
    'current_plan',
    'is_verified',
    'created_at',
    'updated_at',
    'care_settings',
    'message_logs',
    'payment',
]
usersScalarFieldKeys = Literal[
    'id',
    'firebase_uid',
    'email',
    'current_plan',
    'is_verified',
    'created_at',
    'updated_at',
]
usersScalarFieldKeysT = TypeVar('usersScalarFieldKeysT', bound=usersScalarFieldKeys)

usersRelationalFieldKeys = Literal[
        'care_settings',
        'message_logs',
        'payment',
    ]

# care_settings types

class care_settingsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the care_settings create method"""
    id: _int
    user_id: _str
    parent_name: Optional[_str]
    child_name: Optional[_str]
    dog_name: Optional[_str]
    care_start_date: Optional[datetime.datetime]
    care_end_date: Optional[datetime.datetime]
    morning_meal_time: Optional[datetime.datetime]
    night_meal_time: Optional[datetime.datetime]
    walk_time: Optional[datetime.datetime]
    care_password: Optional[_str]
    care_clear_status: Optional[_str]
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]
    user: 'usersCreateNestedWithoutRelationsInput'
    care_logs: 'care_logsCreateManyNestedWithoutRelationsInput'
    reflection_notes: 'reflection_notesCreateManyNestedWithoutRelationsInput'


class care_settingsCreateInput(care_settingsOptionalCreateInput):
    """Required arguments to the care_settings create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class care_settingsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the care_settings create method, without relations"""
    id: _int
    user_id: _str
    parent_name: Optional[_str]
    child_name: Optional[_str]
    dog_name: Optional[_str]
    care_start_date: Optional[datetime.datetime]
    care_end_date: Optional[datetime.datetime]
    morning_meal_time: Optional[datetime.datetime]
    night_meal_time: Optional[datetime.datetime]
    walk_time: Optional[datetime.datetime]
    care_password: Optional[_str]
    care_clear_status: Optional[_str]
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]


class care_settingsCreateWithoutRelationsInput(care_settingsOptionalCreateWithoutRelationsInput):
    """Required arguments to the care_settings create method, without relations"""

class care_settingsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'care_settingsCreateWithoutRelationsInput'
    where: 'care_settingsWhereUniqueInput'

class care_settingsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'care_settingsCreateWithoutRelationsInput'
    connect: 'care_settingsWhereUniqueInput'
    connect_or_create: 'care_settingsConnectOrCreateWithoutRelationsInput'


class care_settingsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['care_settingsCreateWithoutRelationsInput', List['care_settingsCreateWithoutRelationsInput']]
    connect: Union['care_settingsWhereUniqueInput', List['care_settingsWhereUniqueInput']]
    connect_or_create: Union['care_settingsConnectOrCreateWithoutRelationsInput', List['care_settingsConnectOrCreateWithoutRelationsInput']]

_care_settingsWhereUnique_id_Input = TypedDict(
    '_care_settingsWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

care_settingsWhereUniqueInput = _care_settingsWhereUnique_id_Input


class care_settingsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    parent_name: Optional[_str]
    child_name: Optional[_str]
    dog_name: Optional[_str]
    care_start_date: Optional[datetime.datetime]
    care_end_date: Optional[datetime.datetime]
    morning_meal_time: Optional[datetime.datetime]
    night_meal_time: Optional[datetime.datetime]
    walk_time: Optional[datetime.datetime]
    care_password: Optional[_str]
    care_clear_status: Optional[_str]
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]
    user: 'usersUpdateOneWithoutRelationsInput'
    care_logs: 'care_logsUpdateManyWithoutRelationsInput'
    reflection_notes: 'reflection_notesUpdateManyWithoutRelationsInput'


class care_settingsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    parent_name: Optional[_str]
    child_name: Optional[_str]
    dog_name: Optional[_str]
    care_start_date: Optional[datetime.datetime]
    care_end_date: Optional[datetime.datetime]
    morning_meal_time: Optional[datetime.datetime]
    night_meal_time: Optional[datetime.datetime]
    walk_time: Optional[datetime.datetime]
    care_password: Optional[_str]
    care_clear_status: Optional[_str]
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]


class care_settingsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['care_settingsCreateWithoutRelationsInput']
    connect: List['care_settingsWhereUniqueInput']
    connect_or_create: List['care_settingsConnectOrCreateWithoutRelationsInput']
    set: List['care_settingsWhereUniqueInput']
    disconnect: List['care_settingsWhereUniqueInput']
    delete: List['care_settingsWhereUniqueInput']

    # TODO
    # update: List['care_settingsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['care_settingsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['care_settingsScalarWhereInput']
    # upsert: List['care_settingsUpserteWithWhereUniqueWithoutRelationsInput']


class care_settingsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'care_settingsCreateWithoutRelationsInput'
    connect: 'care_settingsWhereUniqueInput'
    connect_or_create: 'care_settingsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'care_settingsUpdateInput'
    # upsert: 'care_settingsUpsertWithoutRelationsInput'


class care_settingsUpsertInput(TypedDict):
    create: 'care_settingsCreateInput'
    update: 'care_settingsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_care_settings_id_OrderByInput = TypedDict(
    '_care_settings_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_care_settings_user_id_OrderByInput = TypedDict(
    '_care_settings_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_care_settings_parent_name_OrderByInput = TypedDict(
    '_care_settings_parent_name_OrderByInput',
    {
        'parent_name': 'SortOrder',
    },
    total=True
)

_care_settings_child_name_OrderByInput = TypedDict(
    '_care_settings_child_name_OrderByInput',
    {
        'child_name': 'SortOrder',
    },
    total=True
)

_care_settings_dog_name_OrderByInput = TypedDict(
    '_care_settings_dog_name_OrderByInput',
    {
        'dog_name': 'SortOrder',
    },
    total=True
)

_care_settings_care_start_date_OrderByInput = TypedDict(
    '_care_settings_care_start_date_OrderByInput',
    {
        'care_start_date': 'SortOrder',
    },
    total=True
)

_care_settings_care_end_date_OrderByInput = TypedDict(
    '_care_settings_care_end_date_OrderByInput',
    {
        'care_end_date': 'SortOrder',
    },
    total=True
)

_care_settings_morning_meal_time_OrderByInput = TypedDict(
    '_care_settings_morning_meal_time_OrderByInput',
    {
        'morning_meal_time': 'SortOrder',
    },
    total=True
)

_care_settings_night_meal_time_OrderByInput = TypedDict(
    '_care_settings_night_meal_time_OrderByInput',
    {
        'night_meal_time': 'SortOrder',
    },
    total=True
)

_care_settings_walk_time_OrderByInput = TypedDict(
    '_care_settings_walk_time_OrderByInput',
    {
        'walk_time': 'SortOrder',
    },
    total=True
)

_care_settings_care_password_OrderByInput = TypedDict(
    '_care_settings_care_password_OrderByInput',
    {
        'care_password': 'SortOrder',
    },
    total=True
)

_care_settings_care_clear_status_OrderByInput = TypedDict(
    '_care_settings_care_clear_status_OrderByInput',
    {
        'care_clear_status': 'SortOrder',
    },
    total=True
)

_care_settings_created_at_OrderByInput = TypedDict(
    '_care_settings_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_care_settings_updated_at_OrderByInput = TypedDict(
    '_care_settings_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_care_settings_RelevanceInner = TypedDict(
    '_care_settings_RelevanceInner',
    {
        'fields': 'List[care_settingsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_care_settings_RelevanceOrderByInput = TypedDict(
    '_care_settings_RelevanceOrderByInput',
    {
        '_relevance': '_care_settings_RelevanceInner',
    },
    total=True
)

care_settingsOrderByInput = Union[
    '_care_settings_id_OrderByInput',
    '_care_settings_user_id_OrderByInput',
    '_care_settings_parent_name_OrderByInput',
    '_care_settings_child_name_OrderByInput',
    '_care_settings_dog_name_OrderByInput',
    '_care_settings_care_start_date_OrderByInput',
    '_care_settings_care_end_date_OrderByInput',
    '_care_settings_morning_meal_time_OrderByInput',
    '_care_settings_night_meal_time_OrderByInput',
    '_care_settings_walk_time_OrderByInput',
    '_care_settings_care_password_OrderByInput',
    '_care_settings_care_clear_status_OrderByInput',
    '_care_settings_created_at_OrderByInput',
    '_care_settings_updated_at_OrderByInput',
    '_care_settings_RelevanceOrderByInput',
]



# recursive care_settings types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

care_settingsRelationFilter = TypedDict(
    'care_settingsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class care_settingsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class care_settingsInclude(TypedDict, total=False):
    """care_settings relational arguments"""
    user: Union[bool, 'usersArgsFromcare_settings']
    care_logs: Union[bool, 'FindManycare_logsArgsFromcare_settings']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromcare_settings']


    

class usersIncludeFromcare_settings(TypedDict, total=False):
    """Relational arguments for care_settings"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromcare_settingsRecursive1']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromcare_settingsRecursive1']
    payment: Union[bool, 'FindManypaymentArgsFromcare_settingsRecursive1']


class usersIncludeFromcare_settingsRecursive1(TypedDict, total=False):
    """Relational arguments for care_settings"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromcare_settingsRecursive2']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromcare_settingsRecursive2']
    payment: Union[bool, 'FindManypaymentArgsFromcare_settingsRecursive2']


class usersIncludeFromcare_settingsRecursive2(TypedDict, total=False):
    """Relational arguments for care_settings"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromcare_settingsRecursive3']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromcare_settingsRecursive3']
    payment: Union[bool, 'FindManypaymentArgsFromcare_settingsRecursive3']


class usersIncludeFromcare_settingsRecursive3(TypedDict, total=False):
    """Relational arguments for care_settings"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromcare_settingsRecursive4']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromcare_settingsRecursive4']
    payment: Union[bool, 'FindManypaymentArgsFromcare_settingsRecursive4']


class usersIncludeFromcare_settingsRecursive4(TypedDict, total=False):
    """Relational arguments for care_settings"""

    

class usersArgsFromcare_settings(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromcare_settingsRecursive1(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromcare_settingsRecursive2(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromcare_settingsRecursive3(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromcare_settingsRecursive4(TypedDict, total=False):
    """Arguments for care_settings"""
    
    

class FindManyusersArgsFromcare_settings(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromcare_settingsRecursive1(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromcare_settingsRecursive2(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromcare_settingsRecursive3(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromcare_settingsRecursive4(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    
    

class care_settingsIncludeFromcare_settings(TypedDict, total=False):
    """Relational arguments for care_settings"""
    user: Union[bool, 'usersArgsFromcare_settingsRecursive1']
    care_logs: Union[bool, 'FindManycare_logsArgsFromcare_settingsRecursive1']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromcare_settingsRecursive1']


class care_settingsIncludeFromcare_settingsRecursive1(TypedDict, total=False):
    """Relational arguments for care_settings"""
    user: Union[bool, 'usersArgsFromcare_settingsRecursive2']
    care_logs: Union[bool, 'FindManycare_logsArgsFromcare_settingsRecursive2']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromcare_settingsRecursive2']


class care_settingsIncludeFromcare_settingsRecursive2(TypedDict, total=False):
    """Relational arguments for care_settings"""
    user: Union[bool, 'usersArgsFromcare_settingsRecursive3']
    care_logs: Union[bool, 'FindManycare_logsArgsFromcare_settingsRecursive3']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromcare_settingsRecursive3']


class care_settingsIncludeFromcare_settingsRecursive3(TypedDict, total=False):
    """Relational arguments for care_settings"""
    user: Union[bool, 'usersArgsFromcare_settingsRecursive4']
    care_logs: Union[bool, 'FindManycare_logsArgsFromcare_settingsRecursive4']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromcare_settingsRecursive4']


class care_settingsIncludeFromcare_settingsRecursive4(TypedDict, total=False):
    """Relational arguments for care_settings"""

    

class care_settingsArgsFromcare_settings(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'care_settingsIncludeFromcare_settingsRecursive1'


class care_settingsArgsFromcare_settingsRecursive1(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'care_settingsIncludeFromcare_settingsRecursive2'


class care_settingsArgsFromcare_settingsRecursive2(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'care_settingsIncludeFromcare_settingsRecursive3'


class care_settingsArgsFromcare_settingsRecursive3(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'care_settingsIncludeFromcare_settingsRecursive4'


class care_settingsArgsFromcare_settingsRecursive4(TypedDict, total=False):
    """Arguments for care_settings"""
    
    

class FindManycare_settingsArgsFromcare_settings(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive1'


class FindManycare_settingsArgsFromcare_settingsRecursive1(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive2'


class FindManycare_settingsArgsFromcare_settingsRecursive2(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive3'


class FindManycare_settingsArgsFromcare_settingsRecursive3(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive4'


class FindManycare_settingsArgsFromcare_settingsRecursive4(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    
    

class care_logsIncludeFromcare_settings(TypedDict, total=False):
    """Relational arguments for care_settings"""
    care_setting: Union[bool, 'care_settingsArgsFromcare_settingsRecursive1']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromcare_settingsRecursive1']


class care_logsIncludeFromcare_settingsRecursive1(TypedDict, total=False):
    """Relational arguments for care_settings"""
    care_setting: Union[bool, 'care_settingsArgsFromcare_settingsRecursive2']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromcare_settingsRecursive2']


class care_logsIncludeFromcare_settingsRecursive2(TypedDict, total=False):
    """Relational arguments for care_settings"""
    care_setting: Union[bool, 'care_settingsArgsFromcare_settingsRecursive3']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromcare_settingsRecursive3']


class care_logsIncludeFromcare_settingsRecursive3(TypedDict, total=False):
    """Relational arguments for care_settings"""
    care_setting: Union[bool, 'care_settingsArgsFromcare_settingsRecursive4']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromcare_settingsRecursive4']


class care_logsIncludeFromcare_settingsRecursive4(TypedDict, total=False):
    """Relational arguments for care_settings"""

    

class care_logsArgsFromcare_settings(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'care_logsIncludeFromcare_logsRecursive1'


class care_logsArgsFromcare_settingsRecursive1(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'care_logsIncludeFromcare_logsRecursive2'


class care_logsArgsFromcare_settingsRecursive2(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'care_logsIncludeFromcare_logsRecursive3'


class care_logsArgsFromcare_settingsRecursive3(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'care_logsIncludeFromcare_logsRecursive4'


class care_logsArgsFromcare_settingsRecursive4(TypedDict, total=False):
    """Arguments for care_settings"""
    
    

class FindManycare_logsArgsFromcare_settings(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive1'


class FindManycare_logsArgsFromcare_settingsRecursive1(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive2'


class FindManycare_logsArgsFromcare_settingsRecursive2(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive3'


class FindManycare_logsArgsFromcare_settingsRecursive3(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive4'


class FindManycare_logsArgsFromcare_settingsRecursive4(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    
    

class reflection_notesIncludeFromcare_settings(TypedDict, total=False):
    """Relational arguments for care_settings"""
    care_setting: Union[bool, 'care_settingsArgsFromcare_settingsRecursive1']


class reflection_notesIncludeFromcare_settingsRecursive1(TypedDict, total=False):
    """Relational arguments for care_settings"""
    care_setting: Union[bool, 'care_settingsArgsFromcare_settingsRecursive2']


class reflection_notesIncludeFromcare_settingsRecursive2(TypedDict, total=False):
    """Relational arguments for care_settings"""
    care_setting: Union[bool, 'care_settingsArgsFromcare_settingsRecursive3']


class reflection_notesIncludeFromcare_settingsRecursive3(TypedDict, total=False):
    """Relational arguments for care_settings"""
    care_setting: Union[bool, 'care_settingsArgsFromcare_settingsRecursive4']


class reflection_notesIncludeFromcare_settingsRecursive4(TypedDict, total=False):
    """Relational arguments for care_settings"""

    

class reflection_notesArgsFromcare_settings(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive1'


class reflection_notesArgsFromcare_settingsRecursive1(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive2'


class reflection_notesArgsFromcare_settingsRecursive2(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive3'


class reflection_notesArgsFromcare_settingsRecursive3(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive4'


class reflection_notesArgsFromcare_settingsRecursive4(TypedDict, total=False):
    """Arguments for care_settings"""
    
    

class FindManyreflection_notesArgsFromcare_settings(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive1'


class FindManyreflection_notesArgsFromcare_settingsRecursive1(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive2'


class FindManyreflection_notesArgsFromcare_settingsRecursive2(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive3'


class FindManyreflection_notesArgsFromcare_settingsRecursive3(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive4'


class FindManyreflection_notesArgsFromcare_settingsRecursive4(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    
    

class message_logsIncludeFromcare_settings(TypedDict, total=False):
    """Relational arguments for care_settings"""
    user: Union[bool, 'usersArgsFromcare_settingsRecursive1']


class message_logsIncludeFromcare_settingsRecursive1(TypedDict, total=False):
    """Relational arguments for care_settings"""
    user: Union[bool, 'usersArgsFromcare_settingsRecursive2']


class message_logsIncludeFromcare_settingsRecursive2(TypedDict, total=False):
    """Relational arguments for care_settings"""
    user: Union[bool, 'usersArgsFromcare_settingsRecursive3']


class message_logsIncludeFromcare_settingsRecursive3(TypedDict, total=False):
    """Relational arguments for care_settings"""
    user: Union[bool, 'usersArgsFromcare_settingsRecursive4']


class message_logsIncludeFromcare_settingsRecursive4(TypedDict, total=False):
    """Relational arguments for care_settings"""

    

class message_logsArgsFromcare_settings(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'message_logsIncludeFrommessage_logsRecursive1'


class message_logsArgsFromcare_settingsRecursive1(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'message_logsIncludeFrommessage_logsRecursive2'


class message_logsArgsFromcare_settingsRecursive2(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'message_logsIncludeFrommessage_logsRecursive3'


class message_logsArgsFromcare_settingsRecursive3(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'message_logsIncludeFrommessage_logsRecursive4'


class message_logsArgsFromcare_settingsRecursive4(TypedDict, total=False):
    """Arguments for care_settings"""
    
    

class FindManymessage_logsArgsFromcare_settings(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive1'


class FindManymessage_logsArgsFromcare_settingsRecursive1(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive2'


class FindManymessage_logsArgsFromcare_settingsRecursive2(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive3'


class FindManymessage_logsArgsFromcare_settingsRecursive3(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive4'


class FindManymessage_logsArgsFromcare_settingsRecursive4(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    
    

class walk_missionsIncludeFromcare_settings(TypedDict, total=False):
    """Relational arguments for care_settings"""
    care_log: Union[bool, 'care_logsArgsFromcare_settingsRecursive1']


class walk_missionsIncludeFromcare_settingsRecursive1(TypedDict, total=False):
    """Relational arguments for care_settings"""
    care_log: Union[bool, 'care_logsArgsFromcare_settingsRecursive2']


class walk_missionsIncludeFromcare_settingsRecursive2(TypedDict, total=False):
    """Relational arguments for care_settings"""
    care_log: Union[bool, 'care_logsArgsFromcare_settingsRecursive3']


class walk_missionsIncludeFromcare_settingsRecursive3(TypedDict, total=False):
    """Relational arguments for care_settings"""
    care_log: Union[bool, 'care_logsArgsFromcare_settingsRecursive4']


class walk_missionsIncludeFromcare_settingsRecursive4(TypedDict, total=False):
    """Relational arguments for care_settings"""

    

class walk_missionsArgsFromcare_settings(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive1'


class walk_missionsArgsFromcare_settingsRecursive1(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive2'


class walk_missionsArgsFromcare_settingsRecursive2(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive3'


class walk_missionsArgsFromcare_settingsRecursive3(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive4'


class walk_missionsArgsFromcare_settingsRecursive4(TypedDict, total=False):
    """Arguments for care_settings"""
    
    

class FindManywalk_missionsArgsFromcare_settings(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive1'


class FindManywalk_missionsArgsFromcare_settingsRecursive1(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive2'


class FindManywalk_missionsArgsFromcare_settingsRecursive2(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive3'


class FindManywalk_missionsArgsFromcare_settingsRecursive3(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive4'


class FindManywalk_missionsArgsFromcare_settingsRecursive4(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    
    

class paymentIncludeFromcare_settings(TypedDict, total=False):
    """Relational arguments for care_settings"""
    user: Union[bool, 'usersArgsFromcare_settingsRecursive1']


class paymentIncludeFromcare_settingsRecursive1(TypedDict, total=False):
    """Relational arguments for care_settings"""
    user: Union[bool, 'usersArgsFromcare_settingsRecursive2']


class paymentIncludeFromcare_settingsRecursive2(TypedDict, total=False):
    """Relational arguments for care_settings"""
    user: Union[bool, 'usersArgsFromcare_settingsRecursive3']


class paymentIncludeFromcare_settingsRecursive3(TypedDict, total=False):
    """Relational arguments for care_settings"""
    user: Union[bool, 'usersArgsFromcare_settingsRecursive4']


class paymentIncludeFromcare_settingsRecursive4(TypedDict, total=False):
    """Relational arguments for care_settings"""

    

class paymentArgsFromcare_settings(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'paymentIncludeFrompaymentRecursive1'


class paymentArgsFromcare_settingsRecursive1(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'paymentIncludeFrompaymentRecursive2'


class paymentArgsFromcare_settingsRecursive2(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'paymentIncludeFrompaymentRecursive3'


class paymentArgsFromcare_settingsRecursive3(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'paymentIncludeFrompaymentRecursive4'


class paymentArgsFromcare_settingsRecursive4(TypedDict, total=False):
    """Arguments for care_settings"""
    
    

class FindManypaymentArgsFromcare_settings(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive1'


class FindManypaymentArgsFromcare_settingsRecursive1(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive2'


class FindManypaymentArgsFromcare_settingsRecursive2(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive3'


class FindManypaymentArgsFromcare_settingsRecursive3(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive4'


class FindManypaymentArgsFromcare_settingsRecursive4(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    
    

class webhook_eventsIncludeFromcare_settings(TypedDict, total=False):
    """Relational arguments for care_settings"""


class webhook_eventsIncludeFromcare_settingsRecursive1(TypedDict, total=False):
    """Relational arguments for care_settings"""


class webhook_eventsIncludeFromcare_settingsRecursive2(TypedDict, total=False):
    """Relational arguments for care_settings"""


class webhook_eventsIncludeFromcare_settingsRecursive3(TypedDict, total=False):
    """Relational arguments for care_settings"""


class webhook_eventsIncludeFromcare_settingsRecursive4(TypedDict, total=False):
    """Relational arguments for care_settings"""

    

class webhook_eventsArgsFromcare_settings(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive1'


class webhook_eventsArgsFromcare_settingsRecursive1(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive2'


class webhook_eventsArgsFromcare_settingsRecursive2(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive3'


class webhook_eventsArgsFromcare_settingsRecursive3(TypedDict, total=False):
    """Arguments for care_settings"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive4'


class webhook_eventsArgsFromcare_settingsRecursive4(TypedDict, total=False):
    """Arguments for care_settings"""
    
    

class FindManywebhook_eventsArgsFromcare_settings(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive1'


class FindManywebhook_eventsArgsFromcare_settingsRecursive1(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive2'


class FindManywebhook_eventsArgsFromcare_settingsRecursive2(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive3'


class FindManywebhook_eventsArgsFromcare_settingsRecursive3(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive4'


class FindManywebhook_eventsArgsFromcare_settingsRecursive4(TypedDict, total=False):
    """Arguments for care_settings"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    


FindManycare_settingsArgs = FindManycare_settingsArgsFromcare_settings
FindFirstcare_settingsArgs = FindManycare_settingsArgsFromcare_settings


    

class care_settingsWhereInput(TypedDict, total=False):
    """care_settings arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user_id: Union[_str, 'types.StringFilter']
    parent_name: Union[None, _str, 'types.StringFilter']
    child_name: Union[None, _str, 'types.StringFilter']
    dog_name: Union[None, _str, 'types.StringFilter']
    care_start_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_end_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    morning_meal_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    night_meal_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    walk_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_password: Union[None, _str, 'types.StringFilter']
    care_clear_status: Union[None, _str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    user: 'usersRelationFilter'
    care_logs: 'care_logsListRelationFilter'
    reflection_notes: 'reflection_notesListRelationFilter'

    # should be noted that AND and NOT should be Union['care_settingsWhereInputRecursive1', List['care_settingsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['care_settingsWhereInputRecursive1']
    OR: List['care_settingsWhereInputRecursive1']
    NOT: List['care_settingsWhereInputRecursive1']


class care_settingsWhereInputRecursive1(TypedDict, total=False):
    """care_settings arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user_id: Union[_str, 'types.StringFilter']
    parent_name: Union[None, _str, 'types.StringFilter']
    child_name: Union[None, _str, 'types.StringFilter']
    dog_name: Union[None, _str, 'types.StringFilter']
    care_start_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_end_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    morning_meal_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    night_meal_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    walk_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_password: Union[None, _str, 'types.StringFilter']
    care_clear_status: Union[None, _str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    user: 'usersRelationFilter'
    care_logs: 'care_logsListRelationFilter'
    reflection_notes: 'reflection_notesListRelationFilter'

    # should be noted that AND and NOT should be Union['care_settingsWhereInputRecursive2', List['care_settingsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['care_settingsWhereInputRecursive2']
    OR: List['care_settingsWhereInputRecursive2']
    NOT: List['care_settingsWhereInputRecursive2']


class care_settingsWhereInputRecursive2(TypedDict, total=False):
    """care_settings arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user_id: Union[_str, 'types.StringFilter']
    parent_name: Union[None, _str, 'types.StringFilter']
    child_name: Union[None, _str, 'types.StringFilter']
    dog_name: Union[None, _str, 'types.StringFilter']
    care_start_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_end_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    morning_meal_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    night_meal_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    walk_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_password: Union[None, _str, 'types.StringFilter']
    care_clear_status: Union[None, _str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    user: 'usersRelationFilter'
    care_logs: 'care_logsListRelationFilter'
    reflection_notes: 'reflection_notesListRelationFilter'

    # should be noted that AND and NOT should be Union['care_settingsWhereInputRecursive3', List['care_settingsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['care_settingsWhereInputRecursive3']
    OR: List['care_settingsWhereInputRecursive3']
    NOT: List['care_settingsWhereInputRecursive3']


class care_settingsWhereInputRecursive3(TypedDict, total=False):
    """care_settings arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user_id: Union[_str, 'types.StringFilter']
    parent_name: Union[None, _str, 'types.StringFilter']
    child_name: Union[None, _str, 'types.StringFilter']
    dog_name: Union[None, _str, 'types.StringFilter']
    care_start_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_end_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    morning_meal_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    night_meal_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    walk_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_password: Union[None, _str, 'types.StringFilter']
    care_clear_status: Union[None, _str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    user: 'usersRelationFilter'
    care_logs: 'care_logsListRelationFilter'
    reflection_notes: 'reflection_notesListRelationFilter'

    # should be noted that AND and NOT should be Union['care_settingsWhereInputRecursive4', List['care_settingsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['care_settingsWhereInputRecursive4']
    OR: List['care_settingsWhereInputRecursive4']
    NOT: List['care_settingsWhereInputRecursive4']


class care_settingsWhereInputRecursive4(TypedDict, total=False):
    """care_settings arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user_id: Union[_str, 'types.StringFilter']
    parent_name: Union[None, _str, 'types.StringFilter']
    child_name: Union[None, _str, 'types.StringFilter']
    dog_name: Union[None, _str, 'types.StringFilter']
    care_start_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_end_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    morning_meal_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    night_meal_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    walk_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_password: Union[None, _str, 'types.StringFilter']
    care_clear_status: Union[None, _str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    user: 'usersRelationFilter'
    care_logs: 'care_logsListRelationFilter'
    reflection_notes: 'reflection_notesListRelationFilter'



# aggregate care_settings types


    

class care_settingsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """care_settings arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    parent_name: Union[_str, 'types.StringWithAggregatesFilter']
    child_name: Union[_str, 'types.StringWithAggregatesFilter']
    dog_name: Union[_str, 'types.StringWithAggregatesFilter']
    care_start_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    care_end_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    morning_meal_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    night_meal_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    walk_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    care_password: Union[_str, 'types.StringWithAggregatesFilter']
    care_clear_status: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['care_settingsScalarWhereWithAggregatesInputRecursive1']
    OR: List['care_settingsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['care_settingsScalarWhereWithAggregatesInputRecursive1']


class care_settingsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """care_settings arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    parent_name: Union[_str, 'types.StringWithAggregatesFilter']
    child_name: Union[_str, 'types.StringWithAggregatesFilter']
    dog_name: Union[_str, 'types.StringWithAggregatesFilter']
    care_start_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    care_end_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    morning_meal_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    night_meal_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    walk_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    care_password: Union[_str, 'types.StringWithAggregatesFilter']
    care_clear_status: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['care_settingsScalarWhereWithAggregatesInputRecursive2']
    OR: List['care_settingsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['care_settingsScalarWhereWithAggregatesInputRecursive2']


class care_settingsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """care_settings arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    parent_name: Union[_str, 'types.StringWithAggregatesFilter']
    child_name: Union[_str, 'types.StringWithAggregatesFilter']
    dog_name: Union[_str, 'types.StringWithAggregatesFilter']
    care_start_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    care_end_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    morning_meal_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    night_meal_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    walk_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    care_password: Union[_str, 'types.StringWithAggregatesFilter']
    care_clear_status: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['care_settingsScalarWhereWithAggregatesInputRecursive3']
    OR: List['care_settingsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['care_settingsScalarWhereWithAggregatesInputRecursive3']


class care_settingsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """care_settings arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    parent_name: Union[_str, 'types.StringWithAggregatesFilter']
    child_name: Union[_str, 'types.StringWithAggregatesFilter']
    dog_name: Union[_str, 'types.StringWithAggregatesFilter']
    care_start_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    care_end_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    morning_meal_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    night_meal_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    walk_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    care_password: Union[_str, 'types.StringWithAggregatesFilter']
    care_clear_status: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['care_settingsScalarWhereWithAggregatesInputRecursive4']
    OR: List['care_settingsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['care_settingsScalarWhereWithAggregatesInputRecursive4']


class care_settingsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """care_settings arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    parent_name: Union[_str, 'types.StringWithAggregatesFilter']
    child_name: Union[_str, 'types.StringWithAggregatesFilter']
    dog_name: Union[_str, 'types.StringWithAggregatesFilter']
    care_start_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    care_end_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    morning_meal_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    night_meal_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    walk_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    care_password: Union[_str, 'types.StringWithAggregatesFilter']
    care_clear_status: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class care_settingsGroupByOutput(TypedDict, total=False):
    id: _int
    user_id: _str
    parent_name: _str
    child_name: _str
    dog_name: _str
    care_start_date: datetime.datetime
    care_end_date: datetime.datetime
    morning_meal_time: datetime.datetime
    night_meal_time: datetime.datetime
    walk_time: datetime.datetime
    care_password: _str
    care_clear_status: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'care_settingsSumAggregateOutput'
    _avg: 'care_settingsAvgAggregateOutput'
    _min: 'care_settingsMinAggregateOutput'
    _max: 'care_settingsMaxAggregateOutput'
    _count: 'care_settingsCountAggregateOutput'


class care_settingsAvgAggregateOutput(TypedDict, total=False):
    """care_settings output for aggregating averages"""
    id: float


class care_settingsSumAggregateOutput(TypedDict, total=False):
    """care_settings output for aggregating sums"""
    id: _int


class care_settingsScalarAggregateOutput(TypedDict, total=False):
    """care_settings output including scalar fields"""
    id: _int
    user_id: _str
    parent_name: _str
    child_name: _str
    dog_name: _str
    care_start_date: datetime.datetime
    care_end_date: datetime.datetime
    morning_meal_time: datetime.datetime
    night_meal_time: datetime.datetime
    walk_time: datetime.datetime
    care_password: _str
    care_clear_status: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


care_settingsMinAggregateOutput = care_settingsScalarAggregateOutput
care_settingsMaxAggregateOutput = care_settingsScalarAggregateOutput


class care_settingsMaxAggregateInput(TypedDict, total=False):
    """care_settings input for aggregating by max"""
    id: bool
    user_id: bool
    parent_name: bool
    child_name: bool
    dog_name: bool
    care_start_date: bool
    care_end_date: bool
    morning_meal_time: bool
    night_meal_time: bool
    walk_time: bool
    care_password: bool
    care_clear_status: bool
    created_at: bool
    updated_at: bool


class care_settingsMinAggregateInput(TypedDict, total=False):
    """care_settings input for aggregating by min"""
    id: bool
    user_id: bool
    parent_name: bool
    child_name: bool
    dog_name: bool
    care_start_date: bool
    care_end_date: bool
    morning_meal_time: bool
    night_meal_time: bool
    walk_time: bool
    care_password: bool
    care_clear_status: bool
    created_at: bool
    updated_at: bool


class care_settingsNumberAggregateInput(TypedDict, total=False):
    """care_settings input for aggregating numbers"""
    id: bool


care_settingsAvgAggregateInput = care_settingsNumberAggregateInput
care_settingsSumAggregateInput = care_settingsNumberAggregateInput


care_settingsCountAggregateInput = TypedDict(
    'care_settingsCountAggregateInput',
    {
        'id': bool,
        'user_id': bool,
        'parent_name': bool,
        'child_name': bool,
        'dog_name': bool,
        'care_start_date': bool,
        'care_end_date': bool,
        'morning_meal_time': bool,
        'night_meal_time': bool,
        'walk_time': bool,
        'care_password': bool,
        'care_clear_status': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

care_settingsCountAggregateOutput = TypedDict(
    'care_settingsCountAggregateOutput',
    {
        'id': int,
        'user_id': int,
        'parent_name': int,
        'child_name': int,
        'dog_name': int,
        'care_start_date': int,
        'care_end_date': int,
        'morning_meal_time': int,
        'night_meal_time': int,
        'walk_time': int,
        'care_password': int,
        'care_clear_status': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


care_settingsKeys = Literal[
    'id',
    'user_id',
    'parent_name',
    'child_name',
    'dog_name',
    'care_start_date',
    'care_end_date',
    'morning_meal_time',
    'night_meal_time',
    'walk_time',
    'care_password',
    'care_clear_status',
    'created_at',
    'updated_at',
    'user',
    'care_logs',
    'reflection_notes',
]
care_settingsScalarFieldKeys = Literal[
    'id',
    'user_id',
    'parent_name',
    'child_name',
    'dog_name',
    'care_start_date',
    'care_end_date',
    'morning_meal_time',
    'night_meal_time',
    'walk_time',
    'care_password',
    'care_clear_status',
    'created_at',
    'updated_at',
]
care_settingsScalarFieldKeysT = TypeVar('care_settingsScalarFieldKeysT', bound=care_settingsScalarFieldKeys)

care_settingsRelationalFieldKeys = Literal[
        'user',
        'care_logs',
        'reflection_notes',
    ]

# care_logs types

class care_logsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the care_logs create method"""
    id: _int
    care_setting_id: _int
    date: Optional[datetime.datetime]
    fed_morning: Optional[_bool]
    fed_night: Optional[_bool]
    created_at: Optional[datetime.datetime]
    care_setting: 'care_settingsCreateNestedWithoutRelationsInput'
    walk_missions: 'walk_missionsCreateManyNestedWithoutRelationsInput'


class care_logsCreateInput(care_logsOptionalCreateInput):
    """Required arguments to the care_logs create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class care_logsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the care_logs create method, without relations"""
    id: _int
    care_setting_id: _int
    date: Optional[datetime.datetime]
    fed_morning: Optional[_bool]
    fed_night: Optional[_bool]
    created_at: Optional[datetime.datetime]


class care_logsCreateWithoutRelationsInput(care_logsOptionalCreateWithoutRelationsInput):
    """Required arguments to the care_logs create method, without relations"""

class care_logsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'care_logsCreateWithoutRelationsInput'
    where: 'care_logsWhereUniqueInput'

class care_logsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'care_logsCreateWithoutRelationsInput'
    connect: 'care_logsWhereUniqueInput'
    connect_or_create: 'care_logsConnectOrCreateWithoutRelationsInput'


class care_logsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['care_logsCreateWithoutRelationsInput', List['care_logsCreateWithoutRelationsInput']]
    connect: Union['care_logsWhereUniqueInput', List['care_logsWhereUniqueInput']]
    connect_or_create: Union['care_logsConnectOrCreateWithoutRelationsInput', List['care_logsConnectOrCreateWithoutRelationsInput']]

_care_logsWhereUnique_id_Input = TypedDict(
    '_care_logsWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

care_logsWhereUniqueInput = _care_logsWhereUnique_id_Input


class care_logsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    date: Optional[datetime.datetime]
    fed_morning: Optional[_bool]
    fed_night: Optional[_bool]
    created_at: Optional[datetime.datetime]
    care_setting: 'care_settingsUpdateOneWithoutRelationsInput'
    walk_missions: 'walk_missionsUpdateManyWithoutRelationsInput'


class care_logsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    date: Optional[datetime.datetime]
    fed_morning: Optional[_bool]
    fed_night: Optional[_bool]
    created_at: Optional[datetime.datetime]


class care_logsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['care_logsCreateWithoutRelationsInput']
    connect: List['care_logsWhereUniqueInput']
    connect_or_create: List['care_logsConnectOrCreateWithoutRelationsInput']
    set: List['care_logsWhereUniqueInput']
    disconnect: List['care_logsWhereUniqueInput']
    delete: List['care_logsWhereUniqueInput']

    # TODO
    # update: List['care_logsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['care_logsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['care_logsScalarWhereInput']
    # upsert: List['care_logsUpserteWithWhereUniqueWithoutRelationsInput']


class care_logsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'care_logsCreateWithoutRelationsInput'
    connect: 'care_logsWhereUniqueInput'
    connect_or_create: 'care_logsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'care_logsUpdateInput'
    # upsert: 'care_logsUpsertWithoutRelationsInput'


class care_logsUpsertInput(TypedDict):
    create: 'care_logsCreateInput'
    update: 'care_logsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_care_logs_id_OrderByInput = TypedDict(
    '_care_logs_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_care_logs_care_setting_id_OrderByInput = TypedDict(
    '_care_logs_care_setting_id_OrderByInput',
    {
        'care_setting_id': 'SortOrder',
    },
    total=True
)

_care_logs_date_OrderByInput = TypedDict(
    '_care_logs_date_OrderByInput',
    {
        'date': 'SortOrder',
    },
    total=True
)

_care_logs_fed_morning_OrderByInput = TypedDict(
    '_care_logs_fed_morning_OrderByInput',
    {
        'fed_morning': 'SortOrder',
    },
    total=True
)

_care_logs_fed_night_OrderByInput = TypedDict(
    '_care_logs_fed_night_OrderByInput',
    {
        'fed_night': 'SortOrder',
    },
    total=True
)

_care_logs_created_at_OrderByInput = TypedDict(
    '_care_logs_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_care_logs_RelevanceInner = TypedDict(
    '_care_logs_RelevanceInner',
    {
        'fields': 'List[care_logsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_care_logs_RelevanceOrderByInput = TypedDict(
    '_care_logs_RelevanceOrderByInput',
    {
        '_relevance': '_care_logs_RelevanceInner',
    },
    total=True
)

care_logsOrderByInput = Union[
    '_care_logs_id_OrderByInput',
    '_care_logs_care_setting_id_OrderByInput',
    '_care_logs_date_OrderByInput',
    '_care_logs_fed_morning_OrderByInput',
    '_care_logs_fed_night_OrderByInput',
    '_care_logs_created_at_OrderByInput',
    '_care_logs_RelevanceOrderByInput',
]



# recursive care_logs types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

care_logsRelationFilter = TypedDict(
    'care_logsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class care_logsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class care_logsInclude(TypedDict, total=False):
    """care_logs relational arguments"""
    care_setting: Union[bool, 'care_settingsArgsFromcare_logs']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromcare_logs']


    

class usersIncludeFromcare_logs(TypedDict, total=False):
    """Relational arguments for care_logs"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromcare_logsRecursive1']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromcare_logsRecursive1']
    payment: Union[bool, 'FindManypaymentArgsFromcare_logsRecursive1']


class usersIncludeFromcare_logsRecursive1(TypedDict, total=False):
    """Relational arguments for care_logs"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromcare_logsRecursive2']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromcare_logsRecursive2']
    payment: Union[bool, 'FindManypaymentArgsFromcare_logsRecursive2']


class usersIncludeFromcare_logsRecursive2(TypedDict, total=False):
    """Relational arguments for care_logs"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromcare_logsRecursive3']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromcare_logsRecursive3']
    payment: Union[bool, 'FindManypaymentArgsFromcare_logsRecursive3']


class usersIncludeFromcare_logsRecursive3(TypedDict, total=False):
    """Relational arguments for care_logs"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromcare_logsRecursive4']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromcare_logsRecursive4']
    payment: Union[bool, 'FindManypaymentArgsFromcare_logsRecursive4']


class usersIncludeFromcare_logsRecursive4(TypedDict, total=False):
    """Relational arguments for care_logs"""

    

class usersArgsFromcare_logs(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromcare_logsRecursive1(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromcare_logsRecursive2(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromcare_logsRecursive3(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromcare_logsRecursive4(TypedDict, total=False):
    """Arguments for care_logs"""
    
    

class FindManyusersArgsFromcare_logs(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromcare_logsRecursive1(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromcare_logsRecursive2(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromcare_logsRecursive3(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromcare_logsRecursive4(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    
    

class care_settingsIncludeFromcare_logs(TypedDict, total=False):
    """Relational arguments for care_logs"""
    user: Union[bool, 'usersArgsFromcare_logsRecursive1']
    care_logs: Union[bool, 'FindManycare_logsArgsFromcare_logsRecursive1']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromcare_logsRecursive1']


class care_settingsIncludeFromcare_logsRecursive1(TypedDict, total=False):
    """Relational arguments for care_logs"""
    user: Union[bool, 'usersArgsFromcare_logsRecursive2']
    care_logs: Union[bool, 'FindManycare_logsArgsFromcare_logsRecursive2']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromcare_logsRecursive2']


class care_settingsIncludeFromcare_logsRecursive2(TypedDict, total=False):
    """Relational arguments for care_logs"""
    user: Union[bool, 'usersArgsFromcare_logsRecursive3']
    care_logs: Union[bool, 'FindManycare_logsArgsFromcare_logsRecursive3']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromcare_logsRecursive3']


class care_settingsIncludeFromcare_logsRecursive3(TypedDict, total=False):
    """Relational arguments for care_logs"""
    user: Union[bool, 'usersArgsFromcare_logsRecursive4']
    care_logs: Union[bool, 'FindManycare_logsArgsFromcare_logsRecursive4']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromcare_logsRecursive4']


class care_settingsIncludeFromcare_logsRecursive4(TypedDict, total=False):
    """Relational arguments for care_logs"""

    

class care_settingsArgsFromcare_logs(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'care_settingsIncludeFromcare_settingsRecursive1'


class care_settingsArgsFromcare_logsRecursive1(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'care_settingsIncludeFromcare_settingsRecursive2'


class care_settingsArgsFromcare_logsRecursive2(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'care_settingsIncludeFromcare_settingsRecursive3'


class care_settingsArgsFromcare_logsRecursive3(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'care_settingsIncludeFromcare_settingsRecursive4'


class care_settingsArgsFromcare_logsRecursive4(TypedDict, total=False):
    """Arguments for care_logs"""
    
    

class FindManycare_settingsArgsFromcare_logs(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive1'


class FindManycare_settingsArgsFromcare_logsRecursive1(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive2'


class FindManycare_settingsArgsFromcare_logsRecursive2(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive3'


class FindManycare_settingsArgsFromcare_logsRecursive3(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive4'


class FindManycare_settingsArgsFromcare_logsRecursive4(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    
    

class care_logsIncludeFromcare_logs(TypedDict, total=False):
    """Relational arguments for care_logs"""
    care_setting: Union[bool, 'care_settingsArgsFromcare_logsRecursive1']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromcare_logsRecursive1']


class care_logsIncludeFromcare_logsRecursive1(TypedDict, total=False):
    """Relational arguments for care_logs"""
    care_setting: Union[bool, 'care_settingsArgsFromcare_logsRecursive2']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromcare_logsRecursive2']


class care_logsIncludeFromcare_logsRecursive2(TypedDict, total=False):
    """Relational arguments for care_logs"""
    care_setting: Union[bool, 'care_settingsArgsFromcare_logsRecursive3']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromcare_logsRecursive3']


class care_logsIncludeFromcare_logsRecursive3(TypedDict, total=False):
    """Relational arguments for care_logs"""
    care_setting: Union[bool, 'care_settingsArgsFromcare_logsRecursive4']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromcare_logsRecursive4']


class care_logsIncludeFromcare_logsRecursive4(TypedDict, total=False):
    """Relational arguments for care_logs"""

    

class care_logsArgsFromcare_logs(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'care_logsIncludeFromcare_logsRecursive1'


class care_logsArgsFromcare_logsRecursive1(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'care_logsIncludeFromcare_logsRecursive2'


class care_logsArgsFromcare_logsRecursive2(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'care_logsIncludeFromcare_logsRecursive3'


class care_logsArgsFromcare_logsRecursive3(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'care_logsIncludeFromcare_logsRecursive4'


class care_logsArgsFromcare_logsRecursive4(TypedDict, total=False):
    """Arguments for care_logs"""
    
    

class FindManycare_logsArgsFromcare_logs(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive1'


class FindManycare_logsArgsFromcare_logsRecursive1(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive2'


class FindManycare_logsArgsFromcare_logsRecursive2(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive3'


class FindManycare_logsArgsFromcare_logsRecursive3(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive4'


class FindManycare_logsArgsFromcare_logsRecursive4(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    
    

class reflection_notesIncludeFromcare_logs(TypedDict, total=False):
    """Relational arguments for care_logs"""
    care_setting: Union[bool, 'care_settingsArgsFromcare_logsRecursive1']


class reflection_notesIncludeFromcare_logsRecursive1(TypedDict, total=False):
    """Relational arguments for care_logs"""
    care_setting: Union[bool, 'care_settingsArgsFromcare_logsRecursive2']


class reflection_notesIncludeFromcare_logsRecursive2(TypedDict, total=False):
    """Relational arguments for care_logs"""
    care_setting: Union[bool, 'care_settingsArgsFromcare_logsRecursive3']


class reflection_notesIncludeFromcare_logsRecursive3(TypedDict, total=False):
    """Relational arguments for care_logs"""
    care_setting: Union[bool, 'care_settingsArgsFromcare_logsRecursive4']


class reflection_notesIncludeFromcare_logsRecursive4(TypedDict, total=False):
    """Relational arguments for care_logs"""

    

class reflection_notesArgsFromcare_logs(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive1'


class reflection_notesArgsFromcare_logsRecursive1(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive2'


class reflection_notesArgsFromcare_logsRecursive2(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive3'


class reflection_notesArgsFromcare_logsRecursive3(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive4'


class reflection_notesArgsFromcare_logsRecursive4(TypedDict, total=False):
    """Arguments for care_logs"""
    
    

class FindManyreflection_notesArgsFromcare_logs(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive1'


class FindManyreflection_notesArgsFromcare_logsRecursive1(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive2'


class FindManyreflection_notesArgsFromcare_logsRecursive2(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive3'


class FindManyreflection_notesArgsFromcare_logsRecursive3(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive4'


class FindManyreflection_notesArgsFromcare_logsRecursive4(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    
    

class message_logsIncludeFromcare_logs(TypedDict, total=False):
    """Relational arguments for care_logs"""
    user: Union[bool, 'usersArgsFromcare_logsRecursive1']


class message_logsIncludeFromcare_logsRecursive1(TypedDict, total=False):
    """Relational arguments for care_logs"""
    user: Union[bool, 'usersArgsFromcare_logsRecursive2']


class message_logsIncludeFromcare_logsRecursive2(TypedDict, total=False):
    """Relational arguments for care_logs"""
    user: Union[bool, 'usersArgsFromcare_logsRecursive3']


class message_logsIncludeFromcare_logsRecursive3(TypedDict, total=False):
    """Relational arguments for care_logs"""
    user: Union[bool, 'usersArgsFromcare_logsRecursive4']


class message_logsIncludeFromcare_logsRecursive4(TypedDict, total=False):
    """Relational arguments for care_logs"""

    

class message_logsArgsFromcare_logs(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'message_logsIncludeFrommessage_logsRecursive1'


class message_logsArgsFromcare_logsRecursive1(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'message_logsIncludeFrommessage_logsRecursive2'


class message_logsArgsFromcare_logsRecursive2(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'message_logsIncludeFrommessage_logsRecursive3'


class message_logsArgsFromcare_logsRecursive3(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'message_logsIncludeFrommessage_logsRecursive4'


class message_logsArgsFromcare_logsRecursive4(TypedDict, total=False):
    """Arguments for care_logs"""
    
    

class FindManymessage_logsArgsFromcare_logs(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive1'


class FindManymessage_logsArgsFromcare_logsRecursive1(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive2'


class FindManymessage_logsArgsFromcare_logsRecursive2(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive3'


class FindManymessage_logsArgsFromcare_logsRecursive3(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive4'


class FindManymessage_logsArgsFromcare_logsRecursive4(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    
    

class walk_missionsIncludeFromcare_logs(TypedDict, total=False):
    """Relational arguments for care_logs"""
    care_log: Union[bool, 'care_logsArgsFromcare_logsRecursive1']


class walk_missionsIncludeFromcare_logsRecursive1(TypedDict, total=False):
    """Relational arguments for care_logs"""
    care_log: Union[bool, 'care_logsArgsFromcare_logsRecursive2']


class walk_missionsIncludeFromcare_logsRecursive2(TypedDict, total=False):
    """Relational arguments for care_logs"""
    care_log: Union[bool, 'care_logsArgsFromcare_logsRecursive3']


class walk_missionsIncludeFromcare_logsRecursive3(TypedDict, total=False):
    """Relational arguments for care_logs"""
    care_log: Union[bool, 'care_logsArgsFromcare_logsRecursive4']


class walk_missionsIncludeFromcare_logsRecursive4(TypedDict, total=False):
    """Relational arguments for care_logs"""

    

class walk_missionsArgsFromcare_logs(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive1'


class walk_missionsArgsFromcare_logsRecursive1(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive2'


class walk_missionsArgsFromcare_logsRecursive2(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive3'


class walk_missionsArgsFromcare_logsRecursive3(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive4'


class walk_missionsArgsFromcare_logsRecursive4(TypedDict, total=False):
    """Arguments for care_logs"""
    
    

class FindManywalk_missionsArgsFromcare_logs(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive1'


class FindManywalk_missionsArgsFromcare_logsRecursive1(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive2'


class FindManywalk_missionsArgsFromcare_logsRecursive2(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive3'


class FindManywalk_missionsArgsFromcare_logsRecursive3(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive4'


class FindManywalk_missionsArgsFromcare_logsRecursive4(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    
    

class paymentIncludeFromcare_logs(TypedDict, total=False):
    """Relational arguments for care_logs"""
    user: Union[bool, 'usersArgsFromcare_logsRecursive1']


class paymentIncludeFromcare_logsRecursive1(TypedDict, total=False):
    """Relational arguments for care_logs"""
    user: Union[bool, 'usersArgsFromcare_logsRecursive2']


class paymentIncludeFromcare_logsRecursive2(TypedDict, total=False):
    """Relational arguments for care_logs"""
    user: Union[bool, 'usersArgsFromcare_logsRecursive3']


class paymentIncludeFromcare_logsRecursive3(TypedDict, total=False):
    """Relational arguments for care_logs"""
    user: Union[bool, 'usersArgsFromcare_logsRecursive4']


class paymentIncludeFromcare_logsRecursive4(TypedDict, total=False):
    """Relational arguments for care_logs"""

    

class paymentArgsFromcare_logs(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'paymentIncludeFrompaymentRecursive1'


class paymentArgsFromcare_logsRecursive1(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'paymentIncludeFrompaymentRecursive2'


class paymentArgsFromcare_logsRecursive2(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'paymentIncludeFrompaymentRecursive3'


class paymentArgsFromcare_logsRecursive3(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'paymentIncludeFrompaymentRecursive4'


class paymentArgsFromcare_logsRecursive4(TypedDict, total=False):
    """Arguments for care_logs"""
    
    

class FindManypaymentArgsFromcare_logs(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive1'


class FindManypaymentArgsFromcare_logsRecursive1(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive2'


class FindManypaymentArgsFromcare_logsRecursive2(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive3'


class FindManypaymentArgsFromcare_logsRecursive3(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive4'


class FindManypaymentArgsFromcare_logsRecursive4(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    
    

class webhook_eventsIncludeFromcare_logs(TypedDict, total=False):
    """Relational arguments for care_logs"""


class webhook_eventsIncludeFromcare_logsRecursive1(TypedDict, total=False):
    """Relational arguments for care_logs"""


class webhook_eventsIncludeFromcare_logsRecursive2(TypedDict, total=False):
    """Relational arguments for care_logs"""


class webhook_eventsIncludeFromcare_logsRecursive3(TypedDict, total=False):
    """Relational arguments for care_logs"""


class webhook_eventsIncludeFromcare_logsRecursive4(TypedDict, total=False):
    """Relational arguments for care_logs"""

    

class webhook_eventsArgsFromcare_logs(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive1'


class webhook_eventsArgsFromcare_logsRecursive1(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive2'


class webhook_eventsArgsFromcare_logsRecursive2(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive3'


class webhook_eventsArgsFromcare_logsRecursive3(TypedDict, total=False):
    """Arguments for care_logs"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive4'


class webhook_eventsArgsFromcare_logsRecursive4(TypedDict, total=False):
    """Arguments for care_logs"""
    
    

class FindManywebhook_eventsArgsFromcare_logs(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive1'


class FindManywebhook_eventsArgsFromcare_logsRecursive1(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive2'


class FindManywebhook_eventsArgsFromcare_logsRecursive2(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive3'


class FindManywebhook_eventsArgsFromcare_logsRecursive3(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive4'


class FindManywebhook_eventsArgsFromcare_logsRecursive4(TypedDict, total=False):
    """Arguments for care_logs"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    


FindManycare_logsArgs = FindManycare_logsArgsFromcare_logs
FindFirstcare_logsArgs = FindManycare_logsArgsFromcare_logs


    

class care_logsWhereInput(TypedDict, total=False):
    """care_logs arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    care_setting_id: Union[_int, 'types.IntFilter']
    date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    fed_morning: Union[None, _bool, 'types.BooleanFilter']
    fed_night: Union[None, _bool, 'types.BooleanFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_setting: 'care_settingsRelationFilter'
    walk_missions: 'walk_missionsListRelationFilter'

    # should be noted that AND and NOT should be Union['care_logsWhereInputRecursive1', List['care_logsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['care_logsWhereInputRecursive1']
    OR: List['care_logsWhereInputRecursive1']
    NOT: List['care_logsWhereInputRecursive1']


class care_logsWhereInputRecursive1(TypedDict, total=False):
    """care_logs arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    care_setting_id: Union[_int, 'types.IntFilter']
    date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    fed_morning: Union[None, _bool, 'types.BooleanFilter']
    fed_night: Union[None, _bool, 'types.BooleanFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_setting: 'care_settingsRelationFilter'
    walk_missions: 'walk_missionsListRelationFilter'

    # should be noted that AND and NOT should be Union['care_logsWhereInputRecursive2', List['care_logsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['care_logsWhereInputRecursive2']
    OR: List['care_logsWhereInputRecursive2']
    NOT: List['care_logsWhereInputRecursive2']


class care_logsWhereInputRecursive2(TypedDict, total=False):
    """care_logs arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    care_setting_id: Union[_int, 'types.IntFilter']
    date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    fed_morning: Union[None, _bool, 'types.BooleanFilter']
    fed_night: Union[None, _bool, 'types.BooleanFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_setting: 'care_settingsRelationFilter'
    walk_missions: 'walk_missionsListRelationFilter'

    # should be noted that AND and NOT should be Union['care_logsWhereInputRecursive3', List['care_logsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['care_logsWhereInputRecursive3']
    OR: List['care_logsWhereInputRecursive3']
    NOT: List['care_logsWhereInputRecursive3']


class care_logsWhereInputRecursive3(TypedDict, total=False):
    """care_logs arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    care_setting_id: Union[_int, 'types.IntFilter']
    date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    fed_morning: Union[None, _bool, 'types.BooleanFilter']
    fed_night: Union[None, _bool, 'types.BooleanFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_setting: 'care_settingsRelationFilter'
    walk_missions: 'walk_missionsListRelationFilter'

    # should be noted that AND and NOT should be Union['care_logsWhereInputRecursive4', List['care_logsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['care_logsWhereInputRecursive4']
    OR: List['care_logsWhereInputRecursive4']
    NOT: List['care_logsWhereInputRecursive4']


class care_logsWhereInputRecursive4(TypedDict, total=False):
    """care_logs arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    care_setting_id: Union[_int, 'types.IntFilter']
    date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    fed_morning: Union[None, _bool, 'types.BooleanFilter']
    fed_night: Union[None, _bool, 'types.BooleanFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_setting: 'care_settingsRelationFilter'
    walk_missions: 'walk_missionsListRelationFilter'



# aggregate care_logs types


    

class care_logsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """care_logs arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    care_setting_id: Union[_int, 'types.IntWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    fed_morning: Union[_bool, 'types.BooleanWithAggregatesFilter']
    fed_night: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['care_logsScalarWhereWithAggregatesInputRecursive1']
    OR: List['care_logsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['care_logsScalarWhereWithAggregatesInputRecursive1']


class care_logsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """care_logs arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    care_setting_id: Union[_int, 'types.IntWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    fed_morning: Union[_bool, 'types.BooleanWithAggregatesFilter']
    fed_night: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['care_logsScalarWhereWithAggregatesInputRecursive2']
    OR: List['care_logsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['care_logsScalarWhereWithAggregatesInputRecursive2']


class care_logsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """care_logs arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    care_setting_id: Union[_int, 'types.IntWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    fed_morning: Union[_bool, 'types.BooleanWithAggregatesFilter']
    fed_night: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['care_logsScalarWhereWithAggregatesInputRecursive3']
    OR: List['care_logsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['care_logsScalarWhereWithAggregatesInputRecursive3']


class care_logsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """care_logs arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    care_setting_id: Union[_int, 'types.IntWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    fed_morning: Union[_bool, 'types.BooleanWithAggregatesFilter']
    fed_night: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['care_logsScalarWhereWithAggregatesInputRecursive4']
    OR: List['care_logsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['care_logsScalarWhereWithAggregatesInputRecursive4']


class care_logsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """care_logs arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    care_setting_id: Union[_int, 'types.IntWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    fed_morning: Union[_bool, 'types.BooleanWithAggregatesFilter']
    fed_night: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class care_logsGroupByOutput(TypedDict, total=False):
    id: _int
    care_setting_id: _int
    date: datetime.datetime
    fed_morning: _bool
    fed_night: _bool
    created_at: datetime.datetime
    _sum: 'care_logsSumAggregateOutput'
    _avg: 'care_logsAvgAggregateOutput'
    _min: 'care_logsMinAggregateOutput'
    _max: 'care_logsMaxAggregateOutput'
    _count: 'care_logsCountAggregateOutput'


class care_logsAvgAggregateOutput(TypedDict, total=False):
    """care_logs output for aggregating averages"""
    id: float
    care_setting_id: float


class care_logsSumAggregateOutput(TypedDict, total=False):
    """care_logs output for aggregating sums"""
    id: _int
    care_setting_id: _int


class care_logsScalarAggregateOutput(TypedDict, total=False):
    """care_logs output including scalar fields"""
    id: _int
    care_setting_id: _int
    date: datetime.datetime
    fed_morning: _bool
    fed_night: _bool
    created_at: datetime.datetime


care_logsMinAggregateOutput = care_logsScalarAggregateOutput
care_logsMaxAggregateOutput = care_logsScalarAggregateOutput


class care_logsMaxAggregateInput(TypedDict, total=False):
    """care_logs input for aggregating by max"""
    id: bool
    care_setting_id: bool
    date: bool
    fed_morning: bool
    fed_night: bool
    created_at: bool


class care_logsMinAggregateInput(TypedDict, total=False):
    """care_logs input for aggregating by min"""
    id: bool
    care_setting_id: bool
    date: bool
    fed_morning: bool
    fed_night: bool
    created_at: bool


class care_logsNumberAggregateInput(TypedDict, total=False):
    """care_logs input for aggregating numbers"""
    id: bool
    care_setting_id: bool


care_logsAvgAggregateInput = care_logsNumberAggregateInput
care_logsSumAggregateInput = care_logsNumberAggregateInput


care_logsCountAggregateInput = TypedDict(
    'care_logsCountAggregateInput',
    {
        'id': bool,
        'care_setting_id': bool,
        'date': bool,
        'fed_morning': bool,
        'fed_night': bool,
        'created_at': bool,
        '_all': bool,
    },
    total=False,
)

care_logsCountAggregateOutput = TypedDict(
    'care_logsCountAggregateOutput',
    {
        'id': int,
        'care_setting_id': int,
        'date': int,
        'fed_morning': int,
        'fed_night': int,
        'created_at': int,
        '_all': int,
    },
    total=False,
)


care_logsKeys = Literal[
    'id',
    'care_setting_id',
    'date',
    'fed_morning',
    'fed_night',
    'created_at',
    'care_setting',
    'walk_missions',
]
care_logsScalarFieldKeys = Literal[
    'id',
    'care_setting_id',
    'date',
    'fed_morning',
    'fed_night',
    'created_at',
]
care_logsScalarFieldKeysT = TypeVar('care_logsScalarFieldKeysT', bound=care_logsScalarFieldKeys)

care_logsRelationalFieldKeys = Literal[
        'care_setting',
        'walk_missions',
    ]

# reflection_notes types

class reflection_notesOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the reflection_notes create method"""
    id: _int
    care_setting_id: _int
    content: Optional[_str]
    approved_by_parent: _bool
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]
    care_setting: 'care_settingsCreateNestedWithoutRelationsInput'


class reflection_notesCreateInput(reflection_notesOptionalCreateInput):
    """Required arguments to the reflection_notes create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class reflection_notesOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the reflection_notes create method, without relations"""
    id: _int
    care_setting_id: _int
    content: Optional[_str]
    approved_by_parent: _bool
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]


class reflection_notesCreateWithoutRelationsInput(reflection_notesOptionalCreateWithoutRelationsInput):
    """Required arguments to the reflection_notes create method, without relations"""

class reflection_notesConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'reflection_notesCreateWithoutRelationsInput'
    where: 'reflection_notesWhereUniqueInput'

class reflection_notesCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'reflection_notesCreateWithoutRelationsInput'
    connect: 'reflection_notesWhereUniqueInput'
    connect_or_create: 'reflection_notesConnectOrCreateWithoutRelationsInput'


class reflection_notesCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['reflection_notesCreateWithoutRelationsInput', List['reflection_notesCreateWithoutRelationsInput']]
    connect: Union['reflection_notesWhereUniqueInput', List['reflection_notesWhereUniqueInput']]
    connect_or_create: Union['reflection_notesConnectOrCreateWithoutRelationsInput', List['reflection_notesConnectOrCreateWithoutRelationsInput']]

_reflection_notesWhereUnique_id_Input = TypedDict(
    '_reflection_notesWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

reflection_notesWhereUniqueInput = _reflection_notesWhereUnique_id_Input


class reflection_notesUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    content: Optional[_str]
    approved_by_parent: _bool
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]
    care_setting: 'care_settingsUpdateOneWithoutRelationsInput'


class reflection_notesUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    content: Optional[_str]
    approved_by_parent: _bool
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]


class reflection_notesUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['reflection_notesCreateWithoutRelationsInput']
    connect: List['reflection_notesWhereUniqueInput']
    connect_or_create: List['reflection_notesConnectOrCreateWithoutRelationsInput']
    set: List['reflection_notesWhereUniqueInput']
    disconnect: List['reflection_notesWhereUniqueInput']
    delete: List['reflection_notesWhereUniqueInput']

    # TODO
    # update: List['reflection_notesUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['reflection_notesUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['reflection_notesScalarWhereInput']
    # upsert: List['reflection_notesUpserteWithWhereUniqueWithoutRelationsInput']


class reflection_notesUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'reflection_notesCreateWithoutRelationsInput'
    connect: 'reflection_notesWhereUniqueInput'
    connect_or_create: 'reflection_notesConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'reflection_notesUpdateInput'
    # upsert: 'reflection_notesUpsertWithoutRelationsInput'


class reflection_notesUpsertInput(TypedDict):
    create: 'reflection_notesCreateInput'
    update: 'reflection_notesUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_reflection_notes_id_OrderByInput = TypedDict(
    '_reflection_notes_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_reflection_notes_care_setting_id_OrderByInput = TypedDict(
    '_reflection_notes_care_setting_id_OrderByInput',
    {
        'care_setting_id': 'SortOrder',
    },
    total=True
)

_reflection_notes_content_OrderByInput = TypedDict(
    '_reflection_notes_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_reflection_notes_approved_by_parent_OrderByInput = TypedDict(
    '_reflection_notes_approved_by_parent_OrderByInput',
    {
        'approved_by_parent': 'SortOrder',
    },
    total=True
)

_reflection_notes_created_at_OrderByInput = TypedDict(
    '_reflection_notes_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_reflection_notes_updated_at_OrderByInput = TypedDict(
    '_reflection_notes_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_reflection_notes_RelevanceInner = TypedDict(
    '_reflection_notes_RelevanceInner',
    {
        'fields': 'List[reflection_notesScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_reflection_notes_RelevanceOrderByInput = TypedDict(
    '_reflection_notes_RelevanceOrderByInput',
    {
        '_relevance': '_reflection_notes_RelevanceInner',
    },
    total=True
)

reflection_notesOrderByInput = Union[
    '_reflection_notes_id_OrderByInput',
    '_reflection_notes_care_setting_id_OrderByInput',
    '_reflection_notes_content_OrderByInput',
    '_reflection_notes_approved_by_parent_OrderByInput',
    '_reflection_notes_created_at_OrderByInput',
    '_reflection_notes_updated_at_OrderByInput',
    '_reflection_notes_RelevanceOrderByInput',
]



# recursive reflection_notes types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

reflection_notesRelationFilter = TypedDict(
    'reflection_notesRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class reflection_notesListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class reflection_notesInclude(TypedDict, total=False):
    """reflection_notes relational arguments"""
    care_setting: Union[bool, 'care_settingsArgsFromreflection_notes']


    

class usersIncludeFromreflection_notes(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromreflection_notesRecursive1']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromreflection_notesRecursive1']
    payment: Union[bool, 'FindManypaymentArgsFromreflection_notesRecursive1']


class usersIncludeFromreflection_notesRecursive1(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromreflection_notesRecursive2']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromreflection_notesRecursive2']
    payment: Union[bool, 'FindManypaymentArgsFromreflection_notesRecursive2']


class usersIncludeFromreflection_notesRecursive2(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromreflection_notesRecursive3']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromreflection_notesRecursive3']
    payment: Union[bool, 'FindManypaymentArgsFromreflection_notesRecursive3']


class usersIncludeFromreflection_notesRecursive3(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromreflection_notesRecursive4']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromreflection_notesRecursive4']
    payment: Union[bool, 'FindManypaymentArgsFromreflection_notesRecursive4']


class usersIncludeFromreflection_notesRecursive4(TypedDict, total=False):
    """Relational arguments for reflection_notes"""

    

class usersArgsFromreflection_notes(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromreflection_notesRecursive1(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromreflection_notesRecursive2(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromreflection_notesRecursive3(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromreflection_notesRecursive4(TypedDict, total=False):
    """Arguments for reflection_notes"""
    
    

class FindManyusersArgsFromreflection_notes(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromreflection_notesRecursive1(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromreflection_notesRecursive2(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromreflection_notesRecursive3(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromreflection_notesRecursive4(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    
    

class care_settingsIncludeFromreflection_notes(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    user: Union[bool, 'usersArgsFromreflection_notesRecursive1']
    care_logs: Union[bool, 'FindManycare_logsArgsFromreflection_notesRecursive1']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromreflection_notesRecursive1']


class care_settingsIncludeFromreflection_notesRecursive1(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    user: Union[bool, 'usersArgsFromreflection_notesRecursive2']
    care_logs: Union[bool, 'FindManycare_logsArgsFromreflection_notesRecursive2']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromreflection_notesRecursive2']


class care_settingsIncludeFromreflection_notesRecursive2(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    user: Union[bool, 'usersArgsFromreflection_notesRecursive3']
    care_logs: Union[bool, 'FindManycare_logsArgsFromreflection_notesRecursive3']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromreflection_notesRecursive3']


class care_settingsIncludeFromreflection_notesRecursive3(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    user: Union[bool, 'usersArgsFromreflection_notesRecursive4']
    care_logs: Union[bool, 'FindManycare_logsArgsFromreflection_notesRecursive4']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromreflection_notesRecursive4']


class care_settingsIncludeFromreflection_notesRecursive4(TypedDict, total=False):
    """Relational arguments for reflection_notes"""

    

class care_settingsArgsFromreflection_notes(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'care_settingsIncludeFromcare_settingsRecursive1'


class care_settingsArgsFromreflection_notesRecursive1(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'care_settingsIncludeFromcare_settingsRecursive2'


class care_settingsArgsFromreflection_notesRecursive2(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'care_settingsIncludeFromcare_settingsRecursive3'


class care_settingsArgsFromreflection_notesRecursive3(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'care_settingsIncludeFromcare_settingsRecursive4'


class care_settingsArgsFromreflection_notesRecursive4(TypedDict, total=False):
    """Arguments for reflection_notes"""
    
    

class FindManycare_settingsArgsFromreflection_notes(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive1'


class FindManycare_settingsArgsFromreflection_notesRecursive1(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive2'


class FindManycare_settingsArgsFromreflection_notesRecursive2(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive3'


class FindManycare_settingsArgsFromreflection_notesRecursive3(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive4'


class FindManycare_settingsArgsFromreflection_notesRecursive4(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    
    

class care_logsIncludeFromreflection_notes(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    care_setting: Union[bool, 'care_settingsArgsFromreflection_notesRecursive1']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromreflection_notesRecursive1']


class care_logsIncludeFromreflection_notesRecursive1(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    care_setting: Union[bool, 'care_settingsArgsFromreflection_notesRecursive2']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromreflection_notesRecursive2']


class care_logsIncludeFromreflection_notesRecursive2(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    care_setting: Union[bool, 'care_settingsArgsFromreflection_notesRecursive3']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromreflection_notesRecursive3']


class care_logsIncludeFromreflection_notesRecursive3(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    care_setting: Union[bool, 'care_settingsArgsFromreflection_notesRecursive4']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromreflection_notesRecursive4']


class care_logsIncludeFromreflection_notesRecursive4(TypedDict, total=False):
    """Relational arguments for reflection_notes"""

    

class care_logsArgsFromreflection_notes(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'care_logsIncludeFromcare_logsRecursive1'


class care_logsArgsFromreflection_notesRecursive1(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'care_logsIncludeFromcare_logsRecursive2'


class care_logsArgsFromreflection_notesRecursive2(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'care_logsIncludeFromcare_logsRecursive3'


class care_logsArgsFromreflection_notesRecursive3(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'care_logsIncludeFromcare_logsRecursive4'


class care_logsArgsFromreflection_notesRecursive4(TypedDict, total=False):
    """Arguments for reflection_notes"""
    
    

class FindManycare_logsArgsFromreflection_notes(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive1'


class FindManycare_logsArgsFromreflection_notesRecursive1(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive2'


class FindManycare_logsArgsFromreflection_notesRecursive2(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive3'


class FindManycare_logsArgsFromreflection_notesRecursive3(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive4'


class FindManycare_logsArgsFromreflection_notesRecursive4(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    
    

class reflection_notesIncludeFromreflection_notes(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    care_setting: Union[bool, 'care_settingsArgsFromreflection_notesRecursive1']


class reflection_notesIncludeFromreflection_notesRecursive1(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    care_setting: Union[bool, 'care_settingsArgsFromreflection_notesRecursive2']


class reflection_notesIncludeFromreflection_notesRecursive2(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    care_setting: Union[bool, 'care_settingsArgsFromreflection_notesRecursive3']


class reflection_notesIncludeFromreflection_notesRecursive3(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    care_setting: Union[bool, 'care_settingsArgsFromreflection_notesRecursive4']


class reflection_notesIncludeFromreflection_notesRecursive4(TypedDict, total=False):
    """Relational arguments for reflection_notes"""

    

class reflection_notesArgsFromreflection_notes(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive1'


class reflection_notesArgsFromreflection_notesRecursive1(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive2'


class reflection_notesArgsFromreflection_notesRecursive2(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive3'


class reflection_notesArgsFromreflection_notesRecursive3(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive4'


class reflection_notesArgsFromreflection_notesRecursive4(TypedDict, total=False):
    """Arguments for reflection_notes"""
    
    

class FindManyreflection_notesArgsFromreflection_notes(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive1'


class FindManyreflection_notesArgsFromreflection_notesRecursive1(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive2'


class FindManyreflection_notesArgsFromreflection_notesRecursive2(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive3'


class FindManyreflection_notesArgsFromreflection_notesRecursive3(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive4'


class FindManyreflection_notesArgsFromreflection_notesRecursive4(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    
    

class message_logsIncludeFromreflection_notes(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    user: Union[bool, 'usersArgsFromreflection_notesRecursive1']


class message_logsIncludeFromreflection_notesRecursive1(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    user: Union[bool, 'usersArgsFromreflection_notesRecursive2']


class message_logsIncludeFromreflection_notesRecursive2(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    user: Union[bool, 'usersArgsFromreflection_notesRecursive3']


class message_logsIncludeFromreflection_notesRecursive3(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    user: Union[bool, 'usersArgsFromreflection_notesRecursive4']


class message_logsIncludeFromreflection_notesRecursive4(TypedDict, total=False):
    """Relational arguments for reflection_notes"""

    

class message_logsArgsFromreflection_notes(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'message_logsIncludeFrommessage_logsRecursive1'


class message_logsArgsFromreflection_notesRecursive1(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'message_logsIncludeFrommessage_logsRecursive2'


class message_logsArgsFromreflection_notesRecursive2(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'message_logsIncludeFrommessage_logsRecursive3'


class message_logsArgsFromreflection_notesRecursive3(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'message_logsIncludeFrommessage_logsRecursive4'


class message_logsArgsFromreflection_notesRecursive4(TypedDict, total=False):
    """Arguments for reflection_notes"""
    
    

class FindManymessage_logsArgsFromreflection_notes(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive1'


class FindManymessage_logsArgsFromreflection_notesRecursive1(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive2'


class FindManymessage_logsArgsFromreflection_notesRecursive2(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive3'


class FindManymessage_logsArgsFromreflection_notesRecursive3(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive4'


class FindManymessage_logsArgsFromreflection_notesRecursive4(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    
    

class walk_missionsIncludeFromreflection_notes(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    care_log: Union[bool, 'care_logsArgsFromreflection_notesRecursive1']


class walk_missionsIncludeFromreflection_notesRecursive1(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    care_log: Union[bool, 'care_logsArgsFromreflection_notesRecursive2']


class walk_missionsIncludeFromreflection_notesRecursive2(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    care_log: Union[bool, 'care_logsArgsFromreflection_notesRecursive3']


class walk_missionsIncludeFromreflection_notesRecursive3(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    care_log: Union[bool, 'care_logsArgsFromreflection_notesRecursive4']


class walk_missionsIncludeFromreflection_notesRecursive4(TypedDict, total=False):
    """Relational arguments for reflection_notes"""

    

class walk_missionsArgsFromreflection_notes(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive1'


class walk_missionsArgsFromreflection_notesRecursive1(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive2'


class walk_missionsArgsFromreflection_notesRecursive2(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive3'


class walk_missionsArgsFromreflection_notesRecursive3(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive4'


class walk_missionsArgsFromreflection_notesRecursive4(TypedDict, total=False):
    """Arguments for reflection_notes"""
    
    

class FindManywalk_missionsArgsFromreflection_notes(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive1'


class FindManywalk_missionsArgsFromreflection_notesRecursive1(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive2'


class FindManywalk_missionsArgsFromreflection_notesRecursive2(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive3'


class FindManywalk_missionsArgsFromreflection_notesRecursive3(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive4'


class FindManywalk_missionsArgsFromreflection_notesRecursive4(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    
    

class paymentIncludeFromreflection_notes(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    user: Union[bool, 'usersArgsFromreflection_notesRecursive1']


class paymentIncludeFromreflection_notesRecursive1(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    user: Union[bool, 'usersArgsFromreflection_notesRecursive2']


class paymentIncludeFromreflection_notesRecursive2(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    user: Union[bool, 'usersArgsFromreflection_notesRecursive3']


class paymentIncludeFromreflection_notesRecursive3(TypedDict, total=False):
    """Relational arguments for reflection_notes"""
    user: Union[bool, 'usersArgsFromreflection_notesRecursive4']


class paymentIncludeFromreflection_notesRecursive4(TypedDict, total=False):
    """Relational arguments for reflection_notes"""

    

class paymentArgsFromreflection_notes(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'paymentIncludeFrompaymentRecursive1'


class paymentArgsFromreflection_notesRecursive1(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'paymentIncludeFrompaymentRecursive2'


class paymentArgsFromreflection_notesRecursive2(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'paymentIncludeFrompaymentRecursive3'


class paymentArgsFromreflection_notesRecursive3(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'paymentIncludeFrompaymentRecursive4'


class paymentArgsFromreflection_notesRecursive4(TypedDict, total=False):
    """Arguments for reflection_notes"""
    
    

class FindManypaymentArgsFromreflection_notes(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive1'


class FindManypaymentArgsFromreflection_notesRecursive1(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive2'


class FindManypaymentArgsFromreflection_notesRecursive2(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive3'


class FindManypaymentArgsFromreflection_notesRecursive3(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive4'


class FindManypaymentArgsFromreflection_notesRecursive4(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    
    

class webhook_eventsIncludeFromreflection_notes(TypedDict, total=False):
    """Relational arguments for reflection_notes"""


class webhook_eventsIncludeFromreflection_notesRecursive1(TypedDict, total=False):
    """Relational arguments for reflection_notes"""


class webhook_eventsIncludeFromreflection_notesRecursive2(TypedDict, total=False):
    """Relational arguments for reflection_notes"""


class webhook_eventsIncludeFromreflection_notesRecursive3(TypedDict, total=False):
    """Relational arguments for reflection_notes"""


class webhook_eventsIncludeFromreflection_notesRecursive4(TypedDict, total=False):
    """Relational arguments for reflection_notes"""

    

class webhook_eventsArgsFromreflection_notes(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive1'


class webhook_eventsArgsFromreflection_notesRecursive1(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive2'


class webhook_eventsArgsFromreflection_notesRecursive2(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive3'


class webhook_eventsArgsFromreflection_notesRecursive3(TypedDict, total=False):
    """Arguments for reflection_notes"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive4'


class webhook_eventsArgsFromreflection_notesRecursive4(TypedDict, total=False):
    """Arguments for reflection_notes"""
    
    

class FindManywebhook_eventsArgsFromreflection_notes(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive1'


class FindManywebhook_eventsArgsFromreflection_notesRecursive1(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive2'


class FindManywebhook_eventsArgsFromreflection_notesRecursive2(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive3'


class FindManywebhook_eventsArgsFromreflection_notesRecursive3(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive4'


class FindManywebhook_eventsArgsFromreflection_notesRecursive4(TypedDict, total=False):
    """Arguments for reflection_notes"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    


FindManyreflection_notesArgs = FindManyreflection_notesArgsFromreflection_notes
FindFirstreflection_notesArgs = FindManyreflection_notesArgsFromreflection_notes


    

class reflection_notesWhereInput(TypedDict, total=False):
    """reflection_notes arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    care_setting_id: Union[_int, 'types.IntFilter']
    content: Union[None, _str, 'types.StringFilter']
    approved_by_parent: Union[_bool, 'types.BooleanFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_setting: 'care_settingsRelationFilter'

    # should be noted that AND and NOT should be Union['reflection_notesWhereInputRecursive1', List['reflection_notesWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['reflection_notesWhereInputRecursive1']
    OR: List['reflection_notesWhereInputRecursive1']
    NOT: List['reflection_notesWhereInputRecursive1']


class reflection_notesWhereInputRecursive1(TypedDict, total=False):
    """reflection_notes arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    care_setting_id: Union[_int, 'types.IntFilter']
    content: Union[None, _str, 'types.StringFilter']
    approved_by_parent: Union[_bool, 'types.BooleanFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_setting: 'care_settingsRelationFilter'

    # should be noted that AND and NOT should be Union['reflection_notesWhereInputRecursive2', List['reflection_notesWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['reflection_notesWhereInputRecursive2']
    OR: List['reflection_notesWhereInputRecursive2']
    NOT: List['reflection_notesWhereInputRecursive2']


class reflection_notesWhereInputRecursive2(TypedDict, total=False):
    """reflection_notes arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    care_setting_id: Union[_int, 'types.IntFilter']
    content: Union[None, _str, 'types.StringFilter']
    approved_by_parent: Union[_bool, 'types.BooleanFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_setting: 'care_settingsRelationFilter'

    # should be noted that AND and NOT should be Union['reflection_notesWhereInputRecursive3', List['reflection_notesWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['reflection_notesWhereInputRecursive3']
    OR: List['reflection_notesWhereInputRecursive3']
    NOT: List['reflection_notesWhereInputRecursive3']


class reflection_notesWhereInputRecursive3(TypedDict, total=False):
    """reflection_notes arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    care_setting_id: Union[_int, 'types.IntFilter']
    content: Union[None, _str, 'types.StringFilter']
    approved_by_parent: Union[_bool, 'types.BooleanFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_setting: 'care_settingsRelationFilter'

    # should be noted that AND and NOT should be Union['reflection_notesWhereInputRecursive4', List['reflection_notesWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['reflection_notesWhereInputRecursive4']
    OR: List['reflection_notesWhereInputRecursive4']
    NOT: List['reflection_notesWhereInputRecursive4']


class reflection_notesWhereInputRecursive4(TypedDict, total=False):
    """reflection_notes arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    care_setting_id: Union[_int, 'types.IntFilter']
    content: Union[None, _str, 'types.StringFilter']
    approved_by_parent: Union[_bool, 'types.BooleanFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_setting: 'care_settingsRelationFilter'



# aggregate reflection_notes types


    

class reflection_notesScalarWhereWithAggregatesInput(TypedDict, total=False):
    """reflection_notes arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    care_setting_id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    approved_by_parent: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['reflection_notesScalarWhereWithAggregatesInputRecursive1']
    OR: List['reflection_notesScalarWhereWithAggregatesInputRecursive1']
    NOT: List['reflection_notesScalarWhereWithAggregatesInputRecursive1']


class reflection_notesScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """reflection_notes arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    care_setting_id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    approved_by_parent: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['reflection_notesScalarWhereWithAggregatesInputRecursive2']
    OR: List['reflection_notesScalarWhereWithAggregatesInputRecursive2']
    NOT: List['reflection_notesScalarWhereWithAggregatesInputRecursive2']


class reflection_notesScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """reflection_notes arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    care_setting_id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    approved_by_parent: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['reflection_notesScalarWhereWithAggregatesInputRecursive3']
    OR: List['reflection_notesScalarWhereWithAggregatesInputRecursive3']
    NOT: List['reflection_notesScalarWhereWithAggregatesInputRecursive3']


class reflection_notesScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """reflection_notes arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    care_setting_id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    approved_by_parent: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['reflection_notesScalarWhereWithAggregatesInputRecursive4']
    OR: List['reflection_notesScalarWhereWithAggregatesInputRecursive4']
    NOT: List['reflection_notesScalarWhereWithAggregatesInputRecursive4']


class reflection_notesScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """reflection_notes arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    care_setting_id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    approved_by_parent: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class reflection_notesGroupByOutput(TypedDict, total=False):
    id: _int
    care_setting_id: _int
    content: _str
    approved_by_parent: _bool
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'reflection_notesSumAggregateOutput'
    _avg: 'reflection_notesAvgAggregateOutput'
    _min: 'reflection_notesMinAggregateOutput'
    _max: 'reflection_notesMaxAggregateOutput'
    _count: 'reflection_notesCountAggregateOutput'


class reflection_notesAvgAggregateOutput(TypedDict, total=False):
    """reflection_notes output for aggregating averages"""
    id: float
    care_setting_id: float


class reflection_notesSumAggregateOutput(TypedDict, total=False):
    """reflection_notes output for aggregating sums"""
    id: _int
    care_setting_id: _int


class reflection_notesScalarAggregateOutput(TypedDict, total=False):
    """reflection_notes output including scalar fields"""
    id: _int
    care_setting_id: _int
    content: _str
    approved_by_parent: _bool
    created_at: datetime.datetime
    updated_at: datetime.datetime


reflection_notesMinAggregateOutput = reflection_notesScalarAggregateOutput
reflection_notesMaxAggregateOutput = reflection_notesScalarAggregateOutput


class reflection_notesMaxAggregateInput(TypedDict, total=False):
    """reflection_notes input for aggregating by max"""
    id: bool
    care_setting_id: bool
    content: bool
    approved_by_parent: bool
    created_at: bool
    updated_at: bool


class reflection_notesMinAggregateInput(TypedDict, total=False):
    """reflection_notes input for aggregating by min"""
    id: bool
    care_setting_id: bool
    content: bool
    approved_by_parent: bool
    created_at: bool
    updated_at: bool


class reflection_notesNumberAggregateInput(TypedDict, total=False):
    """reflection_notes input for aggregating numbers"""
    id: bool
    care_setting_id: bool


reflection_notesAvgAggregateInput = reflection_notesNumberAggregateInput
reflection_notesSumAggregateInput = reflection_notesNumberAggregateInput


reflection_notesCountAggregateInput = TypedDict(
    'reflection_notesCountAggregateInput',
    {
        'id': bool,
        'care_setting_id': bool,
        'content': bool,
        'approved_by_parent': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

reflection_notesCountAggregateOutput = TypedDict(
    'reflection_notesCountAggregateOutput',
    {
        'id': int,
        'care_setting_id': int,
        'content': int,
        'approved_by_parent': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


reflection_notesKeys = Literal[
    'id',
    'care_setting_id',
    'content',
    'approved_by_parent',
    'created_at',
    'updated_at',
    'care_setting',
]
reflection_notesScalarFieldKeys = Literal[
    'id',
    'care_setting_id',
    'content',
    'approved_by_parent',
    'created_at',
    'updated_at',
]
reflection_notesScalarFieldKeysT = TypeVar('reflection_notesScalarFieldKeysT', bound=reflection_notesScalarFieldKeys)

reflection_notesRelationalFieldKeys = Literal[
        'care_setting',
    ]

# message_logs types

class message_logsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the message_logs create method"""
    id: _int
    user_id: _str
    content: Optional[_str]
    is_llm_based: Optional[_bool]
    created_at: Optional[datetime.datetime]
    user: 'usersCreateNestedWithoutRelationsInput'


class message_logsCreateInput(message_logsOptionalCreateInput):
    """Required arguments to the message_logs create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class message_logsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the message_logs create method, without relations"""
    id: _int
    user_id: _str
    content: Optional[_str]
    is_llm_based: Optional[_bool]
    created_at: Optional[datetime.datetime]


class message_logsCreateWithoutRelationsInput(message_logsOptionalCreateWithoutRelationsInput):
    """Required arguments to the message_logs create method, without relations"""

class message_logsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'message_logsCreateWithoutRelationsInput'
    where: 'message_logsWhereUniqueInput'

class message_logsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'message_logsCreateWithoutRelationsInput'
    connect: 'message_logsWhereUniqueInput'
    connect_or_create: 'message_logsConnectOrCreateWithoutRelationsInput'


class message_logsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['message_logsCreateWithoutRelationsInput', List['message_logsCreateWithoutRelationsInput']]
    connect: Union['message_logsWhereUniqueInput', List['message_logsWhereUniqueInput']]
    connect_or_create: Union['message_logsConnectOrCreateWithoutRelationsInput', List['message_logsConnectOrCreateWithoutRelationsInput']]

_message_logsWhereUnique_id_Input = TypedDict(
    '_message_logsWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

message_logsWhereUniqueInput = _message_logsWhereUnique_id_Input


class message_logsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    content: Optional[_str]
    is_llm_based: Optional[_bool]
    created_at: Optional[datetime.datetime]
    user: 'usersUpdateOneWithoutRelationsInput'


class message_logsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    content: Optional[_str]
    is_llm_based: Optional[_bool]
    created_at: Optional[datetime.datetime]


class message_logsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['message_logsCreateWithoutRelationsInput']
    connect: List['message_logsWhereUniqueInput']
    connect_or_create: List['message_logsConnectOrCreateWithoutRelationsInput']
    set: List['message_logsWhereUniqueInput']
    disconnect: List['message_logsWhereUniqueInput']
    delete: List['message_logsWhereUniqueInput']

    # TODO
    # update: List['message_logsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['message_logsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['message_logsScalarWhereInput']
    # upsert: List['message_logsUpserteWithWhereUniqueWithoutRelationsInput']


class message_logsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'message_logsCreateWithoutRelationsInput'
    connect: 'message_logsWhereUniqueInput'
    connect_or_create: 'message_logsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'message_logsUpdateInput'
    # upsert: 'message_logsUpsertWithoutRelationsInput'


class message_logsUpsertInput(TypedDict):
    create: 'message_logsCreateInput'
    update: 'message_logsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_message_logs_id_OrderByInput = TypedDict(
    '_message_logs_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_message_logs_user_id_OrderByInput = TypedDict(
    '_message_logs_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_message_logs_content_OrderByInput = TypedDict(
    '_message_logs_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_message_logs_is_llm_based_OrderByInput = TypedDict(
    '_message_logs_is_llm_based_OrderByInput',
    {
        'is_llm_based': 'SortOrder',
    },
    total=True
)

_message_logs_created_at_OrderByInput = TypedDict(
    '_message_logs_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_message_logs_RelevanceInner = TypedDict(
    '_message_logs_RelevanceInner',
    {
        'fields': 'List[message_logsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_message_logs_RelevanceOrderByInput = TypedDict(
    '_message_logs_RelevanceOrderByInput',
    {
        '_relevance': '_message_logs_RelevanceInner',
    },
    total=True
)

message_logsOrderByInput = Union[
    '_message_logs_id_OrderByInput',
    '_message_logs_user_id_OrderByInput',
    '_message_logs_content_OrderByInput',
    '_message_logs_is_llm_based_OrderByInput',
    '_message_logs_created_at_OrderByInput',
    '_message_logs_RelevanceOrderByInput',
]



# recursive message_logs types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

message_logsRelationFilter = TypedDict(
    'message_logsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class message_logsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class message_logsInclude(TypedDict, total=False):
    """message_logs relational arguments"""
    user: Union[bool, 'usersArgsFrommessage_logs']


    

class usersIncludeFrommessage_logs(TypedDict, total=False):
    """Relational arguments for message_logs"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFrommessage_logsRecursive1']
    message_logs: Union[bool, 'FindManymessage_logsArgsFrommessage_logsRecursive1']
    payment: Union[bool, 'FindManypaymentArgsFrommessage_logsRecursive1']


class usersIncludeFrommessage_logsRecursive1(TypedDict, total=False):
    """Relational arguments for message_logs"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFrommessage_logsRecursive2']
    message_logs: Union[bool, 'FindManymessage_logsArgsFrommessage_logsRecursive2']
    payment: Union[bool, 'FindManypaymentArgsFrommessage_logsRecursive2']


class usersIncludeFrommessage_logsRecursive2(TypedDict, total=False):
    """Relational arguments for message_logs"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFrommessage_logsRecursive3']
    message_logs: Union[bool, 'FindManymessage_logsArgsFrommessage_logsRecursive3']
    payment: Union[bool, 'FindManypaymentArgsFrommessage_logsRecursive3']


class usersIncludeFrommessage_logsRecursive3(TypedDict, total=False):
    """Relational arguments for message_logs"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFrommessage_logsRecursive4']
    message_logs: Union[bool, 'FindManymessage_logsArgsFrommessage_logsRecursive4']
    payment: Union[bool, 'FindManypaymentArgsFrommessage_logsRecursive4']


class usersIncludeFrommessage_logsRecursive4(TypedDict, total=False):
    """Relational arguments for message_logs"""

    

class usersArgsFrommessage_logs(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFrommessage_logsRecursive1(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFrommessage_logsRecursive2(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFrommessage_logsRecursive3(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFrommessage_logsRecursive4(TypedDict, total=False):
    """Arguments for message_logs"""
    
    

class FindManyusersArgsFrommessage_logs(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFrommessage_logsRecursive1(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFrommessage_logsRecursive2(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFrommessage_logsRecursive3(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFrommessage_logsRecursive4(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    
    

class care_settingsIncludeFrommessage_logs(TypedDict, total=False):
    """Relational arguments for message_logs"""
    user: Union[bool, 'usersArgsFrommessage_logsRecursive1']
    care_logs: Union[bool, 'FindManycare_logsArgsFrommessage_logsRecursive1']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFrommessage_logsRecursive1']


class care_settingsIncludeFrommessage_logsRecursive1(TypedDict, total=False):
    """Relational arguments for message_logs"""
    user: Union[bool, 'usersArgsFrommessage_logsRecursive2']
    care_logs: Union[bool, 'FindManycare_logsArgsFrommessage_logsRecursive2']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFrommessage_logsRecursive2']


class care_settingsIncludeFrommessage_logsRecursive2(TypedDict, total=False):
    """Relational arguments for message_logs"""
    user: Union[bool, 'usersArgsFrommessage_logsRecursive3']
    care_logs: Union[bool, 'FindManycare_logsArgsFrommessage_logsRecursive3']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFrommessage_logsRecursive3']


class care_settingsIncludeFrommessage_logsRecursive3(TypedDict, total=False):
    """Relational arguments for message_logs"""
    user: Union[bool, 'usersArgsFrommessage_logsRecursive4']
    care_logs: Union[bool, 'FindManycare_logsArgsFrommessage_logsRecursive4']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFrommessage_logsRecursive4']


class care_settingsIncludeFrommessage_logsRecursive4(TypedDict, total=False):
    """Relational arguments for message_logs"""

    

class care_settingsArgsFrommessage_logs(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'care_settingsIncludeFromcare_settingsRecursive1'


class care_settingsArgsFrommessage_logsRecursive1(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'care_settingsIncludeFromcare_settingsRecursive2'


class care_settingsArgsFrommessage_logsRecursive2(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'care_settingsIncludeFromcare_settingsRecursive3'


class care_settingsArgsFrommessage_logsRecursive3(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'care_settingsIncludeFromcare_settingsRecursive4'


class care_settingsArgsFrommessage_logsRecursive4(TypedDict, total=False):
    """Arguments for message_logs"""
    
    

class FindManycare_settingsArgsFrommessage_logs(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive1'


class FindManycare_settingsArgsFrommessage_logsRecursive1(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive2'


class FindManycare_settingsArgsFrommessage_logsRecursive2(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive3'


class FindManycare_settingsArgsFrommessage_logsRecursive3(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive4'


class FindManycare_settingsArgsFrommessage_logsRecursive4(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    
    

class care_logsIncludeFrommessage_logs(TypedDict, total=False):
    """Relational arguments for message_logs"""
    care_setting: Union[bool, 'care_settingsArgsFrommessage_logsRecursive1']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFrommessage_logsRecursive1']


class care_logsIncludeFrommessage_logsRecursive1(TypedDict, total=False):
    """Relational arguments for message_logs"""
    care_setting: Union[bool, 'care_settingsArgsFrommessage_logsRecursive2']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFrommessage_logsRecursive2']


class care_logsIncludeFrommessage_logsRecursive2(TypedDict, total=False):
    """Relational arguments for message_logs"""
    care_setting: Union[bool, 'care_settingsArgsFrommessage_logsRecursive3']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFrommessage_logsRecursive3']


class care_logsIncludeFrommessage_logsRecursive3(TypedDict, total=False):
    """Relational arguments for message_logs"""
    care_setting: Union[bool, 'care_settingsArgsFrommessage_logsRecursive4']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFrommessage_logsRecursive4']


class care_logsIncludeFrommessage_logsRecursive4(TypedDict, total=False):
    """Relational arguments for message_logs"""

    

class care_logsArgsFrommessage_logs(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'care_logsIncludeFromcare_logsRecursive1'


class care_logsArgsFrommessage_logsRecursive1(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'care_logsIncludeFromcare_logsRecursive2'


class care_logsArgsFrommessage_logsRecursive2(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'care_logsIncludeFromcare_logsRecursive3'


class care_logsArgsFrommessage_logsRecursive3(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'care_logsIncludeFromcare_logsRecursive4'


class care_logsArgsFrommessage_logsRecursive4(TypedDict, total=False):
    """Arguments for message_logs"""
    
    

class FindManycare_logsArgsFrommessage_logs(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive1'


class FindManycare_logsArgsFrommessage_logsRecursive1(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive2'


class FindManycare_logsArgsFrommessage_logsRecursive2(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive3'


class FindManycare_logsArgsFrommessage_logsRecursive3(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive4'


class FindManycare_logsArgsFrommessage_logsRecursive4(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    
    

class reflection_notesIncludeFrommessage_logs(TypedDict, total=False):
    """Relational arguments for message_logs"""
    care_setting: Union[bool, 'care_settingsArgsFrommessage_logsRecursive1']


class reflection_notesIncludeFrommessage_logsRecursive1(TypedDict, total=False):
    """Relational arguments for message_logs"""
    care_setting: Union[bool, 'care_settingsArgsFrommessage_logsRecursive2']


class reflection_notesIncludeFrommessage_logsRecursive2(TypedDict, total=False):
    """Relational arguments for message_logs"""
    care_setting: Union[bool, 'care_settingsArgsFrommessage_logsRecursive3']


class reflection_notesIncludeFrommessage_logsRecursive3(TypedDict, total=False):
    """Relational arguments for message_logs"""
    care_setting: Union[bool, 'care_settingsArgsFrommessage_logsRecursive4']


class reflection_notesIncludeFrommessage_logsRecursive4(TypedDict, total=False):
    """Relational arguments for message_logs"""

    

class reflection_notesArgsFrommessage_logs(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive1'


class reflection_notesArgsFrommessage_logsRecursive1(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive2'


class reflection_notesArgsFrommessage_logsRecursive2(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive3'


class reflection_notesArgsFrommessage_logsRecursive3(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive4'


class reflection_notesArgsFrommessage_logsRecursive4(TypedDict, total=False):
    """Arguments for message_logs"""
    
    

class FindManyreflection_notesArgsFrommessage_logs(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive1'


class FindManyreflection_notesArgsFrommessage_logsRecursive1(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive2'


class FindManyreflection_notesArgsFrommessage_logsRecursive2(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive3'


class FindManyreflection_notesArgsFrommessage_logsRecursive3(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive4'


class FindManyreflection_notesArgsFrommessage_logsRecursive4(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    
    

class message_logsIncludeFrommessage_logs(TypedDict, total=False):
    """Relational arguments for message_logs"""
    user: Union[bool, 'usersArgsFrommessage_logsRecursive1']


class message_logsIncludeFrommessage_logsRecursive1(TypedDict, total=False):
    """Relational arguments for message_logs"""
    user: Union[bool, 'usersArgsFrommessage_logsRecursive2']


class message_logsIncludeFrommessage_logsRecursive2(TypedDict, total=False):
    """Relational arguments for message_logs"""
    user: Union[bool, 'usersArgsFrommessage_logsRecursive3']


class message_logsIncludeFrommessage_logsRecursive3(TypedDict, total=False):
    """Relational arguments for message_logs"""
    user: Union[bool, 'usersArgsFrommessage_logsRecursive4']


class message_logsIncludeFrommessage_logsRecursive4(TypedDict, total=False):
    """Relational arguments for message_logs"""

    

class message_logsArgsFrommessage_logs(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'message_logsIncludeFrommessage_logsRecursive1'


class message_logsArgsFrommessage_logsRecursive1(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'message_logsIncludeFrommessage_logsRecursive2'


class message_logsArgsFrommessage_logsRecursive2(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'message_logsIncludeFrommessage_logsRecursive3'


class message_logsArgsFrommessage_logsRecursive3(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'message_logsIncludeFrommessage_logsRecursive4'


class message_logsArgsFrommessage_logsRecursive4(TypedDict, total=False):
    """Arguments for message_logs"""
    
    

class FindManymessage_logsArgsFrommessage_logs(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive1'


class FindManymessage_logsArgsFrommessage_logsRecursive1(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive2'


class FindManymessage_logsArgsFrommessage_logsRecursive2(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive3'


class FindManymessage_logsArgsFrommessage_logsRecursive3(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive4'


class FindManymessage_logsArgsFrommessage_logsRecursive4(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    
    

class walk_missionsIncludeFrommessage_logs(TypedDict, total=False):
    """Relational arguments for message_logs"""
    care_log: Union[bool, 'care_logsArgsFrommessage_logsRecursive1']


class walk_missionsIncludeFrommessage_logsRecursive1(TypedDict, total=False):
    """Relational arguments for message_logs"""
    care_log: Union[bool, 'care_logsArgsFrommessage_logsRecursive2']


class walk_missionsIncludeFrommessage_logsRecursive2(TypedDict, total=False):
    """Relational arguments for message_logs"""
    care_log: Union[bool, 'care_logsArgsFrommessage_logsRecursive3']


class walk_missionsIncludeFrommessage_logsRecursive3(TypedDict, total=False):
    """Relational arguments for message_logs"""
    care_log: Union[bool, 'care_logsArgsFrommessage_logsRecursive4']


class walk_missionsIncludeFrommessage_logsRecursive4(TypedDict, total=False):
    """Relational arguments for message_logs"""

    

class walk_missionsArgsFrommessage_logs(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive1'


class walk_missionsArgsFrommessage_logsRecursive1(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive2'


class walk_missionsArgsFrommessage_logsRecursive2(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive3'


class walk_missionsArgsFrommessage_logsRecursive3(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive4'


class walk_missionsArgsFrommessage_logsRecursive4(TypedDict, total=False):
    """Arguments for message_logs"""
    
    

class FindManywalk_missionsArgsFrommessage_logs(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive1'


class FindManywalk_missionsArgsFrommessage_logsRecursive1(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive2'


class FindManywalk_missionsArgsFrommessage_logsRecursive2(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive3'


class FindManywalk_missionsArgsFrommessage_logsRecursive3(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive4'


class FindManywalk_missionsArgsFrommessage_logsRecursive4(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    
    

class paymentIncludeFrommessage_logs(TypedDict, total=False):
    """Relational arguments for message_logs"""
    user: Union[bool, 'usersArgsFrommessage_logsRecursive1']


class paymentIncludeFrommessage_logsRecursive1(TypedDict, total=False):
    """Relational arguments for message_logs"""
    user: Union[bool, 'usersArgsFrommessage_logsRecursive2']


class paymentIncludeFrommessage_logsRecursive2(TypedDict, total=False):
    """Relational arguments for message_logs"""
    user: Union[bool, 'usersArgsFrommessage_logsRecursive3']


class paymentIncludeFrommessage_logsRecursive3(TypedDict, total=False):
    """Relational arguments for message_logs"""
    user: Union[bool, 'usersArgsFrommessage_logsRecursive4']


class paymentIncludeFrommessage_logsRecursive4(TypedDict, total=False):
    """Relational arguments for message_logs"""

    

class paymentArgsFrommessage_logs(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'paymentIncludeFrompaymentRecursive1'


class paymentArgsFrommessage_logsRecursive1(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'paymentIncludeFrompaymentRecursive2'


class paymentArgsFrommessage_logsRecursive2(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'paymentIncludeFrompaymentRecursive3'


class paymentArgsFrommessage_logsRecursive3(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'paymentIncludeFrompaymentRecursive4'


class paymentArgsFrommessage_logsRecursive4(TypedDict, total=False):
    """Arguments for message_logs"""
    
    

class FindManypaymentArgsFrommessage_logs(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive1'


class FindManypaymentArgsFrommessage_logsRecursive1(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive2'


class FindManypaymentArgsFrommessage_logsRecursive2(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive3'


class FindManypaymentArgsFrommessage_logsRecursive3(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive4'


class FindManypaymentArgsFrommessage_logsRecursive4(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    
    

class webhook_eventsIncludeFrommessage_logs(TypedDict, total=False):
    """Relational arguments for message_logs"""


class webhook_eventsIncludeFrommessage_logsRecursive1(TypedDict, total=False):
    """Relational arguments for message_logs"""


class webhook_eventsIncludeFrommessage_logsRecursive2(TypedDict, total=False):
    """Relational arguments for message_logs"""


class webhook_eventsIncludeFrommessage_logsRecursive3(TypedDict, total=False):
    """Relational arguments for message_logs"""


class webhook_eventsIncludeFrommessage_logsRecursive4(TypedDict, total=False):
    """Relational arguments for message_logs"""

    

class webhook_eventsArgsFrommessage_logs(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive1'


class webhook_eventsArgsFrommessage_logsRecursive1(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive2'


class webhook_eventsArgsFrommessage_logsRecursive2(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive3'


class webhook_eventsArgsFrommessage_logsRecursive3(TypedDict, total=False):
    """Arguments for message_logs"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive4'


class webhook_eventsArgsFrommessage_logsRecursive4(TypedDict, total=False):
    """Arguments for message_logs"""
    
    

class FindManywebhook_eventsArgsFrommessage_logs(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive1'


class FindManywebhook_eventsArgsFrommessage_logsRecursive1(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive2'


class FindManywebhook_eventsArgsFrommessage_logsRecursive2(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive3'


class FindManywebhook_eventsArgsFrommessage_logsRecursive3(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive4'


class FindManywebhook_eventsArgsFrommessage_logsRecursive4(TypedDict, total=False):
    """Arguments for message_logs"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    


FindManymessage_logsArgs = FindManymessage_logsArgsFrommessage_logs
FindFirstmessage_logsArgs = FindManymessage_logsArgsFrommessage_logs


    

class message_logsWhereInput(TypedDict, total=False):
    """message_logs arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user_id: Union[_str, 'types.StringFilter']
    content: Union[None, _str, 'types.StringFilter']
    is_llm_based: Union[None, _bool, 'types.BooleanFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    user: 'usersRelationFilter'

    # should be noted that AND and NOT should be Union['message_logsWhereInputRecursive1', List['message_logsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['message_logsWhereInputRecursive1']
    OR: List['message_logsWhereInputRecursive1']
    NOT: List['message_logsWhereInputRecursive1']


class message_logsWhereInputRecursive1(TypedDict, total=False):
    """message_logs arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user_id: Union[_str, 'types.StringFilter']
    content: Union[None, _str, 'types.StringFilter']
    is_llm_based: Union[None, _bool, 'types.BooleanFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    user: 'usersRelationFilter'

    # should be noted that AND and NOT should be Union['message_logsWhereInputRecursive2', List['message_logsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['message_logsWhereInputRecursive2']
    OR: List['message_logsWhereInputRecursive2']
    NOT: List['message_logsWhereInputRecursive2']


class message_logsWhereInputRecursive2(TypedDict, total=False):
    """message_logs arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user_id: Union[_str, 'types.StringFilter']
    content: Union[None, _str, 'types.StringFilter']
    is_llm_based: Union[None, _bool, 'types.BooleanFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    user: 'usersRelationFilter'

    # should be noted that AND and NOT should be Union['message_logsWhereInputRecursive3', List['message_logsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['message_logsWhereInputRecursive3']
    OR: List['message_logsWhereInputRecursive3']
    NOT: List['message_logsWhereInputRecursive3']


class message_logsWhereInputRecursive3(TypedDict, total=False):
    """message_logs arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user_id: Union[_str, 'types.StringFilter']
    content: Union[None, _str, 'types.StringFilter']
    is_llm_based: Union[None, _bool, 'types.BooleanFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    user: 'usersRelationFilter'

    # should be noted that AND and NOT should be Union['message_logsWhereInputRecursive4', List['message_logsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['message_logsWhereInputRecursive4']
    OR: List['message_logsWhereInputRecursive4']
    NOT: List['message_logsWhereInputRecursive4']


class message_logsWhereInputRecursive4(TypedDict, total=False):
    """message_logs arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user_id: Union[_str, 'types.StringFilter']
    content: Union[None, _str, 'types.StringFilter']
    is_llm_based: Union[None, _bool, 'types.BooleanFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    user: 'usersRelationFilter'



# aggregate message_logs types


    

class message_logsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """message_logs arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    is_llm_based: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['message_logsScalarWhereWithAggregatesInputRecursive1']
    OR: List['message_logsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['message_logsScalarWhereWithAggregatesInputRecursive1']


class message_logsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """message_logs arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    is_llm_based: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['message_logsScalarWhereWithAggregatesInputRecursive2']
    OR: List['message_logsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['message_logsScalarWhereWithAggregatesInputRecursive2']


class message_logsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """message_logs arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    is_llm_based: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['message_logsScalarWhereWithAggregatesInputRecursive3']
    OR: List['message_logsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['message_logsScalarWhereWithAggregatesInputRecursive3']


class message_logsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """message_logs arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    is_llm_based: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['message_logsScalarWhereWithAggregatesInputRecursive4']
    OR: List['message_logsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['message_logsScalarWhereWithAggregatesInputRecursive4']


class message_logsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """message_logs arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    is_llm_based: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class message_logsGroupByOutput(TypedDict, total=False):
    id: _int
    user_id: _str
    content: _str
    is_llm_based: _bool
    created_at: datetime.datetime
    _sum: 'message_logsSumAggregateOutput'
    _avg: 'message_logsAvgAggregateOutput'
    _min: 'message_logsMinAggregateOutput'
    _max: 'message_logsMaxAggregateOutput'
    _count: 'message_logsCountAggregateOutput'


class message_logsAvgAggregateOutput(TypedDict, total=False):
    """message_logs output for aggregating averages"""
    id: float


class message_logsSumAggregateOutput(TypedDict, total=False):
    """message_logs output for aggregating sums"""
    id: _int


class message_logsScalarAggregateOutput(TypedDict, total=False):
    """message_logs output including scalar fields"""
    id: _int
    user_id: _str
    content: _str
    is_llm_based: _bool
    created_at: datetime.datetime


message_logsMinAggregateOutput = message_logsScalarAggregateOutput
message_logsMaxAggregateOutput = message_logsScalarAggregateOutput


class message_logsMaxAggregateInput(TypedDict, total=False):
    """message_logs input for aggregating by max"""
    id: bool
    user_id: bool
    content: bool
    is_llm_based: bool
    created_at: bool


class message_logsMinAggregateInput(TypedDict, total=False):
    """message_logs input for aggregating by min"""
    id: bool
    user_id: bool
    content: bool
    is_llm_based: bool
    created_at: bool


class message_logsNumberAggregateInput(TypedDict, total=False):
    """message_logs input for aggregating numbers"""
    id: bool


message_logsAvgAggregateInput = message_logsNumberAggregateInput
message_logsSumAggregateInput = message_logsNumberAggregateInput


message_logsCountAggregateInput = TypedDict(
    'message_logsCountAggregateInput',
    {
        'id': bool,
        'user_id': bool,
        'content': bool,
        'is_llm_based': bool,
        'created_at': bool,
        '_all': bool,
    },
    total=False,
)

message_logsCountAggregateOutput = TypedDict(
    'message_logsCountAggregateOutput',
    {
        'id': int,
        'user_id': int,
        'content': int,
        'is_llm_based': int,
        'created_at': int,
        '_all': int,
    },
    total=False,
)


message_logsKeys = Literal[
    'id',
    'user_id',
    'content',
    'is_llm_based',
    'created_at',
    'user',
]
message_logsScalarFieldKeys = Literal[
    'id',
    'user_id',
    'content',
    'is_llm_based',
    'created_at',
]
message_logsScalarFieldKeysT = TypeVar('message_logsScalarFieldKeysT', bound=message_logsScalarFieldKeys)

message_logsRelationalFieldKeys = Literal[
        'user',
    ]

# walk_missions types

class walk_missionsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the walk_missions create method"""
    id: _int
    care_log_id: _int
    started_at: Optional[datetime.datetime]
    ended_at: Optional[datetime.datetime]
    total_distance_m: Optional[_int]
    result: Optional[_str]
    created_at: Optional[datetime.datetime]
    care_log: 'care_logsCreateNestedWithoutRelationsInput'


class walk_missionsCreateInput(walk_missionsOptionalCreateInput):
    """Required arguments to the walk_missions create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class walk_missionsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the walk_missions create method, without relations"""
    id: _int
    care_log_id: _int
    started_at: Optional[datetime.datetime]
    ended_at: Optional[datetime.datetime]
    total_distance_m: Optional[_int]
    result: Optional[_str]
    created_at: Optional[datetime.datetime]


class walk_missionsCreateWithoutRelationsInput(walk_missionsOptionalCreateWithoutRelationsInput):
    """Required arguments to the walk_missions create method, without relations"""

class walk_missionsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'walk_missionsCreateWithoutRelationsInput'
    where: 'walk_missionsWhereUniqueInput'

class walk_missionsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'walk_missionsCreateWithoutRelationsInput'
    connect: 'walk_missionsWhereUniqueInput'
    connect_or_create: 'walk_missionsConnectOrCreateWithoutRelationsInput'


class walk_missionsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['walk_missionsCreateWithoutRelationsInput', List['walk_missionsCreateWithoutRelationsInput']]
    connect: Union['walk_missionsWhereUniqueInput', List['walk_missionsWhereUniqueInput']]
    connect_or_create: Union['walk_missionsConnectOrCreateWithoutRelationsInput', List['walk_missionsConnectOrCreateWithoutRelationsInput']]

_walk_missionsWhereUnique_id_Input = TypedDict(
    '_walk_missionsWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

walk_missionsWhereUniqueInput = _walk_missionsWhereUnique_id_Input


class walk_missionsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    started_at: Optional[datetime.datetime]
    ended_at: Optional[datetime.datetime]
    total_distance_m: Optional[Union[AtomicIntInput, _int]]
    result: Optional[_str]
    created_at: Optional[datetime.datetime]
    care_log: 'care_logsUpdateOneWithoutRelationsInput'


class walk_missionsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    started_at: Optional[datetime.datetime]
    ended_at: Optional[datetime.datetime]
    total_distance_m: Optional[Union[AtomicIntInput, _int]]
    result: Optional[_str]
    created_at: Optional[datetime.datetime]


class walk_missionsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['walk_missionsCreateWithoutRelationsInput']
    connect: List['walk_missionsWhereUniqueInput']
    connect_or_create: List['walk_missionsConnectOrCreateWithoutRelationsInput']
    set: List['walk_missionsWhereUniqueInput']
    disconnect: List['walk_missionsWhereUniqueInput']
    delete: List['walk_missionsWhereUniqueInput']

    # TODO
    # update: List['walk_missionsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['walk_missionsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['walk_missionsScalarWhereInput']
    # upsert: List['walk_missionsUpserteWithWhereUniqueWithoutRelationsInput']


class walk_missionsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'walk_missionsCreateWithoutRelationsInput'
    connect: 'walk_missionsWhereUniqueInput'
    connect_or_create: 'walk_missionsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'walk_missionsUpdateInput'
    # upsert: 'walk_missionsUpsertWithoutRelationsInput'


class walk_missionsUpsertInput(TypedDict):
    create: 'walk_missionsCreateInput'
    update: 'walk_missionsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_walk_missions_id_OrderByInput = TypedDict(
    '_walk_missions_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_walk_missions_care_log_id_OrderByInput = TypedDict(
    '_walk_missions_care_log_id_OrderByInput',
    {
        'care_log_id': 'SortOrder',
    },
    total=True
)

_walk_missions_started_at_OrderByInput = TypedDict(
    '_walk_missions_started_at_OrderByInput',
    {
        'started_at': 'SortOrder',
    },
    total=True
)

_walk_missions_ended_at_OrderByInput = TypedDict(
    '_walk_missions_ended_at_OrderByInput',
    {
        'ended_at': 'SortOrder',
    },
    total=True
)

_walk_missions_total_distance_m_OrderByInput = TypedDict(
    '_walk_missions_total_distance_m_OrderByInput',
    {
        'total_distance_m': 'SortOrder',
    },
    total=True
)

_walk_missions_result_OrderByInput = TypedDict(
    '_walk_missions_result_OrderByInput',
    {
        'result': 'SortOrder',
    },
    total=True
)

_walk_missions_created_at_OrderByInput = TypedDict(
    '_walk_missions_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_walk_missions_RelevanceInner = TypedDict(
    '_walk_missions_RelevanceInner',
    {
        'fields': 'List[walk_missionsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_walk_missions_RelevanceOrderByInput = TypedDict(
    '_walk_missions_RelevanceOrderByInput',
    {
        '_relevance': '_walk_missions_RelevanceInner',
    },
    total=True
)

walk_missionsOrderByInput = Union[
    '_walk_missions_id_OrderByInput',
    '_walk_missions_care_log_id_OrderByInput',
    '_walk_missions_started_at_OrderByInput',
    '_walk_missions_ended_at_OrderByInput',
    '_walk_missions_total_distance_m_OrderByInput',
    '_walk_missions_result_OrderByInput',
    '_walk_missions_created_at_OrderByInput',
    '_walk_missions_RelevanceOrderByInput',
]



# recursive walk_missions types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

walk_missionsRelationFilter = TypedDict(
    'walk_missionsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class walk_missionsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class walk_missionsInclude(TypedDict, total=False):
    """walk_missions relational arguments"""
    care_log: Union[bool, 'care_logsArgsFromwalk_missions']


    

class usersIncludeFromwalk_missions(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromwalk_missionsRecursive1']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromwalk_missionsRecursive1']
    payment: Union[bool, 'FindManypaymentArgsFromwalk_missionsRecursive1']


class usersIncludeFromwalk_missionsRecursive1(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromwalk_missionsRecursive2']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromwalk_missionsRecursive2']
    payment: Union[bool, 'FindManypaymentArgsFromwalk_missionsRecursive2']


class usersIncludeFromwalk_missionsRecursive2(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromwalk_missionsRecursive3']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromwalk_missionsRecursive3']
    payment: Union[bool, 'FindManypaymentArgsFromwalk_missionsRecursive3']


class usersIncludeFromwalk_missionsRecursive3(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromwalk_missionsRecursive4']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromwalk_missionsRecursive4']
    payment: Union[bool, 'FindManypaymentArgsFromwalk_missionsRecursive4']


class usersIncludeFromwalk_missionsRecursive4(TypedDict, total=False):
    """Relational arguments for walk_missions"""

    

class usersArgsFromwalk_missions(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromwalk_missionsRecursive1(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromwalk_missionsRecursive2(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromwalk_missionsRecursive3(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromwalk_missionsRecursive4(TypedDict, total=False):
    """Arguments for walk_missions"""
    
    

class FindManyusersArgsFromwalk_missions(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromwalk_missionsRecursive1(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromwalk_missionsRecursive2(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromwalk_missionsRecursive3(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromwalk_missionsRecursive4(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    
    

class care_settingsIncludeFromwalk_missions(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    user: Union[bool, 'usersArgsFromwalk_missionsRecursive1']
    care_logs: Union[bool, 'FindManycare_logsArgsFromwalk_missionsRecursive1']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromwalk_missionsRecursive1']


class care_settingsIncludeFromwalk_missionsRecursive1(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    user: Union[bool, 'usersArgsFromwalk_missionsRecursive2']
    care_logs: Union[bool, 'FindManycare_logsArgsFromwalk_missionsRecursive2']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromwalk_missionsRecursive2']


class care_settingsIncludeFromwalk_missionsRecursive2(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    user: Union[bool, 'usersArgsFromwalk_missionsRecursive3']
    care_logs: Union[bool, 'FindManycare_logsArgsFromwalk_missionsRecursive3']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromwalk_missionsRecursive3']


class care_settingsIncludeFromwalk_missionsRecursive3(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    user: Union[bool, 'usersArgsFromwalk_missionsRecursive4']
    care_logs: Union[bool, 'FindManycare_logsArgsFromwalk_missionsRecursive4']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromwalk_missionsRecursive4']


class care_settingsIncludeFromwalk_missionsRecursive4(TypedDict, total=False):
    """Relational arguments for walk_missions"""

    

class care_settingsArgsFromwalk_missions(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'care_settingsIncludeFromcare_settingsRecursive1'


class care_settingsArgsFromwalk_missionsRecursive1(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'care_settingsIncludeFromcare_settingsRecursive2'


class care_settingsArgsFromwalk_missionsRecursive2(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'care_settingsIncludeFromcare_settingsRecursive3'


class care_settingsArgsFromwalk_missionsRecursive3(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'care_settingsIncludeFromcare_settingsRecursive4'


class care_settingsArgsFromwalk_missionsRecursive4(TypedDict, total=False):
    """Arguments for walk_missions"""
    
    

class FindManycare_settingsArgsFromwalk_missions(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive1'


class FindManycare_settingsArgsFromwalk_missionsRecursive1(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive2'


class FindManycare_settingsArgsFromwalk_missionsRecursive2(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive3'


class FindManycare_settingsArgsFromwalk_missionsRecursive3(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive4'


class FindManycare_settingsArgsFromwalk_missionsRecursive4(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    
    

class care_logsIncludeFromwalk_missions(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    care_setting: Union[bool, 'care_settingsArgsFromwalk_missionsRecursive1']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromwalk_missionsRecursive1']


class care_logsIncludeFromwalk_missionsRecursive1(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    care_setting: Union[bool, 'care_settingsArgsFromwalk_missionsRecursive2']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromwalk_missionsRecursive2']


class care_logsIncludeFromwalk_missionsRecursive2(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    care_setting: Union[bool, 'care_settingsArgsFromwalk_missionsRecursive3']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromwalk_missionsRecursive3']


class care_logsIncludeFromwalk_missionsRecursive3(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    care_setting: Union[bool, 'care_settingsArgsFromwalk_missionsRecursive4']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromwalk_missionsRecursive4']


class care_logsIncludeFromwalk_missionsRecursive4(TypedDict, total=False):
    """Relational arguments for walk_missions"""

    

class care_logsArgsFromwalk_missions(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'care_logsIncludeFromcare_logsRecursive1'


class care_logsArgsFromwalk_missionsRecursive1(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'care_logsIncludeFromcare_logsRecursive2'


class care_logsArgsFromwalk_missionsRecursive2(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'care_logsIncludeFromcare_logsRecursive3'


class care_logsArgsFromwalk_missionsRecursive3(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'care_logsIncludeFromcare_logsRecursive4'


class care_logsArgsFromwalk_missionsRecursive4(TypedDict, total=False):
    """Arguments for walk_missions"""
    
    

class FindManycare_logsArgsFromwalk_missions(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive1'


class FindManycare_logsArgsFromwalk_missionsRecursive1(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive2'


class FindManycare_logsArgsFromwalk_missionsRecursive2(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive3'


class FindManycare_logsArgsFromwalk_missionsRecursive3(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive4'


class FindManycare_logsArgsFromwalk_missionsRecursive4(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    
    

class reflection_notesIncludeFromwalk_missions(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    care_setting: Union[bool, 'care_settingsArgsFromwalk_missionsRecursive1']


class reflection_notesIncludeFromwalk_missionsRecursive1(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    care_setting: Union[bool, 'care_settingsArgsFromwalk_missionsRecursive2']


class reflection_notesIncludeFromwalk_missionsRecursive2(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    care_setting: Union[bool, 'care_settingsArgsFromwalk_missionsRecursive3']


class reflection_notesIncludeFromwalk_missionsRecursive3(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    care_setting: Union[bool, 'care_settingsArgsFromwalk_missionsRecursive4']


class reflection_notesIncludeFromwalk_missionsRecursive4(TypedDict, total=False):
    """Relational arguments for walk_missions"""

    

class reflection_notesArgsFromwalk_missions(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive1'


class reflection_notesArgsFromwalk_missionsRecursive1(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive2'


class reflection_notesArgsFromwalk_missionsRecursive2(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive3'


class reflection_notesArgsFromwalk_missionsRecursive3(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive4'


class reflection_notesArgsFromwalk_missionsRecursive4(TypedDict, total=False):
    """Arguments for walk_missions"""
    
    

class FindManyreflection_notesArgsFromwalk_missions(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive1'


class FindManyreflection_notesArgsFromwalk_missionsRecursive1(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive2'


class FindManyreflection_notesArgsFromwalk_missionsRecursive2(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive3'


class FindManyreflection_notesArgsFromwalk_missionsRecursive3(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive4'


class FindManyreflection_notesArgsFromwalk_missionsRecursive4(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    
    

class message_logsIncludeFromwalk_missions(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    user: Union[bool, 'usersArgsFromwalk_missionsRecursive1']


class message_logsIncludeFromwalk_missionsRecursive1(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    user: Union[bool, 'usersArgsFromwalk_missionsRecursive2']


class message_logsIncludeFromwalk_missionsRecursive2(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    user: Union[bool, 'usersArgsFromwalk_missionsRecursive3']


class message_logsIncludeFromwalk_missionsRecursive3(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    user: Union[bool, 'usersArgsFromwalk_missionsRecursive4']


class message_logsIncludeFromwalk_missionsRecursive4(TypedDict, total=False):
    """Relational arguments for walk_missions"""

    

class message_logsArgsFromwalk_missions(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'message_logsIncludeFrommessage_logsRecursive1'


class message_logsArgsFromwalk_missionsRecursive1(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'message_logsIncludeFrommessage_logsRecursive2'


class message_logsArgsFromwalk_missionsRecursive2(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'message_logsIncludeFrommessage_logsRecursive3'


class message_logsArgsFromwalk_missionsRecursive3(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'message_logsIncludeFrommessage_logsRecursive4'


class message_logsArgsFromwalk_missionsRecursive4(TypedDict, total=False):
    """Arguments for walk_missions"""
    
    

class FindManymessage_logsArgsFromwalk_missions(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive1'


class FindManymessage_logsArgsFromwalk_missionsRecursive1(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive2'


class FindManymessage_logsArgsFromwalk_missionsRecursive2(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive3'


class FindManymessage_logsArgsFromwalk_missionsRecursive3(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive4'


class FindManymessage_logsArgsFromwalk_missionsRecursive4(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    
    

class walk_missionsIncludeFromwalk_missions(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    care_log: Union[bool, 'care_logsArgsFromwalk_missionsRecursive1']


class walk_missionsIncludeFromwalk_missionsRecursive1(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    care_log: Union[bool, 'care_logsArgsFromwalk_missionsRecursive2']


class walk_missionsIncludeFromwalk_missionsRecursive2(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    care_log: Union[bool, 'care_logsArgsFromwalk_missionsRecursive3']


class walk_missionsIncludeFromwalk_missionsRecursive3(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    care_log: Union[bool, 'care_logsArgsFromwalk_missionsRecursive4']


class walk_missionsIncludeFromwalk_missionsRecursive4(TypedDict, total=False):
    """Relational arguments for walk_missions"""

    

class walk_missionsArgsFromwalk_missions(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive1'


class walk_missionsArgsFromwalk_missionsRecursive1(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive2'


class walk_missionsArgsFromwalk_missionsRecursive2(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive3'


class walk_missionsArgsFromwalk_missionsRecursive3(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive4'


class walk_missionsArgsFromwalk_missionsRecursive4(TypedDict, total=False):
    """Arguments for walk_missions"""
    
    

class FindManywalk_missionsArgsFromwalk_missions(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive1'


class FindManywalk_missionsArgsFromwalk_missionsRecursive1(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive2'


class FindManywalk_missionsArgsFromwalk_missionsRecursive2(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive3'


class FindManywalk_missionsArgsFromwalk_missionsRecursive3(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive4'


class FindManywalk_missionsArgsFromwalk_missionsRecursive4(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    
    

class paymentIncludeFromwalk_missions(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    user: Union[bool, 'usersArgsFromwalk_missionsRecursive1']


class paymentIncludeFromwalk_missionsRecursive1(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    user: Union[bool, 'usersArgsFromwalk_missionsRecursive2']


class paymentIncludeFromwalk_missionsRecursive2(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    user: Union[bool, 'usersArgsFromwalk_missionsRecursive3']


class paymentIncludeFromwalk_missionsRecursive3(TypedDict, total=False):
    """Relational arguments for walk_missions"""
    user: Union[bool, 'usersArgsFromwalk_missionsRecursive4']


class paymentIncludeFromwalk_missionsRecursive4(TypedDict, total=False):
    """Relational arguments for walk_missions"""

    

class paymentArgsFromwalk_missions(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'paymentIncludeFrompaymentRecursive1'


class paymentArgsFromwalk_missionsRecursive1(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'paymentIncludeFrompaymentRecursive2'


class paymentArgsFromwalk_missionsRecursive2(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'paymentIncludeFrompaymentRecursive3'


class paymentArgsFromwalk_missionsRecursive3(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'paymentIncludeFrompaymentRecursive4'


class paymentArgsFromwalk_missionsRecursive4(TypedDict, total=False):
    """Arguments for walk_missions"""
    
    

class FindManypaymentArgsFromwalk_missions(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive1'


class FindManypaymentArgsFromwalk_missionsRecursive1(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive2'


class FindManypaymentArgsFromwalk_missionsRecursive2(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive3'


class FindManypaymentArgsFromwalk_missionsRecursive3(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive4'


class FindManypaymentArgsFromwalk_missionsRecursive4(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    
    

class webhook_eventsIncludeFromwalk_missions(TypedDict, total=False):
    """Relational arguments for walk_missions"""


class webhook_eventsIncludeFromwalk_missionsRecursive1(TypedDict, total=False):
    """Relational arguments for walk_missions"""


class webhook_eventsIncludeFromwalk_missionsRecursive2(TypedDict, total=False):
    """Relational arguments for walk_missions"""


class webhook_eventsIncludeFromwalk_missionsRecursive3(TypedDict, total=False):
    """Relational arguments for walk_missions"""


class webhook_eventsIncludeFromwalk_missionsRecursive4(TypedDict, total=False):
    """Relational arguments for walk_missions"""

    

class webhook_eventsArgsFromwalk_missions(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive1'


class webhook_eventsArgsFromwalk_missionsRecursive1(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive2'


class webhook_eventsArgsFromwalk_missionsRecursive2(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive3'


class webhook_eventsArgsFromwalk_missionsRecursive3(TypedDict, total=False):
    """Arguments for walk_missions"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive4'


class webhook_eventsArgsFromwalk_missionsRecursive4(TypedDict, total=False):
    """Arguments for walk_missions"""
    
    

class FindManywebhook_eventsArgsFromwalk_missions(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive1'


class FindManywebhook_eventsArgsFromwalk_missionsRecursive1(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive2'


class FindManywebhook_eventsArgsFromwalk_missionsRecursive2(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive3'


class FindManywebhook_eventsArgsFromwalk_missionsRecursive3(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive4'


class FindManywebhook_eventsArgsFromwalk_missionsRecursive4(TypedDict, total=False):
    """Arguments for walk_missions"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    


FindManywalk_missionsArgs = FindManywalk_missionsArgsFromwalk_missions
FindFirstwalk_missionsArgs = FindManywalk_missionsArgsFromwalk_missions


    

class walk_missionsWhereInput(TypedDict, total=False):
    """walk_missions arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    care_log_id: Union[_int, 'types.IntFilter']
    started_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    ended_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    total_distance_m: Union[None, _int, 'types.IntFilter']
    result: Union[None, _str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_log: 'care_logsRelationFilter'

    # should be noted that AND and NOT should be Union['walk_missionsWhereInputRecursive1', List['walk_missionsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['walk_missionsWhereInputRecursive1']
    OR: List['walk_missionsWhereInputRecursive1']
    NOT: List['walk_missionsWhereInputRecursive1']


class walk_missionsWhereInputRecursive1(TypedDict, total=False):
    """walk_missions arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    care_log_id: Union[_int, 'types.IntFilter']
    started_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    ended_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    total_distance_m: Union[None, _int, 'types.IntFilter']
    result: Union[None, _str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_log: 'care_logsRelationFilter'

    # should be noted that AND and NOT should be Union['walk_missionsWhereInputRecursive2', List['walk_missionsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['walk_missionsWhereInputRecursive2']
    OR: List['walk_missionsWhereInputRecursive2']
    NOT: List['walk_missionsWhereInputRecursive2']


class walk_missionsWhereInputRecursive2(TypedDict, total=False):
    """walk_missions arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    care_log_id: Union[_int, 'types.IntFilter']
    started_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    ended_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    total_distance_m: Union[None, _int, 'types.IntFilter']
    result: Union[None, _str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_log: 'care_logsRelationFilter'

    # should be noted that AND and NOT should be Union['walk_missionsWhereInputRecursive3', List['walk_missionsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['walk_missionsWhereInputRecursive3']
    OR: List['walk_missionsWhereInputRecursive3']
    NOT: List['walk_missionsWhereInputRecursive3']


class walk_missionsWhereInputRecursive3(TypedDict, total=False):
    """walk_missions arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    care_log_id: Union[_int, 'types.IntFilter']
    started_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    ended_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    total_distance_m: Union[None, _int, 'types.IntFilter']
    result: Union[None, _str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_log: 'care_logsRelationFilter'

    # should be noted that AND and NOT should be Union['walk_missionsWhereInputRecursive4', List['walk_missionsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['walk_missionsWhereInputRecursive4']
    OR: List['walk_missionsWhereInputRecursive4']
    NOT: List['walk_missionsWhereInputRecursive4']


class walk_missionsWhereInputRecursive4(TypedDict, total=False):
    """walk_missions arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    care_log_id: Union[_int, 'types.IntFilter']
    started_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    ended_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    total_distance_m: Union[None, _int, 'types.IntFilter']
    result: Union[None, _str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    care_log: 'care_logsRelationFilter'



# aggregate walk_missions types


    

class walk_missionsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """walk_missions arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    care_log_id: Union[_int, 'types.IntWithAggregatesFilter']
    started_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    ended_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    total_distance_m: Union[_int, 'types.IntWithAggregatesFilter']
    result: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['walk_missionsScalarWhereWithAggregatesInputRecursive1']
    OR: List['walk_missionsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['walk_missionsScalarWhereWithAggregatesInputRecursive1']


class walk_missionsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """walk_missions arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    care_log_id: Union[_int, 'types.IntWithAggregatesFilter']
    started_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    ended_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    total_distance_m: Union[_int, 'types.IntWithAggregatesFilter']
    result: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['walk_missionsScalarWhereWithAggregatesInputRecursive2']
    OR: List['walk_missionsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['walk_missionsScalarWhereWithAggregatesInputRecursive2']


class walk_missionsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """walk_missions arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    care_log_id: Union[_int, 'types.IntWithAggregatesFilter']
    started_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    ended_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    total_distance_m: Union[_int, 'types.IntWithAggregatesFilter']
    result: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['walk_missionsScalarWhereWithAggregatesInputRecursive3']
    OR: List['walk_missionsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['walk_missionsScalarWhereWithAggregatesInputRecursive3']


class walk_missionsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """walk_missions arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    care_log_id: Union[_int, 'types.IntWithAggregatesFilter']
    started_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    ended_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    total_distance_m: Union[_int, 'types.IntWithAggregatesFilter']
    result: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['walk_missionsScalarWhereWithAggregatesInputRecursive4']
    OR: List['walk_missionsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['walk_missionsScalarWhereWithAggregatesInputRecursive4']


class walk_missionsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """walk_missions arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    care_log_id: Union[_int, 'types.IntWithAggregatesFilter']
    started_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    ended_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    total_distance_m: Union[_int, 'types.IntWithAggregatesFilter']
    result: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class walk_missionsGroupByOutput(TypedDict, total=False):
    id: _int
    care_log_id: _int
    started_at: datetime.datetime
    ended_at: datetime.datetime
    total_distance_m: _int
    result: _str
    created_at: datetime.datetime
    _sum: 'walk_missionsSumAggregateOutput'
    _avg: 'walk_missionsAvgAggregateOutput'
    _min: 'walk_missionsMinAggregateOutput'
    _max: 'walk_missionsMaxAggregateOutput'
    _count: 'walk_missionsCountAggregateOutput'


class walk_missionsAvgAggregateOutput(TypedDict, total=False):
    """walk_missions output for aggregating averages"""
    id: float
    care_log_id: float
    total_distance_m: float


class walk_missionsSumAggregateOutput(TypedDict, total=False):
    """walk_missions output for aggregating sums"""
    id: _int
    care_log_id: _int
    total_distance_m: _int


class walk_missionsScalarAggregateOutput(TypedDict, total=False):
    """walk_missions output including scalar fields"""
    id: _int
    care_log_id: _int
    started_at: datetime.datetime
    ended_at: datetime.datetime
    total_distance_m: _int
    result: _str
    created_at: datetime.datetime


walk_missionsMinAggregateOutput = walk_missionsScalarAggregateOutput
walk_missionsMaxAggregateOutput = walk_missionsScalarAggregateOutput


class walk_missionsMaxAggregateInput(TypedDict, total=False):
    """walk_missions input for aggregating by max"""
    id: bool
    care_log_id: bool
    started_at: bool
    ended_at: bool
    total_distance_m: bool
    result: bool
    created_at: bool


class walk_missionsMinAggregateInput(TypedDict, total=False):
    """walk_missions input for aggregating by min"""
    id: bool
    care_log_id: bool
    started_at: bool
    ended_at: bool
    total_distance_m: bool
    result: bool
    created_at: bool


class walk_missionsNumberAggregateInput(TypedDict, total=False):
    """walk_missions input for aggregating numbers"""
    id: bool
    care_log_id: bool
    total_distance_m: bool


walk_missionsAvgAggregateInput = walk_missionsNumberAggregateInput
walk_missionsSumAggregateInput = walk_missionsNumberAggregateInput


walk_missionsCountAggregateInput = TypedDict(
    'walk_missionsCountAggregateInput',
    {
        'id': bool,
        'care_log_id': bool,
        'started_at': bool,
        'ended_at': bool,
        'total_distance_m': bool,
        'result': bool,
        'created_at': bool,
        '_all': bool,
    },
    total=False,
)

walk_missionsCountAggregateOutput = TypedDict(
    'walk_missionsCountAggregateOutput',
    {
        'id': int,
        'care_log_id': int,
        'started_at': int,
        'ended_at': int,
        'total_distance_m': int,
        'result': int,
        'created_at': int,
        '_all': int,
    },
    total=False,
)


walk_missionsKeys = Literal[
    'id',
    'care_log_id',
    'started_at',
    'ended_at',
    'total_distance_m',
    'result',
    'created_at',
    'care_log',
]
walk_missionsScalarFieldKeys = Literal[
    'id',
    'care_log_id',
    'started_at',
    'ended_at',
    'total_distance_m',
    'result',
    'created_at',
]
walk_missionsScalarFieldKeysT = TypeVar('walk_missionsScalarFieldKeysT', bound=walk_missionsScalarFieldKeys)

walk_missionsRelationalFieldKeys = Literal[
        'care_log',
    ]

# payment types

class paymentOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the payment create method"""
    id: _int
    user_id: _str
    firebase_uid: Optional[_str]
    stripe_payment_intent_id: Optional[_str]
    stripe_charge_id: Optional[_str]
    amount: Optional[_int]
    currency: Optional[_str]
    status: Optional[_str]
    created_at: Optional[datetime.datetime]
    user: 'usersCreateNestedWithoutRelationsInput'


class paymentCreateInput(paymentOptionalCreateInput):
    """Required arguments to the payment create method"""
    stripe_session_id: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class paymentOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the payment create method, without relations"""
    id: _int
    user_id: _str
    firebase_uid: Optional[_str]
    stripe_payment_intent_id: Optional[_str]
    stripe_charge_id: Optional[_str]
    amount: Optional[_int]
    currency: Optional[_str]
    status: Optional[_str]
    created_at: Optional[datetime.datetime]


class paymentCreateWithoutRelationsInput(paymentOptionalCreateWithoutRelationsInput):
    """Required arguments to the payment create method, without relations"""
    stripe_session_id: _str

class paymentConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'paymentCreateWithoutRelationsInput'
    where: 'paymentWhereUniqueInput'

class paymentCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'paymentCreateWithoutRelationsInput'
    connect: 'paymentWhereUniqueInput'
    connect_or_create: 'paymentConnectOrCreateWithoutRelationsInput'


class paymentCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['paymentCreateWithoutRelationsInput', List['paymentCreateWithoutRelationsInput']]
    connect: Union['paymentWhereUniqueInput', List['paymentWhereUniqueInput']]
    connect_or_create: Union['paymentConnectOrCreateWithoutRelationsInput', List['paymentConnectOrCreateWithoutRelationsInput']]

_paymentWhereUnique_id_Input = TypedDict(
    '_paymentWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_paymentWhereUnique_stripe_session_id_Input = TypedDict(
    '_paymentWhereUnique_stripe_session_id_Input',
    {
        'stripe_session_id': '_str',
    },
    total=True
)

paymentWhereUniqueInput = Union[
    '_paymentWhereUnique_id_Input',
    '_paymentWhereUnique_stripe_session_id_Input',
]


class paymentUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    firebase_uid: Optional[_str]
    stripe_session_id: _str
    stripe_payment_intent_id: Optional[_str]
    stripe_charge_id: Optional[_str]
    amount: Optional[Union[AtomicIntInput, _int]]
    currency: Optional[_str]
    status: Optional[_str]
    created_at: Optional[datetime.datetime]
    user: 'usersUpdateOneWithoutRelationsInput'


class paymentUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    firebase_uid: Optional[_str]
    stripe_session_id: _str
    stripe_payment_intent_id: Optional[_str]
    stripe_charge_id: Optional[_str]
    amount: Optional[Union[AtomicIntInput, _int]]
    currency: Optional[_str]
    status: Optional[_str]
    created_at: Optional[datetime.datetime]


class paymentUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['paymentCreateWithoutRelationsInput']
    connect: List['paymentWhereUniqueInput']
    connect_or_create: List['paymentConnectOrCreateWithoutRelationsInput']
    set: List['paymentWhereUniqueInput']
    disconnect: List['paymentWhereUniqueInput']
    delete: List['paymentWhereUniqueInput']

    # TODO
    # update: List['paymentUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['paymentUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['paymentScalarWhereInput']
    # upsert: List['paymentUpserteWithWhereUniqueWithoutRelationsInput']


class paymentUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'paymentCreateWithoutRelationsInput'
    connect: 'paymentWhereUniqueInput'
    connect_or_create: 'paymentConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'paymentUpdateInput'
    # upsert: 'paymentUpsertWithoutRelationsInput'


class paymentUpsertInput(TypedDict):
    create: 'paymentCreateInput'
    update: 'paymentUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_payment_id_OrderByInput = TypedDict(
    '_payment_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_payment_user_id_OrderByInput = TypedDict(
    '_payment_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_payment_firebase_uid_OrderByInput = TypedDict(
    '_payment_firebase_uid_OrderByInput',
    {
        'firebase_uid': 'SortOrder',
    },
    total=True
)

_payment_stripe_session_id_OrderByInput = TypedDict(
    '_payment_stripe_session_id_OrderByInput',
    {
        'stripe_session_id': 'SortOrder',
    },
    total=True
)

_payment_stripe_payment_intent_id_OrderByInput = TypedDict(
    '_payment_stripe_payment_intent_id_OrderByInput',
    {
        'stripe_payment_intent_id': 'SortOrder',
    },
    total=True
)

_payment_stripe_charge_id_OrderByInput = TypedDict(
    '_payment_stripe_charge_id_OrderByInput',
    {
        'stripe_charge_id': 'SortOrder',
    },
    total=True
)

_payment_amount_OrderByInput = TypedDict(
    '_payment_amount_OrderByInput',
    {
        'amount': 'SortOrder',
    },
    total=True
)

_payment_currency_OrderByInput = TypedDict(
    '_payment_currency_OrderByInput',
    {
        'currency': 'SortOrder',
    },
    total=True
)

_payment_status_OrderByInput = TypedDict(
    '_payment_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_payment_created_at_OrderByInput = TypedDict(
    '_payment_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_payment_RelevanceInner = TypedDict(
    '_payment_RelevanceInner',
    {
        'fields': 'List[paymentScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_payment_RelevanceOrderByInput = TypedDict(
    '_payment_RelevanceOrderByInput',
    {
        '_relevance': '_payment_RelevanceInner',
    },
    total=True
)

paymentOrderByInput = Union[
    '_payment_id_OrderByInput',
    '_payment_user_id_OrderByInput',
    '_payment_firebase_uid_OrderByInput',
    '_payment_stripe_session_id_OrderByInput',
    '_payment_stripe_payment_intent_id_OrderByInput',
    '_payment_stripe_charge_id_OrderByInput',
    '_payment_amount_OrderByInput',
    '_payment_currency_OrderByInput',
    '_payment_status_OrderByInput',
    '_payment_created_at_OrderByInput',
    '_payment_RelevanceOrderByInput',
]



# recursive payment types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

paymentRelationFilter = TypedDict(
    'paymentRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class paymentListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class paymentInclude(TypedDict, total=False):
    """payment relational arguments"""
    user: Union[bool, 'usersArgsFrompayment']


    

class usersIncludeFrompayment(TypedDict, total=False):
    """Relational arguments for payment"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFrompaymentRecursive1']
    message_logs: Union[bool, 'FindManymessage_logsArgsFrompaymentRecursive1']
    payment: Union[bool, 'FindManypaymentArgsFrompaymentRecursive1']


class usersIncludeFrompaymentRecursive1(TypedDict, total=False):
    """Relational arguments for payment"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFrompaymentRecursive2']
    message_logs: Union[bool, 'FindManymessage_logsArgsFrompaymentRecursive2']
    payment: Union[bool, 'FindManypaymentArgsFrompaymentRecursive2']


class usersIncludeFrompaymentRecursive2(TypedDict, total=False):
    """Relational arguments for payment"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFrompaymentRecursive3']
    message_logs: Union[bool, 'FindManymessage_logsArgsFrompaymentRecursive3']
    payment: Union[bool, 'FindManypaymentArgsFrompaymentRecursive3']


class usersIncludeFrompaymentRecursive3(TypedDict, total=False):
    """Relational arguments for payment"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFrompaymentRecursive4']
    message_logs: Union[bool, 'FindManymessage_logsArgsFrompaymentRecursive4']
    payment: Union[bool, 'FindManypaymentArgsFrompaymentRecursive4']


class usersIncludeFrompaymentRecursive4(TypedDict, total=False):
    """Relational arguments for payment"""

    

class usersArgsFrompayment(TypedDict, total=False):
    """Arguments for payment"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFrompaymentRecursive1(TypedDict, total=False):
    """Arguments for payment"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFrompaymentRecursive2(TypedDict, total=False):
    """Arguments for payment"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFrompaymentRecursive3(TypedDict, total=False):
    """Arguments for payment"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFrompaymentRecursive4(TypedDict, total=False):
    """Arguments for payment"""
    
    

class FindManyusersArgsFrompayment(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFrompaymentRecursive1(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFrompaymentRecursive2(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFrompaymentRecursive3(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFrompaymentRecursive4(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    
    

class care_settingsIncludeFrompayment(TypedDict, total=False):
    """Relational arguments for payment"""
    user: Union[bool, 'usersArgsFrompaymentRecursive1']
    care_logs: Union[bool, 'FindManycare_logsArgsFrompaymentRecursive1']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFrompaymentRecursive1']


class care_settingsIncludeFrompaymentRecursive1(TypedDict, total=False):
    """Relational arguments for payment"""
    user: Union[bool, 'usersArgsFrompaymentRecursive2']
    care_logs: Union[bool, 'FindManycare_logsArgsFrompaymentRecursive2']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFrompaymentRecursive2']


class care_settingsIncludeFrompaymentRecursive2(TypedDict, total=False):
    """Relational arguments for payment"""
    user: Union[bool, 'usersArgsFrompaymentRecursive3']
    care_logs: Union[bool, 'FindManycare_logsArgsFrompaymentRecursive3']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFrompaymentRecursive3']


class care_settingsIncludeFrompaymentRecursive3(TypedDict, total=False):
    """Relational arguments for payment"""
    user: Union[bool, 'usersArgsFrompaymentRecursive4']
    care_logs: Union[bool, 'FindManycare_logsArgsFrompaymentRecursive4']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFrompaymentRecursive4']


class care_settingsIncludeFrompaymentRecursive4(TypedDict, total=False):
    """Relational arguments for payment"""

    

class care_settingsArgsFrompayment(TypedDict, total=False):
    """Arguments for payment"""
    include: 'care_settingsIncludeFromcare_settingsRecursive1'


class care_settingsArgsFrompaymentRecursive1(TypedDict, total=False):
    """Arguments for payment"""
    include: 'care_settingsIncludeFromcare_settingsRecursive2'


class care_settingsArgsFrompaymentRecursive2(TypedDict, total=False):
    """Arguments for payment"""
    include: 'care_settingsIncludeFromcare_settingsRecursive3'


class care_settingsArgsFrompaymentRecursive3(TypedDict, total=False):
    """Arguments for payment"""
    include: 'care_settingsIncludeFromcare_settingsRecursive4'


class care_settingsArgsFrompaymentRecursive4(TypedDict, total=False):
    """Arguments for payment"""
    
    

class FindManycare_settingsArgsFrompayment(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive1'


class FindManycare_settingsArgsFrompaymentRecursive1(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive2'


class FindManycare_settingsArgsFrompaymentRecursive2(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive3'


class FindManycare_settingsArgsFrompaymentRecursive3(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive4'


class FindManycare_settingsArgsFrompaymentRecursive4(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    
    

class care_logsIncludeFrompayment(TypedDict, total=False):
    """Relational arguments for payment"""
    care_setting: Union[bool, 'care_settingsArgsFrompaymentRecursive1']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFrompaymentRecursive1']


class care_logsIncludeFrompaymentRecursive1(TypedDict, total=False):
    """Relational arguments for payment"""
    care_setting: Union[bool, 'care_settingsArgsFrompaymentRecursive2']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFrompaymentRecursive2']


class care_logsIncludeFrompaymentRecursive2(TypedDict, total=False):
    """Relational arguments for payment"""
    care_setting: Union[bool, 'care_settingsArgsFrompaymentRecursive3']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFrompaymentRecursive3']


class care_logsIncludeFrompaymentRecursive3(TypedDict, total=False):
    """Relational arguments for payment"""
    care_setting: Union[bool, 'care_settingsArgsFrompaymentRecursive4']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFrompaymentRecursive4']


class care_logsIncludeFrompaymentRecursive4(TypedDict, total=False):
    """Relational arguments for payment"""

    

class care_logsArgsFrompayment(TypedDict, total=False):
    """Arguments for payment"""
    include: 'care_logsIncludeFromcare_logsRecursive1'


class care_logsArgsFrompaymentRecursive1(TypedDict, total=False):
    """Arguments for payment"""
    include: 'care_logsIncludeFromcare_logsRecursive2'


class care_logsArgsFrompaymentRecursive2(TypedDict, total=False):
    """Arguments for payment"""
    include: 'care_logsIncludeFromcare_logsRecursive3'


class care_logsArgsFrompaymentRecursive3(TypedDict, total=False):
    """Arguments for payment"""
    include: 'care_logsIncludeFromcare_logsRecursive4'


class care_logsArgsFrompaymentRecursive4(TypedDict, total=False):
    """Arguments for payment"""
    
    

class FindManycare_logsArgsFrompayment(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive1'


class FindManycare_logsArgsFrompaymentRecursive1(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive2'


class FindManycare_logsArgsFrompaymentRecursive2(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive3'


class FindManycare_logsArgsFrompaymentRecursive3(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive4'


class FindManycare_logsArgsFrompaymentRecursive4(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    
    

class reflection_notesIncludeFrompayment(TypedDict, total=False):
    """Relational arguments for payment"""
    care_setting: Union[bool, 'care_settingsArgsFrompaymentRecursive1']


class reflection_notesIncludeFrompaymentRecursive1(TypedDict, total=False):
    """Relational arguments for payment"""
    care_setting: Union[bool, 'care_settingsArgsFrompaymentRecursive2']


class reflection_notesIncludeFrompaymentRecursive2(TypedDict, total=False):
    """Relational arguments for payment"""
    care_setting: Union[bool, 'care_settingsArgsFrompaymentRecursive3']


class reflection_notesIncludeFrompaymentRecursive3(TypedDict, total=False):
    """Relational arguments for payment"""
    care_setting: Union[bool, 'care_settingsArgsFrompaymentRecursive4']


class reflection_notesIncludeFrompaymentRecursive4(TypedDict, total=False):
    """Relational arguments for payment"""

    

class reflection_notesArgsFrompayment(TypedDict, total=False):
    """Arguments for payment"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive1'


class reflection_notesArgsFrompaymentRecursive1(TypedDict, total=False):
    """Arguments for payment"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive2'


class reflection_notesArgsFrompaymentRecursive2(TypedDict, total=False):
    """Arguments for payment"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive3'


class reflection_notesArgsFrompaymentRecursive3(TypedDict, total=False):
    """Arguments for payment"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive4'


class reflection_notesArgsFrompaymentRecursive4(TypedDict, total=False):
    """Arguments for payment"""
    
    

class FindManyreflection_notesArgsFrompayment(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive1'


class FindManyreflection_notesArgsFrompaymentRecursive1(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive2'


class FindManyreflection_notesArgsFrompaymentRecursive2(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive3'


class FindManyreflection_notesArgsFrompaymentRecursive3(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive4'


class FindManyreflection_notesArgsFrompaymentRecursive4(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    
    

class message_logsIncludeFrompayment(TypedDict, total=False):
    """Relational arguments for payment"""
    user: Union[bool, 'usersArgsFrompaymentRecursive1']


class message_logsIncludeFrompaymentRecursive1(TypedDict, total=False):
    """Relational arguments for payment"""
    user: Union[bool, 'usersArgsFrompaymentRecursive2']


class message_logsIncludeFrompaymentRecursive2(TypedDict, total=False):
    """Relational arguments for payment"""
    user: Union[bool, 'usersArgsFrompaymentRecursive3']


class message_logsIncludeFrompaymentRecursive3(TypedDict, total=False):
    """Relational arguments for payment"""
    user: Union[bool, 'usersArgsFrompaymentRecursive4']


class message_logsIncludeFrompaymentRecursive4(TypedDict, total=False):
    """Relational arguments for payment"""

    

class message_logsArgsFrompayment(TypedDict, total=False):
    """Arguments for payment"""
    include: 'message_logsIncludeFrommessage_logsRecursive1'


class message_logsArgsFrompaymentRecursive1(TypedDict, total=False):
    """Arguments for payment"""
    include: 'message_logsIncludeFrommessage_logsRecursive2'


class message_logsArgsFrompaymentRecursive2(TypedDict, total=False):
    """Arguments for payment"""
    include: 'message_logsIncludeFrommessage_logsRecursive3'


class message_logsArgsFrompaymentRecursive3(TypedDict, total=False):
    """Arguments for payment"""
    include: 'message_logsIncludeFrommessage_logsRecursive4'


class message_logsArgsFrompaymentRecursive4(TypedDict, total=False):
    """Arguments for payment"""
    
    

class FindManymessage_logsArgsFrompayment(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive1'


class FindManymessage_logsArgsFrompaymentRecursive1(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive2'


class FindManymessage_logsArgsFrompaymentRecursive2(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive3'


class FindManymessage_logsArgsFrompaymentRecursive3(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive4'


class FindManymessage_logsArgsFrompaymentRecursive4(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    
    

class walk_missionsIncludeFrompayment(TypedDict, total=False):
    """Relational arguments for payment"""
    care_log: Union[bool, 'care_logsArgsFrompaymentRecursive1']


class walk_missionsIncludeFrompaymentRecursive1(TypedDict, total=False):
    """Relational arguments for payment"""
    care_log: Union[bool, 'care_logsArgsFrompaymentRecursive2']


class walk_missionsIncludeFrompaymentRecursive2(TypedDict, total=False):
    """Relational arguments for payment"""
    care_log: Union[bool, 'care_logsArgsFrompaymentRecursive3']


class walk_missionsIncludeFrompaymentRecursive3(TypedDict, total=False):
    """Relational arguments for payment"""
    care_log: Union[bool, 'care_logsArgsFrompaymentRecursive4']


class walk_missionsIncludeFrompaymentRecursive4(TypedDict, total=False):
    """Relational arguments for payment"""

    

class walk_missionsArgsFrompayment(TypedDict, total=False):
    """Arguments for payment"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive1'


class walk_missionsArgsFrompaymentRecursive1(TypedDict, total=False):
    """Arguments for payment"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive2'


class walk_missionsArgsFrompaymentRecursive2(TypedDict, total=False):
    """Arguments for payment"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive3'


class walk_missionsArgsFrompaymentRecursive3(TypedDict, total=False):
    """Arguments for payment"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive4'


class walk_missionsArgsFrompaymentRecursive4(TypedDict, total=False):
    """Arguments for payment"""
    
    

class FindManywalk_missionsArgsFrompayment(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive1'


class FindManywalk_missionsArgsFrompaymentRecursive1(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive2'


class FindManywalk_missionsArgsFrompaymentRecursive2(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive3'


class FindManywalk_missionsArgsFrompaymentRecursive3(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive4'


class FindManywalk_missionsArgsFrompaymentRecursive4(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    
    

class paymentIncludeFrompayment(TypedDict, total=False):
    """Relational arguments for payment"""
    user: Union[bool, 'usersArgsFrompaymentRecursive1']


class paymentIncludeFrompaymentRecursive1(TypedDict, total=False):
    """Relational arguments for payment"""
    user: Union[bool, 'usersArgsFrompaymentRecursive2']


class paymentIncludeFrompaymentRecursive2(TypedDict, total=False):
    """Relational arguments for payment"""
    user: Union[bool, 'usersArgsFrompaymentRecursive3']


class paymentIncludeFrompaymentRecursive3(TypedDict, total=False):
    """Relational arguments for payment"""
    user: Union[bool, 'usersArgsFrompaymentRecursive4']


class paymentIncludeFrompaymentRecursive4(TypedDict, total=False):
    """Relational arguments for payment"""

    

class paymentArgsFrompayment(TypedDict, total=False):
    """Arguments for payment"""
    include: 'paymentIncludeFrompaymentRecursive1'


class paymentArgsFrompaymentRecursive1(TypedDict, total=False):
    """Arguments for payment"""
    include: 'paymentIncludeFrompaymentRecursive2'


class paymentArgsFrompaymentRecursive2(TypedDict, total=False):
    """Arguments for payment"""
    include: 'paymentIncludeFrompaymentRecursive3'


class paymentArgsFrompaymentRecursive3(TypedDict, total=False):
    """Arguments for payment"""
    include: 'paymentIncludeFrompaymentRecursive4'


class paymentArgsFrompaymentRecursive4(TypedDict, total=False):
    """Arguments for payment"""
    
    

class FindManypaymentArgsFrompayment(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive1'


class FindManypaymentArgsFrompaymentRecursive1(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive2'


class FindManypaymentArgsFrompaymentRecursive2(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive3'


class FindManypaymentArgsFrompaymentRecursive3(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive4'


class FindManypaymentArgsFrompaymentRecursive4(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    
    

class webhook_eventsIncludeFrompayment(TypedDict, total=False):
    """Relational arguments for payment"""


class webhook_eventsIncludeFrompaymentRecursive1(TypedDict, total=False):
    """Relational arguments for payment"""


class webhook_eventsIncludeFrompaymentRecursive2(TypedDict, total=False):
    """Relational arguments for payment"""


class webhook_eventsIncludeFrompaymentRecursive3(TypedDict, total=False):
    """Relational arguments for payment"""


class webhook_eventsIncludeFrompaymentRecursive4(TypedDict, total=False):
    """Relational arguments for payment"""

    

class webhook_eventsArgsFrompayment(TypedDict, total=False):
    """Arguments for payment"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive1'


class webhook_eventsArgsFrompaymentRecursive1(TypedDict, total=False):
    """Arguments for payment"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive2'


class webhook_eventsArgsFrompaymentRecursive2(TypedDict, total=False):
    """Arguments for payment"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive3'


class webhook_eventsArgsFrompaymentRecursive3(TypedDict, total=False):
    """Arguments for payment"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive4'


class webhook_eventsArgsFrompaymentRecursive4(TypedDict, total=False):
    """Arguments for payment"""
    
    

class FindManywebhook_eventsArgsFrompayment(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive1'


class FindManywebhook_eventsArgsFrompaymentRecursive1(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive2'


class FindManywebhook_eventsArgsFrompaymentRecursive2(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive3'


class FindManywebhook_eventsArgsFrompaymentRecursive3(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive4'


class FindManywebhook_eventsArgsFrompaymentRecursive4(TypedDict, total=False):
    """Arguments for payment"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    


FindManypaymentArgs = FindManypaymentArgsFrompayment
FindFirstpaymentArgs = FindManypaymentArgsFrompayment


    

class paymentWhereInput(TypedDict, total=False):
    """payment arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user_id: Union[_str, 'types.StringFilter']
    firebase_uid: Union[None, _str, 'types.StringFilter']
    stripe_session_id: Union[_str, 'types.StringFilter']
    stripe_payment_intent_id: Union[None, _str, 'types.StringFilter']
    stripe_charge_id: Union[None, _str, 'types.StringFilter']
    amount: Union[None, _int, 'types.IntFilter']
    currency: Union[None, _str, 'types.StringFilter']
    status: Union[None, _str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    user: 'usersRelationFilter'

    # should be noted that AND and NOT should be Union['paymentWhereInputRecursive1', List['paymentWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['paymentWhereInputRecursive1']
    OR: List['paymentWhereInputRecursive1']
    NOT: List['paymentWhereInputRecursive1']


class paymentWhereInputRecursive1(TypedDict, total=False):
    """payment arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user_id: Union[_str, 'types.StringFilter']
    firebase_uid: Union[None, _str, 'types.StringFilter']
    stripe_session_id: Union[_str, 'types.StringFilter']
    stripe_payment_intent_id: Union[None, _str, 'types.StringFilter']
    stripe_charge_id: Union[None, _str, 'types.StringFilter']
    amount: Union[None, _int, 'types.IntFilter']
    currency: Union[None, _str, 'types.StringFilter']
    status: Union[None, _str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    user: 'usersRelationFilter'

    # should be noted that AND and NOT should be Union['paymentWhereInputRecursive2', List['paymentWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['paymentWhereInputRecursive2']
    OR: List['paymentWhereInputRecursive2']
    NOT: List['paymentWhereInputRecursive2']


class paymentWhereInputRecursive2(TypedDict, total=False):
    """payment arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user_id: Union[_str, 'types.StringFilter']
    firebase_uid: Union[None, _str, 'types.StringFilter']
    stripe_session_id: Union[_str, 'types.StringFilter']
    stripe_payment_intent_id: Union[None, _str, 'types.StringFilter']
    stripe_charge_id: Union[None, _str, 'types.StringFilter']
    amount: Union[None, _int, 'types.IntFilter']
    currency: Union[None, _str, 'types.StringFilter']
    status: Union[None, _str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    user: 'usersRelationFilter'

    # should be noted that AND and NOT should be Union['paymentWhereInputRecursive3', List['paymentWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['paymentWhereInputRecursive3']
    OR: List['paymentWhereInputRecursive3']
    NOT: List['paymentWhereInputRecursive3']


class paymentWhereInputRecursive3(TypedDict, total=False):
    """payment arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user_id: Union[_str, 'types.StringFilter']
    firebase_uid: Union[None, _str, 'types.StringFilter']
    stripe_session_id: Union[_str, 'types.StringFilter']
    stripe_payment_intent_id: Union[None, _str, 'types.StringFilter']
    stripe_charge_id: Union[None, _str, 'types.StringFilter']
    amount: Union[None, _int, 'types.IntFilter']
    currency: Union[None, _str, 'types.StringFilter']
    status: Union[None, _str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    user: 'usersRelationFilter'

    # should be noted that AND and NOT should be Union['paymentWhereInputRecursive4', List['paymentWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['paymentWhereInputRecursive4']
    OR: List['paymentWhereInputRecursive4']
    NOT: List['paymentWhereInputRecursive4']


class paymentWhereInputRecursive4(TypedDict, total=False):
    """payment arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user_id: Union[_str, 'types.StringFilter']
    firebase_uid: Union[None, _str, 'types.StringFilter']
    stripe_session_id: Union[_str, 'types.StringFilter']
    stripe_payment_intent_id: Union[None, _str, 'types.StringFilter']
    stripe_charge_id: Union[None, _str, 'types.StringFilter']
    amount: Union[None, _int, 'types.IntFilter']
    currency: Union[None, _str, 'types.StringFilter']
    status: Union[None, _str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    user: 'usersRelationFilter'



# aggregate payment types


    

class paymentScalarWhereWithAggregatesInput(TypedDict, total=False):
    """payment arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    firebase_uid: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_session_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_payment_intent_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_charge_id: Union[_str, 'types.StringWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    currency: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['paymentScalarWhereWithAggregatesInputRecursive1']
    OR: List['paymentScalarWhereWithAggregatesInputRecursive1']
    NOT: List['paymentScalarWhereWithAggregatesInputRecursive1']


class paymentScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """payment arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    firebase_uid: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_session_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_payment_intent_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_charge_id: Union[_str, 'types.StringWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    currency: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['paymentScalarWhereWithAggregatesInputRecursive2']
    OR: List['paymentScalarWhereWithAggregatesInputRecursive2']
    NOT: List['paymentScalarWhereWithAggregatesInputRecursive2']


class paymentScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """payment arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    firebase_uid: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_session_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_payment_intent_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_charge_id: Union[_str, 'types.StringWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    currency: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['paymentScalarWhereWithAggregatesInputRecursive3']
    OR: List['paymentScalarWhereWithAggregatesInputRecursive3']
    NOT: List['paymentScalarWhereWithAggregatesInputRecursive3']


class paymentScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """payment arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    firebase_uid: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_session_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_payment_intent_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_charge_id: Union[_str, 'types.StringWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    currency: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['paymentScalarWhereWithAggregatesInputRecursive4']
    OR: List['paymentScalarWhereWithAggregatesInputRecursive4']
    NOT: List['paymentScalarWhereWithAggregatesInputRecursive4']


class paymentScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """payment arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    firebase_uid: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_session_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_payment_intent_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_charge_id: Union[_str, 'types.StringWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    currency: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class paymentGroupByOutput(TypedDict, total=False):
    id: _int
    user_id: _str
    firebase_uid: _str
    stripe_session_id: _str
    stripe_payment_intent_id: _str
    stripe_charge_id: _str
    amount: _int
    currency: _str
    status: _str
    created_at: datetime.datetime
    _sum: 'paymentSumAggregateOutput'
    _avg: 'paymentAvgAggregateOutput'
    _min: 'paymentMinAggregateOutput'
    _max: 'paymentMaxAggregateOutput'
    _count: 'paymentCountAggregateOutput'


class paymentAvgAggregateOutput(TypedDict, total=False):
    """payment output for aggregating averages"""
    id: float
    amount: float


class paymentSumAggregateOutput(TypedDict, total=False):
    """payment output for aggregating sums"""
    id: _int
    amount: _int


class paymentScalarAggregateOutput(TypedDict, total=False):
    """payment output including scalar fields"""
    id: _int
    user_id: _str
    firebase_uid: _str
    stripe_session_id: _str
    stripe_payment_intent_id: _str
    stripe_charge_id: _str
    amount: _int
    currency: _str
    status: _str
    created_at: datetime.datetime


paymentMinAggregateOutput = paymentScalarAggregateOutput
paymentMaxAggregateOutput = paymentScalarAggregateOutput


class paymentMaxAggregateInput(TypedDict, total=False):
    """payment input for aggregating by max"""
    id: bool
    user_id: bool
    firebase_uid: bool
    stripe_session_id: bool
    stripe_payment_intent_id: bool
    stripe_charge_id: bool
    amount: bool
    currency: bool
    status: bool
    created_at: bool


class paymentMinAggregateInput(TypedDict, total=False):
    """payment input for aggregating by min"""
    id: bool
    user_id: bool
    firebase_uid: bool
    stripe_session_id: bool
    stripe_payment_intent_id: bool
    stripe_charge_id: bool
    amount: bool
    currency: bool
    status: bool
    created_at: bool


class paymentNumberAggregateInput(TypedDict, total=False):
    """payment input for aggregating numbers"""
    id: bool
    amount: bool


paymentAvgAggregateInput = paymentNumberAggregateInput
paymentSumAggregateInput = paymentNumberAggregateInput


paymentCountAggregateInput = TypedDict(
    'paymentCountAggregateInput',
    {
        'id': bool,
        'user_id': bool,
        'firebase_uid': bool,
        'stripe_session_id': bool,
        'stripe_payment_intent_id': bool,
        'stripe_charge_id': bool,
        'amount': bool,
        'currency': bool,
        'status': bool,
        'created_at': bool,
        '_all': bool,
    },
    total=False,
)

paymentCountAggregateOutput = TypedDict(
    'paymentCountAggregateOutput',
    {
        'id': int,
        'user_id': int,
        'firebase_uid': int,
        'stripe_session_id': int,
        'stripe_payment_intent_id': int,
        'stripe_charge_id': int,
        'amount': int,
        'currency': int,
        'status': int,
        'created_at': int,
        '_all': int,
    },
    total=False,
)


paymentKeys = Literal[
    'id',
    'user_id',
    'firebase_uid',
    'stripe_session_id',
    'stripe_payment_intent_id',
    'stripe_charge_id',
    'amount',
    'currency',
    'status',
    'created_at',
    'user',
]
paymentScalarFieldKeys = Literal[
    'id',
    'user_id',
    'firebase_uid',
    'stripe_session_id',
    'stripe_payment_intent_id',
    'stripe_charge_id',
    'amount',
    'currency',
    'status',
    'created_at',
]
paymentScalarFieldKeysT = TypeVar('paymentScalarFieldKeysT', bound=paymentScalarFieldKeys)

paymentRelationalFieldKeys = Literal[
        'user',
    ]

# webhook_events types

class webhook_eventsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the webhook_events create method"""
    event_type: Optional[_str]
    stripe_session_id: Optional[_str]
    stripe_payment_intent_id: Optional[_str]
    customer_email: Optional[_str]
    amount: Optional[_int]
    currency: Optional[_str]
    payment_status: Optional[_str]
    payload: Optional['fields.Json']
    received_at: Optional[datetime.datetime]
    processed: _bool
    error_message: Optional[_str]


class webhook_eventsCreateInput(webhook_eventsOptionalCreateInput):
    """Required arguments to the webhook_events create method"""
    id: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class webhook_eventsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the webhook_events create method, without relations"""
    event_type: Optional[_str]
    stripe_session_id: Optional[_str]
    stripe_payment_intent_id: Optional[_str]
    customer_email: Optional[_str]
    amount: Optional[_int]
    currency: Optional[_str]
    payment_status: Optional[_str]
    payload: Optional['fields.Json']
    received_at: Optional[datetime.datetime]
    processed: _bool
    error_message: Optional[_str]


class webhook_eventsCreateWithoutRelationsInput(webhook_eventsOptionalCreateWithoutRelationsInput):
    """Required arguments to the webhook_events create method, without relations"""
    id: _str

class webhook_eventsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'webhook_eventsCreateWithoutRelationsInput'
    where: 'webhook_eventsWhereUniqueInput'

class webhook_eventsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'webhook_eventsCreateWithoutRelationsInput'
    connect: 'webhook_eventsWhereUniqueInput'
    connect_or_create: 'webhook_eventsConnectOrCreateWithoutRelationsInput'


class webhook_eventsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['webhook_eventsCreateWithoutRelationsInput', List['webhook_eventsCreateWithoutRelationsInput']]
    connect: Union['webhook_eventsWhereUniqueInput', List['webhook_eventsWhereUniqueInput']]
    connect_or_create: Union['webhook_eventsConnectOrCreateWithoutRelationsInput', List['webhook_eventsConnectOrCreateWithoutRelationsInput']]

_webhook_eventsWhereUnique_id_Input = TypedDict(
    '_webhook_eventsWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

webhook_eventsWhereUniqueInput = _webhook_eventsWhereUnique_id_Input


class webhook_eventsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    event_type: Optional[_str]
    stripe_session_id: Optional[_str]
    stripe_payment_intent_id: Optional[_str]
    customer_email: Optional[_str]
    amount: Optional[Union[AtomicIntInput, _int]]
    currency: Optional[_str]
    payment_status: Optional[_str]
    payload: Optional['fields.Json']
    received_at: Optional[datetime.datetime]
    processed: _bool
    error_message: Optional[_str]


class webhook_eventsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    event_type: Optional[_str]
    stripe_session_id: Optional[_str]
    stripe_payment_intent_id: Optional[_str]
    customer_email: Optional[_str]
    amount: Optional[Union[AtomicIntInput, _int]]
    currency: Optional[_str]
    payment_status: Optional[_str]
    payload: Optional['fields.Json']
    received_at: Optional[datetime.datetime]
    processed: _bool
    error_message: Optional[_str]


class webhook_eventsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['webhook_eventsCreateWithoutRelationsInput']
    connect: List['webhook_eventsWhereUniqueInput']
    connect_or_create: List['webhook_eventsConnectOrCreateWithoutRelationsInput']
    set: List['webhook_eventsWhereUniqueInput']
    disconnect: List['webhook_eventsWhereUniqueInput']
    delete: List['webhook_eventsWhereUniqueInput']

    # TODO
    # update: List['webhook_eventsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['webhook_eventsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['webhook_eventsScalarWhereInput']
    # upsert: List['webhook_eventsUpserteWithWhereUniqueWithoutRelationsInput']


class webhook_eventsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'webhook_eventsCreateWithoutRelationsInput'
    connect: 'webhook_eventsWhereUniqueInput'
    connect_or_create: 'webhook_eventsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'webhook_eventsUpdateInput'
    # upsert: 'webhook_eventsUpsertWithoutRelationsInput'


class webhook_eventsUpsertInput(TypedDict):
    create: 'webhook_eventsCreateInput'
    update: 'webhook_eventsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_webhook_events_id_OrderByInput = TypedDict(
    '_webhook_events_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_webhook_events_event_type_OrderByInput = TypedDict(
    '_webhook_events_event_type_OrderByInput',
    {
        'event_type': 'SortOrder',
    },
    total=True
)

_webhook_events_stripe_session_id_OrderByInput = TypedDict(
    '_webhook_events_stripe_session_id_OrderByInput',
    {
        'stripe_session_id': 'SortOrder',
    },
    total=True
)

_webhook_events_stripe_payment_intent_id_OrderByInput = TypedDict(
    '_webhook_events_stripe_payment_intent_id_OrderByInput',
    {
        'stripe_payment_intent_id': 'SortOrder',
    },
    total=True
)

_webhook_events_customer_email_OrderByInput = TypedDict(
    '_webhook_events_customer_email_OrderByInput',
    {
        'customer_email': 'SortOrder',
    },
    total=True
)

_webhook_events_amount_OrderByInput = TypedDict(
    '_webhook_events_amount_OrderByInput',
    {
        'amount': 'SortOrder',
    },
    total=True
)

_webhook_events_currency_OrderByInput = TypedDict(
    '_webhook_events_currency_OrderByInput',
    {
        'currency': 'SortOrder',
    },
    total=True
)

_webhook_events_payment_status_OrderByInput = TypedDict(
    '_webhook_events_payment_status_OrderByInput',
    {
        'payment_status': 'SortOrder',
    },
    total=True
)

_webhook_events_payload_OrderByInput = TypedDict(
    '_webhook_events_payload_OrderByInput',
    {
        'payload': 'SortOrder',
    },
    total=True
)

_webhook_events_received_at_OrderByInput = TypedDict(
    '_webhook_events_received_at_OrderByInput',
    {
        'received_at': 'SortOrder',
    },
    total=True
)

_webhook_events_processed_OrderByInput = TypedDict(
    '_webhook_events_processed_OrderByInput',
    {
        'processed': 'SortOrder',
    },
    total=True
)

_webhook_events_error_message_OrderByInput = TypedDict(
    '_webhook_events_error_message_OrderByInput',
    {
        'error_message': 'SortOrder',
    },
    total=True
)

_webhook_events_RelevanceInner = TypedDict(
    '_webhook_events_RelevanceInner',
    {
        'fields': 'List[webhook_eventsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_webhook_events_RelevanceOrderByInput = TypedDict(
    '_webhook_events_RelevanceOrderByInput',
    {
        '_relevance': '_webhook_events_RelevanceInner',
    },
    total=True
)

webhook_eventsOrderByInput = Union[
    '_webhook_events_id_OrderByInput',
    '_webhook_events_event_type_OrderByInput',
    '_webhook_events_stripe_session_id_OrderByInput',
    '_webhook_events_stripe_payment_intent_id_OrderByInput',
    '_webhook_events_customer_email_OrderByInput',
    '_webhook_events_amount_OrderByInput',
    '_webhook_events_currency_OrderByInput',
    '_webhook_events_payment_status_OrderByInput',
    '_webhook_events_payload_OrderByInput',
    '_webhook_events_received_at_OrderByInput',
    '_webhook_events_processed_OrderByInput',
    '_webhook_events_error_message_OrderByInput',
    '_webhook_events_RelevanceOrderByInput',
]



# recursive webhook_events types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

webhook_eventsRelationFilter = TypedDict(
    'webhook_eventsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class webhook_eventsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class webhook_eventsInclude(TypedDict, total=False):
    """webhook_events relational arguments"""


    

class usersIncludeFromwebhook_events(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromwebhook_eventsRecursive1']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromwebhook_eventsRecursive1']
    payment: Union[bool, 'FindManypaymentArgsFromwebhook_eventsRecursive1']


class usersIncludeFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromwebhook_eventsRecursive2']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromwebhook_eventsRecursive2']
    payment: Union[bool, 'FindManypaymentArgsFromwebhook_eventsRecursive2']


class usersIncludeFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromwebhook_eventsRecursive3']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromwebhook_eventsRecursive3']
    payment: Union[bool, 'FindManypaymentArgsFromwebhook_eventsRecursive3']


class usersIncludeFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    care_settings: Union[bool, 'FindManycare_settingsArgsFromwebhook_eventsRecursive4']
    message_logs: Union[bool, 'FindManymessage_logsArgsFromwebhook_eventsRecursive4']
    payment: Union[bool, 'FindManypaymentArgsFromwebhook_eventsRecursive4']


class usersIncludeFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Relational arguments for webhook_events"""

    

class usersArgsFromwebhook_events(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Arguments for webhook_events"""
    
    

class FindManyusersArgsFromwebhook_events(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    
    

class care_settingsIncludeFromwebhook_events(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    user: Union[bool, 'usersArgsFromwebhook_eventsRecursive1']
    care_logs: Union[bool, 'FindManycare_logsArgsFromwebhook_eventsRecursive1']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromwebhook_eventsRecursive1']


class care_settingsIncludeFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    user: Union[bool, 'usersArgsFromwebhook_eventsRecursive2']
    care_logs: Union[bool, 'FindManycare_logsArgsFromwebhook_eventsRecursive2']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromwebhook_eventsRecursive2']


class care_settingsIncludeFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    user: Union[bool, 'usersArgsFromwebhook_eventsRecursive3']
    care_logs: Union[bool, 'FindManycare_logsArgsFromwebhook_eventsRecursive3']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromwebhook_eventsRecursive3']


class care_settingsIncludeFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    user: Union[bool, 'usersArgsFromwebhook_eventsRecursive4']
    care_logs: Union[bool, 'FindManycare_logsArgsFromwebhook_eventsRecursive4']
    reflection_notes: Union[bool, 'FindManyreflection_notesArgsFromwebhook_eventsRecursive4']


class care_settingsIncludeFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Relational arguments for webhook_events"""

    

class care_settingsArgsFromwebhook_events(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'care_settingsIncludeFromcare_settingsRecursive1'


class care_settingsArgsFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'care_settingsIncludeFromcare_settingsRecursive2'


class care_settingsArgsFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'care_settingsIncludeFromcare_settingsRecursive3'


class care_settingsArgsFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'care_settingsIncludeFromcare_settingsRecursive4'


class care_settingsArgsFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Arguments for webhook_events"""
    
    

class FindManycare_settingsArgsFromwebhook_events(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive1'


class FindManycare_settingsArgsFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive2'


class FindManycare_settingsArgsFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive3'


class FindManycare_settingsArgsFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    include: 'care_settingsIncludeFromcare_settingsRecursive4'


class FindManycare_settingsArgsFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['care_settingsOrderByInput', List['care_settingsOrderByInput']]
    where: 'care_settingsWhereInput'
    cursor: 'care_settingsWhereUniqueInput'
    distinct: List['care_settingsScalarFieldKeys']
    
    

class care_logsIncludeFromwebhook_events(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    care_setting: Union[bool, 'care_settingsArgsFromwebhook_eventsRecursive1']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromwebhook_eventsRecursive1']


class care_logsIncludeFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    care_setting: Union[bool, 'care_settingsArgsFromwebhook_eventsRecursive2']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromwebhook_eventsRecursive2']


class care_logsIncludeFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    care_setting: Union[bool, 'care_settingsArgsFromwebhook_eventsRecursive3']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromwebhook_eventsRecursive3']


class care_logsIncludeFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    care_setting: Union[bool, 'care_settingsArgsFromwebhook_eventsRecursive4']
    walk_missions: Union[bool, 'FindManywalk_missionsArgsFromwebhook_eventsRecursive4']


class care_logsIncludeFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Relational arguments for webhook_events"""

    

class care_logsArgsFromwebhook_events(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'care_logsIncludeFromcare_logsRecursive1'


class care_logsArgsFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'care_logsIncludeFromcare_logsRecursive2'


class care_logsArgsFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'care_logsIncludeFromcare_logsRecursive3'


class care_logsArgsFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'care_logsIncludeFromcare_logsRecursive4'


class care_logsArgsFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Arguments for webhook_events"""
    
    

class FindManycare_logsArgsFromwebhook_events(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive1'


class FindManycare_logsArgsFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive2'


class FindManycare_logsArgsFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive3'


class FindManycare_logsArgsFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    include: 'care_logsIncludeFromcare_logsRecursive4'


class FindManycare_logsArgsFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['care_logsOrderByInput', List['care_logsOrderByInput']]
    where: 'care_logsWhereInput'
    cursor: 'care_logsWhereUniqueInput'
    distinct: List['care_logsScalarFieldKeys']
    
    

class reflection_notesIncludeFromwebhook_events(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    care_setting: Union[bool, 'care_settingsArgsFromwebhook_eventsRecursive1']


class reflection_notesIncludeFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    care_setting: Union[bool, 'care_settingsArgsFromwebhook_eventsRecursive2']


class reflection_notesIncludeFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    care_setting: Union[bool, 'care_settingsArgsFromwebhook_eventsRecursive3']


class reflection_notesIncludeFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    care_setting: Union[bool, 'care_settingsArgsFromwebhook_eventsRecursive4']


class reflection_notesIncludeFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Relational arguments for webhook_events"""

    

class reflection_notesArgsFromwebhook_events(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive1'


class reflection_notesArgsFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive2'


class reflection_notesArgsFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive3'


class reflection_notesArgsFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'reflection_notesIncludeFromreflection_notesRecursive4'


class reflection_notesArgsFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Arguments for webhook_events"""
    
    

class FindManyreflection_notesArgsFromwebhook_events(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive1'


class FindManyreflection_notesArgsFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive2'


class FindManyreflection_notesArgsFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive3'


class FindManyreflection_notesArgsFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    include: 'reflection_notesIncludeFromreflection_notesRecursive4'


class FindManyreflection_notesArgsFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['reflection_notesOrderByInput', List['reflection_notesOrderByInput']]
    where: 'reflection_notesWhereInput'
    cursor: 'reflection_notesWhereUniqueInput'
    distinct: List['reflection_notesScalarFieldKeys']
    
    

class message_logsIncludeFromwebhook_events(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    user: Union[bool, 'usersArgsFromwebhook_eventsRecursive1']


class message_logsIncludeFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    user: Union[bool, 'usersArgsFromwebhook_eventsRecursive2']


class message_logsIncludeFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    user: Union[bool, 'usersArgsFromwebhook_eventsRecursive3']


class message_logsIncludeFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    user: Union[bool, 'usersArgsFromwebhook_eventsRecursive4']


class message_logsIncludeFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Relational arguments for webhook_events"""

    

class message_logsArgsFromwebhook_events(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'message_logsIncludeFrommessage_logsRecursive1'


class message_logsArgsFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'message_logsIncludeFrommessage_logsRecursive2'


class message_logsArgsFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'message_logsIncludeFrommessage_logsRecursive3'


class message_logsArgsFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'message_logsIncludeFrommessage_logsRecursive4'


class message_logsArgsFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Arguments for webhook_events"""
    
    

class FindManymessage_logsArgsFromwebhook_events(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive1'


class FindManymessage_logsArgsFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive2'


class FindManymessage_logsArgsFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive3'


class FindManymessage_logsArgsFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    include: 'message_logsIncludeFrommessage_logsRecursive4'


class FindManymessage_logsArgsFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['message_logsOrderByInput', List['message_logsOrderByInput']]
    where: 'message_logsWhereInput'
    cursor: 'message_logsWhereUniqueInput'
    distinct: List['message_logsScalarFieldKeys']
    
    

class walk_missionsIncludeFromwebhook_events(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    care_log: Union[bool, 'care_logsArgsFromwebhook_eventsRecursive1']


class walk_missionsIncludeFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    care_log: Union[bool, 'care_logsArgsFromwebhook_eventsRecursive2']


class walk_missionsIncludeFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    care_log: Union[bool, 'care_logsArgsFromwebhook_eventsRecursive3']


class walk_missionsIncludeFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    care_log: Union[bool, 'care_logsArgsFromwebhook_eventsRecursive4']


class walk_missionsIncludeFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Relational arguments for webhook_events"""

    

class walk_missionsArgsFromwebhook_events(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive1'


class walk_missionsArgsFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive2'


class walk_missionsArgsFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive3'


class walk_missionsArgsFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'walk_missionsIncludeFromwalk_missionsRecursive4'


class walk_missionsArgsFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Arguments for webhook_events"""
    
    

class FindManywalk_missionsArgsFromwebhook_events(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive1'


class FindManywalk_missionsArgsFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive2'


class FindManywalk_missionsArgsFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive3'


class FindManywalk_missionsArgsFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    include: 'walk_missionsIncludeFromwalk_missionsRecursive4'


class FindManywalk_missionsArgsFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['walk_missionsOrderByInput', List['walk_missionsOrderByInput']]
    where: 'walk_missionsWhereInput'
    cursor: 'walk_missionsWhereUniqueInput'
    distinct: List['walk_missionsScalarFieldKeys']
    
    

class paymentIncludeFromwebhook_events(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    user: Union[bool, 'usersArgsFromwebhook_eventsRecursive1']


class paymentIncludeFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    user: Union[bool, 'usersArgsFromwebhook_eventsRecursive2']


class paymentIncludeFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    user: Union[bool, 'usersArgsFromwebhook_eventsRecursive3']


class paymentIncludeFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Relational arguments for webhook_events"""
    user: Union[bool, 'usersArgsFromwebhook_eventsRecursive4']


class paymentIncludeFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Relational arguments for webhook_events"""

    

class paymentArgsFromwebhook_events(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'paymentIncludeFrompaymentRecursive1'


class paymentArgsFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'paymentIncludeFrompaymentRecursive2'


class paymentArgsFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'paymentIncludeFrompaymentRecursive3'


class paymentArgsFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'paymentIncludeFrompaymentRecursive4'


class paymentArgsFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Arguments for webhook_events"""
    
    

class FindManypaymentArgsFromwebhook_events(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive1'


class FindManypaymentArgsFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive2'


class FindManypaymentArgsFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive3'


class FindManypaymentArgsFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    include: 'paymentIncludeFrompaymentRecursive4'


class FindManypaymentArgsFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['paymentOrderByInput', List['paymentOrderByInput']]
    where: 'paymentWhereInput'
    cursor: 'paymentWhereUniqueInput'
    distinct: List['paymentScalarFieldKeys']
    
    

class webhook_eventsIncludeFromwebhook_events(TypedDict, total=False):
    """Relational arguments for webhook_events"""


class webhook_eventsIncludeFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Relational arguments for webhook_events"""


class webhook_eventsIncludeFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Relational arguments for webhook_events"""


class webhook_eventsIncludeFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Relational arguments for webhook_events"""


class webhook_eventsIncludeFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Relational arguments for webhook_events"""

    

class webhook_eventsArgsFromwebhook_events(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive1'


class webhook_eventsArgsFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive2'


class webhook_eventsArgsFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive3'


class webhook_eventsArgsFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Arguments for webhook_events"""
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive4'


class webhook_eventsArgsFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Arguments for webhook_events"""
    
    

class FindManywebhook_eventsArgsFromwebhook_events(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive1'


class FindManywebhook_eventsArgsFromwebhook_eventsRecursive1(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive2'


class FindManywebhook_eventsArgsFromwebhook_eventsRecursive2(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive3'


class FindManywebhook_eventsArgsFromwebhook_eventsRecursive3(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    include: 'webhook_eventsIncludeFromwebhook_eventsRecursive4'


class FindManywebhook_eventsArgsFromwebhook_eventsRecursive4(TypedDict, total=False):
    """Arguments for webhook_events"""
    take: int
    skip: int
    order_by: Union['webhook_eventsOrderByInput', List['webhook_eventsOrderByInput']]
    where: 'webhook_eventsWhereInput'
    cursor: 'webhook_eventsWhereUniqueInput'
    distinct: List['webhook_eventsScalarFieldKeys']
    


FindManywebhook_eventsArgs = FindManywebhook_eventsArgsFromwebhook_events
FindFirstwebhook_eventsArgs = FindManywebhook_eventsArgsFromwebhook_events


    

class webhook_eventsWhereInput(TypedDict, total=False):
    """webhook_events arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    event_type: Union[None, _str, 'types.StringFilter']
    stripe_session_id: Union[None, _str, 'types.StringFilter']
    stripe_payment_intent_id: Union[None, _str, 'types.StringFilter']
    customer_email: Union[None, _str, 'types.StringFilter']
    amount: Union[None, _int, 'types.IntFilter']
    currency: Union[None, _str, 'types.StringFilter']
    payment_status: Union[None, _str, 'types.StringFilter']
    payload: Union[None, 'fields.Json', 'types.JsonFilter']
    received_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    processed: Union[_bool, 'types.BooleanFilter']
    error_message: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['webhook_eventsWhereInputRecursive1', List['webhook_eventsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['webhook_eventsWhereInputRecursive1']
    OR: List['webhook_eventsWhereInputRecursive1']
    NOT: List['webhook_eventsWhereInputRecursive1']


class webhook_eventsWhereInputRecursive1(TypedDict, total=False):
    """webhook_events arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    event_type: Union[None, _str, 'types.StringFilter']
    stripe_session_id: Union[None, _str, 'types.StringFilter']
    stripe_payment_intent_id: Union[None, _str, 'types.StringFilter']
    customer_email: Union[None, _str, 'types.StringFilter']
    amount: Union[None, _int, 'types.IntFilter']
    currency: Union[None, _str, 'types.StringFilter']
    payment_status: Union[None, _str, 'types.StringFilter']
    payload: Union[None, 'fields.Json', 'types.JsonFilter']
    received_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    processed: Union[_bool, 'types.BooleanFilter']
    error_message: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['webhook_eventsWhereInputRecursive2', List['webhook_eventsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['webhook_eventsWhereInputRecursive2']
    OR: List['webhook_eventsWhereInputRecursive2']
    NOT: List['webhook_eventsWhereInputRecursive2']


class webhook_eventsWhereInputRecursive2(TypedDict, total=False):
    """webhook_events arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    event_type: Union[None, _str, 'types.StringFilter']
    stripe_session_id: Union[None, _str, 'types.StringFilter']
    stripe_payment_intent_id: Union[None, _str, 'types.StringFilter']
    customer_email: Union[None, _str, 'types.StringFilter']
    amount: Union[None, _int, 'types.IntFilter']
    currency: Union[None, _str, 'types.StringFilter']
    payment_status: Union[None, _str, 'types.StringFilter']
    payload: Union[None, 'fields.Json', 'types.JsonFilter']
    received_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    processed: Union[_bool, 'types.BooleanFilter']
    error_message: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['webhook_eventsWhereInputRecursive3', List['webhook_eventsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['webhook_eventsWhereInputRecursive3']
    OR: List['webhook_eventsWhereInputRecursive3']
    NOT: List['webhook_eventsWhereInputRecursive3']


class webhook_eventsWhereInputRecursive3(TypedDict, total=False):
    """webhook_events arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    event_type: Union[None, _str, 'types.StringFilter']
    stripe_session_id: Union[None, _str, 'types.StringFilter']
    stripe_payment_intent_id: Union[None, _str, 'types.StringFilter']
    customer_email: Union[None, _str, 'types.StringFilter']
    amount: Union[None, _int, 'types.IntFilter']
    currency: Union[None, _str, 'types.StringFilter']
    payment_status: Union[None, _str, 'types.StringFilter']
    payload: Union[None, 'fields.Json', 'types.JsonFilter']
    received_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    processed: Union[_bool, 'types.BooleanFilter']
    error_message: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['webhook_eventsWhereInputRecursive4', List['webhook_eventsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['webhook_eventsWhereInputRecursive4']
    OR: List['webhook_eventsWhereInputRecursive4']
    NOT: List['webhook_eventsWhereInputRecursive4']


class webhook_eventsWhereInputRecursive4(TypedDict, total=False):
    """webhook_events arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    event_type: Union[None, _str, 'types.StringFilter']
    stripe_session_id: Union[None, _str, 'types.StringFilter']
    stripe_payment_intent_id: Union[None, _str, 'types.StringFilter']
    customer_email: Union[None, _str, 'types.StringFilter']
    amount: Union[None, _int, 'types.IntFilter']
    currency: Union[None, _str, 'types.StringFilter']
    payment_status: Union[None, _str, 'types.StringFilter']
    payload: Union[None, 'fields.Json', 'types.JsonFilter']
    received_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    processed: Union[_bool, 'types.BooleanFilter']
    error_message: Union[None, _str, 'types.StringFilter']



# aggregate webhook_events types


    

class webhook_eventsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """webhook_events arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    event_type: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_session_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_payment_intent_id: Union[_str, 'types.StringWithAggregatesFilter']
    customer_email: Union[_str, 'types.StringWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    currency: Union[_str, 'types.StringWithAggregatesFilter']
    payment_status: Union[_str, 'types.StringWithAggregatesFilter']
    payload: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    received_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    processed: Union[_bool, 'types.BooleanWithAggregatesFilter']
    error_message: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['webhook_eventsScalarWhereWithAggregatesInputRecursive1']
    OR: List['webhook_eventsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['webhook_eventsScalarWhereWithAggregatesInputRecursive1']


class webhook_eventsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """webhook_events arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    event_type: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_session_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_payment_intent_id: Union[_str, 'types.StringWithAggregatesFilter']
    customer_email: Union[_str, 'types.StringWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    currency: Union[_str, 'types.StringWithAggregatesFilter']
    payment_status: Union[_str, 'types.StringWithAggregatesFilter']
    payload: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    received_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    processed: Union[_bool, 'types.BooleanWithAggregatesFilter']
    error_message: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['webhook_eventsScalarWhereWithAggregatesInputRecursive2']
    OR: List['webhook_eventsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['webhook_eventsScalarWhereWithAggregatesInputRecursive2']


class webhook_eventsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """webhook_events arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    event_type: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_session_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_payment_intent_id: Union[_str, 'types.StringWithAggregatesFilter']
    customer_email: Union[_str, 'types.StringWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    currency: Union[_str, 'types.StringWithAggregatesFilter']
    payment_status: Union[_str, 'types.StringWithAggregatesFilter']
    payload: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    received_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    processed: Union[_bool, 'types.BooleanWithAggregatesFilter']
    error_message: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['webhook_eventsScalarWhereWithAggregatesInputRecursive3']
    OR: List['webhook_eventsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['webhook_eventsScalarWhereWithAggregatesInputRecursive3']


class webhook_eventsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """webhook_events arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    event_type: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_session_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_payment_intent_id: Union[_str, 'types.StringWithAggregatesFilter']
    customer_email: Union[_str, 'types.StringWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    currency: Union[_str, 'types.StringWithAggregatesFilter']
    payment_status: Union[_str, 'types.StringWithAggregatesFilter']
    payload: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    received_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    processed: Union[_bool, 'types.BooleanWithAggregatesFilter']
    error_message: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['webhook_eventsScalarWhereWithAggregatesInputRecursive4']
    OR: List['webhook_eventsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['webhook_eventsScalarWhereWithAggregatesInputRecursive4']


class webhook_eventsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """webhook_events arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    event_type: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_session_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_payment_intent_id: Union[_str, 'types.StringWithAggregatesFilter']
    customer_email: Union[_str, 'types.StringWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    currency: Union[_str, 'types.StringWithAggregatesFilter']
    payment_status: Union[_str, 'types.StringWithAggregatesFilter']
    payload: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    received_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    processed: Union[_bool, 'types.BooleanWithAggregatesFilter']
    error_message: Union[_str, 'types.StringWithAggregatesFilter']



class webhook_eventsGroupByOutput(TypedDict, total=False):
    id: _str
    event_type: _str
    stripe_session_id: _str
    stripe_payment_intent_id: _str
    customer_email: _str
    amount: _int
    currency: _str
    payment_status: _str
    payload: 'fields.Json'
    received_at: datetime.datetime
    processed: _bool
    error_message: _str
    _sum: 'webhook_eventsSumAggregateOutput'
    _avg: 'webhook_eventsAvgAggregateOutput'
    _min: 'webhook_eventsMinAggregateOutput'
    _max: 'webhook_eventsMaxAggregateOutput'
    _count: 'webhook_eventsCountAggregateOutput'


class webhook_eventsAvgAggregateOutput(TypedDict, total=False):
    """webhook_events output for aggregating averages"""
    amount: float


class webhook_eventsSumAggregateOutput(TypedDict, total=False):
    """webhook_events output for aggregating sums"""
    amount: _int


class webhook_eventsScalarAggregateOutput(TypedDict, total=False):
    """webhook_events output including scalar fields"""
    id: _str
    event_type: _str
    stripe_session_id: _str
    stripe_payment_intent_id: _str
    customer_email: _str
    amount: _int
    currency: _str
    payment_status: _str
    payload: 'fields.Json'
    received_at: datetime.datetime
    processed: _bool
    error_message: _str


webhook_eventsMinAggregateOutput = webhook_eventsScalarAggregateOutput
webhook_eventsMaxAggregateOutput = webhook_eventsScalarAggregateOutput


class webhook_eventsMaxAggregateInput(TypedDict, total=False):
    """webhook_events input for aggregating by max"""
    id: bool
    event_type: bool
    stripe_session_id: bool
    stripe_payment_intent_id: bool
    customer_email: bool
    amount: bool
    currency: bool
    payment_status: bool
    payload: bool
    received_at: bool
    processed: bool
    error_message: bool


class webhook_eventsMinAggregateInput(TypedDict, total=False):
    """webhook_events input for aggregating by min"""
    id: bool
    event_type: bool
    stripe_session_id: bool
    stripe_payment_intent_id: bool
    customer_email: bool
    amount: bool
    currency: bool
    payment_status: bool
    payload: bool
    received_at: bool
    processed: bool
    error_message: bool


class webhook_eventsNumberAggregateInput(TypedDict, total=False):
    """webhook_events input for aggregating numbers"""
    amount: bool


webhook_eventsAvgAggregateInput = webhook_eventsNumberAggregateInput
webhook_eventsSumAggregateInput = webhook_eventsNumberAggregateInput


webhook_eventsCountAggregateInput = TypedDict(
    'webhook_eventsCountAggregateInput',
    {
        'id': bool,
        'event_type': bool,
        'stripe_session_id': bool,
        'stripe_payment_intent_id': bool,
        'customer_email': bool,
        'amount': bool,
        'currency': bool,
        'payment_status': bool,
        'payload': bool,
        'received_at': bool,
        'processed': bool,
        'error_message': bool,
        '_all': bool,
    },
    total=False,
)

webhook_eventsCountAggregateOutput = TypedDict(
    'webhook_eventsCountAggregateOutput',
    {
        'id': int,
        'event_type': int,
        'stripe_session_id': int,
        'stripe_payment_intent_id': int,
        'customer_email': int,
        'amount': int,
        'currency': int,
        'payment_status': int,
        'payload': int,
        'received_at': int,
        'processed': int,
        'error_message': int,
        '_all': int,
    },
    total=False,
)


webhook_eventsKeys = Literal[
    'id',
    'event_type',
    'stripe_session_id',
    'stripe_payment_intent_id',
    'customer_email',
    'amount',
    'currency',
    'payment_status',
    'payload',
    'received_at',
    'processed',
    'error_message',
]
webhook_eventsScalarFieldKeys = Literal[
    'id',
    'event_type',
    'stripe_session_id',
    'stripe_payment_intent_id',
    'customer_email',
    'amount',
    'currency',
    'payment_status',
    'payload',
    'received_at',
    'processed',
    'error_message',
]
webhook_eventsScalarFieldKeysT = TypeVar('webhook_eventsScalarFieldKeysT', bound=webhook_eventsScalarFieldKeys)

webhook_eventsRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields